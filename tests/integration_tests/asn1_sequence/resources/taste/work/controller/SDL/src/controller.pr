/* CIF PROCESS (250, 150), (150, 75) */
process Controller;
    /* CIF TEXT (440, 167), (267, 152) */
    -- Text area for declarations and comments
    
    dcl test_param MyTestInteger;
    dcl work_param MyParameter;
    dcl result_param MyInteger;
    dcl expected MyInteger;
    dcl error MyInteger;
    
    
    /* CIF ENDTEXT */
    /* CIF START (320, 10), (70, 35) */
    START;
        /* CIF NEXTSTATE (320, 60), (70, 35) */
        NEXTSTATE Wait;
    /* CIF state (856, 160), (70, 35) */
    state Wait;
        /* CIF input (830, 215), (121, 35) */
        input test(test_param);
            /* CIF task (799, 270), (182, 35) */
            task expected := test_param + 2;
            /* CIF task (778, 325), (224, 35) */
            task work_param := { x test_param, y 2};
            /* CIF output (824, 380), (133, 35) */
            output work(work_param);
            /* CIF NEXTSTATE (849, 435), (83, 35) */
            NEXTSTATE Operation;
    endstate;
    /* CIF state (1848, 165), (83, 35) */
    state Operation;
        /* CIF input (1817, 220), (144, 35) */
        input result(result_param);
            /* CIF decision (1805, 275), (169, 50) */
            decision result_param = expected;
                /* CIF ANSWER (1810, 345), (70, 24) */
                (true):
                /* CIF ANSWER (1900, 345), (70, 24) */
                (false):
                    /* CIF task (1896, 389), (76, 35) */
                    task error := 1;
            enddecision;
            /* CIF NEXTSTATE (1855, 440), (70, 35) */
            NEXTSTATE Wait;
    endstate;
    /* CIF state (1487, 172), (83, 35) */
    state Operation;
        /* CIF input (1468, 227), (121, 35) */
        input test(test_param);
            /* CIF NEXTSTATE (1487, 282), (83, 35) */
            NEXTSTATE Operation;
    endstate;
    /* CIF state (1171, 164), (70, 35) */
    state Wait;
        /* CIF input (1134, 219), (143, 35) */
        input result(result_param);
            /* CIF NEXTSTATE (1171, 274), (70, 35) */
            NEXTSTATE Wait;
    endstate;
endprocess Controller;