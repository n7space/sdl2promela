#define Controller_States int
#define Controller_Context_state int
#define Controller_Context_init_done bool
#define Controller_Context_sender int
#define Controller_Context_test_param int
#define Controller_Context_up_check_param int
#define Controller_Context_down_check_param int
#define Controller_Context_up_result_param int
#define Controller_Context_down_result_param int
#define Controller_Context_up_value int
#define Controller_Context_down_value int
#define Controller_Context_error int
#define Controller_Context_reached int
#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_sender int
#define Actuator_Context_check_param int
#define Actuator_Context_result_param int
#define MyInteger int
#define MyResultInteger int
#define MyTestInteger int
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define PID_Range int
#define PID int
#define Environ_test_p1 int
#define Controller_Event_msg_in_down_result_p1 int
#define Controller_Event_msg_in_test_p1 int
#define Controller_Event_msg_in_up_result_p1 int
#define Controller_Event_msg_out_down_check_p1 int
#define Controller_Event_msg_out_up_check_p1 int
#define Down_Event_msg_in_check_p1 int
#define Down_Event_msg_out_result_p1 int
#define Environ_Event_msg_out_test_p1 int
#define Up_Event_msg_in_check_p1 int
#define Up_Event_msg_out_result_p1 int
#define Observer_State_Kind int
#define Function_Event_controller_msg_in_down_result_p1 int
#define Function_Event_controller_msg_in_test_p1 int
#define Function_Event_controller_msg_in_up_result_p1 int
#define Function_Event_controller_msg_out_down_check_p1 int
#define Function_Event_controller_msg_out_up_check_p1 int
#define Function_Event_down_msg_in_check_p1 int
#define Function_Event_down_msg_out_result_p1 int
#define Function_Event_environ_msg_out_test_p1 int
#define Function_Event_up_msg_in_check_p1 int
#define Function_Event_up_msg_out_result_p1 int
#define Named_Function_Event_event_controller_msg_in_down_result_p1 int
#define Named_Function_Event_event_controller_msg_in_test_p1 int
#define Named_Function_Event_event_controller_msg_in_up_result_p1 int
#define Named_Function_Event_event_controller_msg_out_down_check_p1 int
#define Named_Function_Event_event_controller_msg_out_up_check_p1 int
#define Named_Function_Event_event_down_msg_in_check_p1 int
#define Named_Function_Event_event_down_msg_out_result_p1 int
#define Named_Function_Event_event_environ_msg_out_test_p1 int
#define Named_Function_Event_event_up_msg_in_check_p1 int
#define Named_Function_Event_event_up_msg_out_result_p1 int
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_controller_msg_in_down_result_p1 int
#define Interface_Event_event_controller_msg_in_test_p1 int
#define Interface_Event_event_controller_msg_in_up_result_p1 int
#define Interface_Event_event_controller_msg_out_down_check_p1 int
#define Interface_Event_event_controller_msg_out_up_check_p1 int
#define Interface_Event_event_down_msg_in_check_p1 int
#define Interface_Event_event_down_msg_out_result_p1 int
#define Interface_Event_event_environ_msg_out_test_p1 int
#define Interface_Event_event_up_msg_in_check_p1 int
#define Interface_Event_event_up_msg_out_result_p1 int
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_controller_msg_in_down_result_p1 int
#define Observable_Event_input_event_event_controller_msg_in_test_p1 int
#define Observable_Event_input_event_event_controller_msg_in_up_result_p1 int
#define Observable_Event_input_event_event_controller_msg_out_down_check_p1 int
#define Observable_Event_input_event_event_controller_msg_out_up_check_p1 int
#define Observable_Event_input_event_event_down_msg_in_check_p1 int
#define Observable_Event_input_event_event_down_msg_out_result_p1 int
#define Observable_Event_input_event_event_environ_msg_out_test_p1 int
#define Observable_Event_input_event_event_up_msg_in_check_p1 int
#define Observable_Event_input_event_event_up_msg_out_result_p1 int
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_controller_msg_in_down_result_p1 int
#define Observable_Event_output_event_event_controller_msg_in_test_p1 int
#define Observable_Event_output_event_event_controller_msg_in_up_result_p1 int
#define Observable_Event_output_event_event_controller_msg_out_down_check_p1 int
#define Observable_Event_output_event_event_controller_msg_out_up_check_p1 int
#define Observable_Event_output_event_event_down_msg_in_check_p1 int
#define Observable_Event_output_event_event_down_msg_out_result_p1 int
#define Observable_Event_output_event_event_environ_msg_out_test_p1 int
#define Observable_Event_output_event_event_up_msg_in_check_p1 int
#define Observable_Event_output_event_event_up_msg_out_result_p1 int
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_test_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1 int
#define Observable_Event_unhandled_input_event_down_msg_in_check_p1 int
#define Observable_Event_unhandled_input_event_down_msg_out_result_p1 int
#define Observable_Event_unhandled_input_event_environ_msg_out_test_p1 int
#define Observable_Event_unhandled_input_event_up_msg_in_check_p1 int
#define Observable_Event_unhandled_input_event_up_msg_out_result_p1 int
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1 int
#define Events_Ty_elem_input_event_event_down_msg_in_check_p1 int
#define Events_Ty_elem_input_event_event_down_msg_out_result_p1 int
#define Events_Ty_elem_input_event_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_input_event_event_up_msg_in_check_p1 int
#define Events_Ty_elem_input_event_event_up_msg_out_result_p1 int
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1 int
#define Events_Ty_elem_output_event_event_down_msg_in_check_p1 int
#define Events_Ty_elem_output_event_event_down_msg_out_result_p1 int
#define Events_Ty_elem_output_event_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_output_event_event_up_msg_in_check_p1 int
#define Events_Ty_elem_output_event_event_up_msg_out_result_p1 int
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1 int
#define Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1 int
#define Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1 int
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1 int
#define Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1 int
#define System_State_controller_queue_elem_input_event_source int
#define System_State_controller_queue_elem_input_event_dest int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1 int
#define System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1 int
#define System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1 int
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1 int
#define System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1 int
#define System_State_controller_queue_elem_output_event_source int
#define System_State_controller_queue_elem_output_event_dest int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1 int
#define System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1 int
#define System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1 int
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1 int
#define System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1 int
#define System_State_controller_queue_elem_unhandled_input_source int
#define System_State_controller_queue_elem_unhandled_input_dest int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1 int
#define System_State_down_queue_elem_input_event_source int
#define System_State_down_queue_elem_input_event_dest int
#define System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1 int
#define System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1 int
#define System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1 int
#define System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1 int
#define System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1 int
#define System_State_down_queue_elem_input_event_event_down_msg_in_check_p1 int
#define System_State_down_queue_elem_input_event_event_down_msg_out_result_p1 int
#define System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1 int
#define System_State_down_queue_elem_input_event_event_up_msg_in_check_p1 int
#define System_State_down_queue_elem_input_event_event_up_msg_out_result_p1 int
#define System_State_down_queue_elem_output_event_source int
#define System_State_down_queue_elem_output_event_dest int
#define System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1 int
#define System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1 int
#define System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1 int
#define System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1 int
#define System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1 int
#define System_State_down_queue_elem_output_event_event_down_msg_in_check_p1 int
#define System_State_down_queue_elem_output_event_event_down_msg_out_result_p1 int
#define System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1 int
#define System_State_down_queue_elem_output_event_event_up_msg_in_check_p1 int
#define System_State_down_queue_elem_output_event_event_up_msg_out_result_p1 int
#define System_State_down_queue_elem_unhandled_input_source int
#define System_State_down_queue_elem_unhandled_input_dest int
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 int
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 int
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 int
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 int
#define System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1 int
#define System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1 int
#define System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1 int
#define System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1 int
#define System_State_up_queue_elem_input_event_source int
#define System_State_up_queue_elem_input_event_dest int
#define System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1 int
#define System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1 int
#define System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1 int
#define System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1 int
#define System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1 int
#define System_State_up_queue_elem_input_event_event_down_msg_in_check_p1 int
#define System_State_up_queue_elem_input_event_event_down_msg_out_result_p1 int
#define System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1 int
#define System_State_up_queue_elem_input_event_event_up_msg_in_check_p1 int
#define System_State_up_queue_elem_input_event_event_up_msg_out_result_p1 int
#define System_State_up_queue_elem_output_event_source int
#define System_State_up_queue_elem_output_event_dest int
#define System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1 int
#define System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1 int
#define System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1 int
#define System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1 int
#define System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1 int
#define System_State_up_queue_elem_output_event_event_down_msg_in_check_p1 int
#define System_State_up_queue_elem_output_event_event_down_msg_out_result_p1 int
#define System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1 int
#define System_State_up_queue_elem_output_event_event_up_msg_in_check_p1 int
#define System_State_up_queue_elem_output_event_event_up_msg_out_result_p1 int
#define System_State_up_queue_elem_unhandled_input_source int
#define System_State_up_queue_elem_unhandled_input_dest int
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 int
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 int
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 int
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 int
#define System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1 int
#define System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1 int
#define System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1 int
#define System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1 int
#define System_State_controller_state int
#define System_State_controller_init_done bool
#define System_State_controller_sender int
#define System_State_controller_test_param int
#define System_State_controller_up_check_param int
#define System_State_controller_down_check_param int
#define System_State_controller_up_result_param int
#define System_State_controller_down_result_param int
#define System_State_controller_up_value int
#define System_State_controller_down_value int
#define System_State_controller_error int
#define System_State_controller_reached int
#define System_State_down_state int
#define System_State_down_init_done bool
#define System_State_down_sender int
#define System_State_down_check_param int
#define System_State_down_result_param int
#define System_State_up_state int
#define System_State_up_init_done bool
#define System_State_up_sender int
#define System_State_up_check_param int
#define System_State_up_result_param int
#define TimerData_timer_enabled bool
#define TimerData_interval int
#define Controller_States_waitingforup 0
#define Controller_States_waitingfordown 1
#define Controller_States_wait 2
#define Controller_States_waitingforboth 3
#define Controller_Context_state_waitingforup 0
#define Controller_Context_state_waitingfordown 1
#define Controller_Context_state_wait 2
#define Controller_Context_state_waitingforboth 3
#define Controller_Context_sender_actuator 0
#define Controller_Context_sender_controller 1
#define Controller_Context_sender_down 2
#define Controller_Context_sender_environ 3
#define Controller_Context_sender_up 4
#define Controller_Context_sender_env 5
#define Actuator_States_wait 0
#define Actuator_States_operation 1
#define Actuator_Context_state_wait 0
#define Actuator_Context_state_operation 1
#define Actuator_Context_sender_actuator 0
#define Actuator_Context_sender_controller 1
#define Actuator_Context_sender_down 2
#define Actuator_Context_sender_environ 3
#define Actuator_Context_sender_up 4
#define Actuator_Context_sender_env 5
#define PID_actuator 0
#define PID_controller 1
#define PID_down 2
#define PID_environ 3
#define PID_up 4
#define PID_env 5
#define Controller_Event_NONE 0
#define Controller_Event_msg_in_NONE 0
#define Controller_Event_msg_in_input_none_PRESENT 1
#define Controller_event_msg_in_selection_input_none_PRESENT 1
#define Controller_Event_msg_in_down_result_PRESENT 2
#define Controller_event_msg_in_selection_down_result_PRESENT 2
#define Controller_Event_msg_in_test_PRESENT 3
#define Controller_event_msg_in_selection_test_PRESENT 3
#define Controller_Event_msg_in_up_result_PRESENT 4
#define Controller_event_msg_in_selection_up_result_PRESENT 4
#define Controller_Event_msg_in_PRESENT 1
#define Controller_event_selection_msg_in_PRESENT 1
#define Controller_Event_msg_out_NONE 0
#define Controller_Event_msg_out_down_check_PRESENT 1
#define Controller_event_msg_out_selection_down_check_PRESENT 1
#define Controller_Event_msg_out_up_check_PRESENT 2
#define Controller_event_msg_out_selection_up_check_PRESENT 2
#define Controller_Event_msg_out_PRESENT 2
#define Controller_event_selection_msg_out_PRESENT 2
#define Down_Event_NONE 0
#define Down_Event_msg_in_NONE 0
#define Down_Event_msg_in_input_none_PRESENT 1
#define Down_event_msg_in_selection_input_none_PRESENT 1
#define Down_Event_msg_in_check_PRESENT 2
#define Down_event_msg_in_selection_check_PRESENT 2
#define Down_Event_msg_in_PRESENT 1
#define Down_event_selection_msg_in_PRESENT 1
#define Down_Event_msg_out_NONE 0
#define Down_Event_msg_out_result_PRESENT 1
#define Down_event_msg_out_selection_result_PRESENT 1
#define Down_Event_msg_out_PRESENT 2
#define Down_event_selection_msg_out_PRESENT 2
#define Environ_Event_NONE 0
#define Environ_Event_msg_out_NONE 0
#define Environ_Event_msg_out_test_PRESENT 1
#define Environ_event_msg_out_selection_test_PRESENT 1
#define Environ_Event_msg_out_PRESENT 1
#define Environ_event_selection_msg_out_PRESENT 1
#define Up_Event_NONE 0
#define Up_Event_msg_in_NONE 0
#define Up_Event_msg_in_input_none_PRESENT 1
#define Up_event_msg_in_selection_input_none_PRESENT 1
#define Up_Event_msg_in_check_PRESENT 2
#define Up_event_msg_in_selection_check_PRESENT 2
#define Up_Event_msg_in_PRESENT 1
#define Up_event_selection_msg_in_PRESENT 1
#define Up_Event_msg_out_NONE 0
#define Up_Event_msg_out_result_PRESENT 1
#define Up_event_msg_out_selection_result_PRESENT 1
#define Up_Event_msg_out_PRESENT 2
#define Up_event_selection_msg_out_PRESENT 2
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_controller_NONE 0
#define Function_Event_controller_msg_in_NONE 0
#define Function_Event_controller_msg_in_input_none_PRESENT 1
#define Function_event_controller_msg_in_selection_input_none_PRESENT 1
#define Function_Event_controller_msg_in_down_result_PRESENT 2
#define Function_event_controller_msg_in_selection_down_result_PRESENT 2
#define Function_Event_controller_msg_in_test_PRESENT 3
#define Function_event_controller_msg_in_selection_test_PRESENT 3
#define Function_Event_controller_msg_in_up_result_PRESENT 4
#define Function_event_controller_msg_in_selection_up_result_PRESENT 4
#define Function_Event_controller_msg_in_PRESENT 1
#define Function_event_controller_selection_msg_in_PRESENT 1
#define Function_Event_controller_msg_out_NONE 0
#define Function_Event_controller_msg_out_down_check_PRESENT 1
#define Function_event_controller_msg_out_selection_down_check_PRESENT 1
#define Function_Event_controller_msg_out_up_check_PRESENT 2
#define Function_event_controller_msg_out_selection_up_check_PRESENT 2
#define Function_Event_controller_msg_out_PRESENT 2
#define Function_event_controller_selection_msg_out_PRESENT 2
#define Function_Event_controller_PRESENT 1
#define Function_event_selection_controller_PRESENT 1
#define Function_Event_down_NONE 0
#define Function_Event_down_msg_in_NONE 0
#define Function_Event_down_msg_in_input_none_PRESENT 1
#define Function_event_down_msg_in_selection_input_none_PRESENT 1
#define Function_Event_down_msg_in_check_PRESENT 2
#define Function_event_down_msg_in_selection_check_PRESENT 2
#define Function_Event_down_msg_in_PRESENT 1
#define Function_event_down_selection_msg_in_PRESENT 1
#define Function_Event_down_msg_out_NONE 0
#define Function_Event_down_msg_out_result_PRESENT 1
#define Function_event_down_msg_out_selection_result_PRESENT 1
#define Function_Event_down_msg_out_PRESENT 2
#define Function_event_down_selection_msg_out_PRESENT 2
#define Function_Event_down_PRESENT 2
#define Function_event_selection_down_PRESENT 2
#define Function_Event_environ_NONE 0
#define Function_Event_environ_msg_out_NONE 0
#define Function_Event_environ_msg_out_test_PRESENT 1
#define Function_event_environ_msg_out_selection_test_PRESENT 1
#define Function_Event_environ_msg_out_PRESENT 1
#define Function_event_environ_selection_msg_out_PRESENT 1
#define Function_Event_environ_PRESENT 3
#define Function_event_selection_environ_PRESENT 3
#define Function_Event_up_NONE 0
#define Function_Event_up_msg_in_NONE 0
#define Function_Event_up_msg_in_input_none_PRESENT 1
#define Function_event_up_msg_in_selection_input_none_PRESENT 1
#define Function_Event_up_msg_in_check_PRESENT 2
#define Function_event_up_msg_in_selection_check_PRESENT 2
#define Function_Event_up_msg_in_PRESENT 1
#define Function_event_up_selection_msg_in_PRESENT 1
#define Function_Event_up_msg_out_NONE 0
#define Function_Event_up_msg_out_result_PRESENT 1
#define Function_event_up_msg_out_selection_result_PRESENT 1
#define Function_Event_up_msg_out_PRESENT 2
#define Function_event_up_selection_msg_out_PRESENT 2
#define Function_Event_up_PRESENT 4
#define Function_event_selection_up_PRESENT 4
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_controller_NONE 0
#define Named_Function_Event_event_controller_msg_in_NONE 0
#define Named_Function_Event_event_controller_msg_in_input_none_PRESENT 1
#define Named_function_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_controller_msg_in_down_result_PRESENT 2
#define Named_function_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Named_Function_Event_event_controller_msg_in_test_PRESENT 3
#define Named_function_event_event_controller_msg_in_selection_test_PRESENT 3
#define Named_Function_Event_event_controller_msg_in_up_result_PRESENT 4
#define Named_function_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Named_Function_Event_event_controller_msg_in_PRESENT 1
#define Named_function_event_event_controller_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_NONE 0
#define Named_Function_Event_event_controller_msg_out_down_check_PRESENT 1
#define Named_function_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_up_check_PRESENT 2
#define Named_function_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_PRESENT 2
#define Named_function_event_event_controller_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_controller_PRESENT 1
#define Named_function_event_event_selection_controller_PRESENT 1
#define Named_Function_Event_event_down_NONE 0
#define Named_Function_Event_event_down_msg_in_NONE 0
#define Named_Function_Event_event_down_msg_in_input_none_PRESENT 1
#define Named_function_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_down_msg_in_check_PRESENT 2
#define Named_function_event_event_down_msg_in_selection_check_PRESENT 2
#define Named_Function_Event_event_down_msg_in_PRESENT 1
#define Named_function_event_event_down_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_down_msg_out_NONE 0
#define Named_Function_Event_event_down_msg_out_result_PRESENT 1
#define Named_function_event_event_down_msg_out_selection_result_PRESENT 1
#define Named_Function_Event_event_down_msg_out_PRESENT 2
#define Named_function_event_event_down_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_down_PRESENT 2
#define Named_function_event_event_selection_down_PRESENT 2
#define Named_Function_Event_event_environ_NONE 0
#define Named_Function_Event_event_environ_msg_out_NONE 0
#define Named_Function_Event_event_environ_msg_out_test_PRESENT 1
#define Named_function_event_event_environ_msg_out_selection_test_PRESENT 1
#define Named_Function_Event_event_environ_msg_out_PRESENT 1
#define Named_function_event_event_environ_selection_msg_out_PRESENT 1
#define Named_Function_Event_event_environ_PRESENT 3
#define Named_function_event_event_selection_environ_PRESENT 3
#define Named_Function_Event_event_up_NONE 0
#define Named_Function_Event_event_up_msg_in_NONE 0
#define Named_Function_Event_event_up_msg_in_input_none_PRESENT 1
#define Named_function_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_up_msg_in_check_PRESENT 2
#define Named_function_event_event_up_msg_in_selection_check_PRESENT 2
#define Named_Function_Event_event_up_msg_in_PRESENT 1
#define Named_function_event_event_up_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_up_msg_out_NONE 0
#define Named_Function_Event_event_up_msg_out_result_PRESENT 1
#define Named_function_event_event_up_msg_out_selection_result_PRESENT 1
#define Named_Function_Event_event_up_msg_out_PRESENT 2
#define Named_function_event_event_up_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_up_PRESENT 4
#define Named_function_event_event_selection_up_PRESENT 4
#define Interface_Event_source_actuator 0
#define Interface_Event_source_controller 1
#define Interface_Event_source_down 2
#define Interface_Event_source_environ 3
#define Interface_Event_source_up 4
#define Interface_Event_source_env 5
#define Interface_Event_dest_actuator 0
#define Interface_Event_dest_controller 1
#define Interface_Event_dest_down 2
#define Interface_Event_dest_environ 3
#define Interface_Event_dest_up 4
#define Interface_Event_dest_env 5
#define Interface_Event_event_NONE 0
#define Interface_Event_event_controller_NONE 0
#define Interface_Event_event_controller_msg_in_NONE 0
#define Interface_Event_event_controller_msg_in_input_none_PRESENT 1
#define Interface_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_controller_msg_in_down_result_PRESENT 2
#define Interface_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Interface_Event_event_controller_msg_in_test_PRESENT 3
#define Interface_event_event_controller_msg_in_selection_test_PRESENT 3
#define Interface_Event_event_controller_msg_in_up_result_PRESENT 4
#define Interface_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Interface_Event_event_controller_msg_in_PRESENT 1
#define Interface_event_event_controller_selection_msg_in_PRESENT 1
#define Interface_Event_event_controller_msg_out_NONE 0
#define Interface_Event_event_controller_msg_out_down_check_PRESENT 1
#define Interface_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Interface_Event_event_controller_msg_out_up_check_PRESENT 2
#define Interface_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Interface_Event_event_controller_msg_out_PRESENT 2
#define Interface_event_event_controller_selection_msg_out_PRESENT 2
#define Interface_Event_event_controller_PRESENT 1
#define Interface_event_event_selection_controller_PRESENT 1
#define Interface_Event_event_down_NONE 0
#define Interface_Event_event_down_msg_in_NONE 0
#define Interface_Event_event_down_msg_in_input_none_PRESENT 1
#define Interface_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_down_msg_in_check_PRESENT 2
#define Interface_event_event_down_msg_in_selection_check_PRESENT 2
#define Interface_Event_event_down_msg_in_PRESENT 1
#define Interface_event_event_down_selection_msg_in_PRESENT 1
#define Interface_Event_event_down_msg_out_NONE 0
#define Interface_Event_event_down_msg_out_result_PRESENT 1
#define Interface_event_event_down_msg_out_selection_result_PRESENT 1
#define Interface_Event_event_down_msg_out_PRESENT 2
#define Interface_event_event_down_selection_msg_out_PRESENT 2
#define Interface_Event_event_down_PRESENT 2
#define Interface_event_event_selection_down_PRESENT 2
#define Interface_Event_event_environ_NONE 0
#define Interface_Event_event_environ_msg_out_NONE 0
#define Interface_Event_event_environ_msg_out_test_PRESENT 1
#define Interface_event_event_environ_msg_out_selection_test_PRESENT 1
#define Interface_Event_event_environ_msg_out_PRESENT 1
#define Interface_event_event_environ_selection_msg_out_PRESENT 1
#define Interface_Event_event_environ_PRESENT 3
#define Interface_event_event_selection_environ_PRESENT 3
#define Interface_Event_event_up_NONE 0
#define Interface_Event_event_up_msg_in_NONE 0
#define Interface_Event_event_up_msg_in_input_none_PRESENT 1
#define Interface_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_up_msg_in_check_PRESENT 2
#define Interface_event_event_up_msg_in_selection_check_PRESENT 2
#define Interface_Event_event_up_msg_in_PRESENT 1
#define Interface_event_event_up_selection_msg_in_PRESENT 1
#define Interface_Event_event_up_msg_out_NONE 0
#define Interface_Event_event_up_msg_out_result_PRESENT 1
#define Interface_event_event_up_msg_out_selection_result_PRESENT 1
#define Interface_Event_event_up_msg_out_PRESENT 2
#define Interface_event_event_up_selection_msg_out_PRESENT 2
#define Interface_Event_event_up_PRESENT 4
#define Interface_event_event_selection_up_PRESENT 4
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_actuator 0
#define Observable_Event_input_event_source_controller 1
#define Observable_Event_input_event_source_down 2
#define Observable_Event_input_event_source_environ 3
#define Observable_Event_input_event_source_up 4
#define Observable_Event_input_event_source_env 5
#define Observable_Event_input_event_dest_actuator 0
#define Observable_Event_input_event_dest_controller 1
#define Observable_Event_input_event_dest_down 2
#define Observable_Event_input_event_dest_environ 3
#define Observable_Event_input_event_dest_up 4
#define Observable_Event_input_event_dest_env 5
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_controller_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_in_down_result_PRESENT 2
#define Observable_event_input_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_in_test_PRESENT 3
#define Observable_event_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_input_event_event_controller_msg_in_up_result_PRESENT 4
#define Observable_event_input_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Observable_Event_input_event_event_controller_msg_in_PRESENT 1
#define Observable_event_input_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_down_check_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_up_check_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_PRESENT 2
#define Observable_event_input_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_controller_PRESENT 1
#define Observable_event_input_event_event_selection_controller_PRESENT 1
#define Observable_Event_input_event_event_down_NONE 0
#define Observable_Event_input_event_event_down_msg_in_NONE 0
#define Observable_Event_input_event_event_down_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_down_msg_in_check_PRESENT 2
#define Observable_event_input_event_event_down_msg_in_selection_check_PRESENT 2
#define Observable_Event_input_event_event_down_msg_in_PRESENT 1
#define Observable_event_input_event_event_down_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_down_msg_out_NONE 0
#define Observable_Event_input_event_event_down_msg_out_result_PRESENT 1
#define Observable_event_input_event_event_down_msg_out_selection_result_PRESENT 1
#define Observable_Event_input_event_event_down_msg_out_PRESENT 2
#define Observable_event_input_event_event_down_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_down_PRESENT 2
#define Observable_event_input_event_event_selection_down_PRESENT 2
#define Observable_Event_input_event_event_environ_NONE 0
#define Observable_Event_input_event_event_environ_msg_out_NONE 0
#define Observable_Event_input_event_event_environ_msg_out_test_PRESENT 1
#define Observable_event_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_input_event_event_environ_msg_out_PRESENT 1
#define Observable_event_input_event_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_input_event_event_environ_PRESENT 3
#define Observable_event_input_event_event_selection_environ_PRESENT 3
#define Observable_Event_input_event_event_up_NONE 0
#define Observable_Event_input_event_event_up_msg_in_NONE 0
#define Observable_Event_input_event_event_up_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_up_msg_in_check_PRESENT 2
#define Observable_event_input_event_event_up_msg_in_selection_check_PRESENT 2
#define Observable_Event_input_event_event_up_msg_in_PRESENT 1
#define Observable_event_input_event_event_up_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_up_msg_out_NONE 0
#define Observable_Event_input_event_event_up_msg_out_result_PRESENT 1
#define Observable_event_input_event_event_up_msg_out_selection_result_PRESENT 1
#define Observable_Event_input_event_event_up_msg_out_PRESENT 2
#define Observable_event_input_event_event_up_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_up_PRESENT 4
#define Observable_event_input_event_event_selection_up_PRESENT 4
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_actuator 0
#define Observable_Event_output_event_source_controller 1
#define Observable_Event_output_event_source_down 2
#define Observable_Event_output_event_source_environ 3
#define Observable_Event_output_event_source_up 4
#define Observable_Event_output_event_source_env 5
#define Observable_Event_output_event_dest_actuator 0
#define Observable_Event_output_event_dest_controller 1
#define Observable_Event_output_event_dest_down 2
#define Observable_Event_output_event_dest_environ 3
#define Observable_Event_output_event_dest_up 4
#define Observable_Event_output_event_dest_env 5
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_controller_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_in_down_result_PRESENT 2
#define Observable_event_output_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_in_test_PRESENT 3
#define Observable_event_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_output_event_event_controller_msg_in_up_result_PRESENT 4
#define Observable_event_output_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Observable_Event_output_event_event_controller_msg_in_PRESENT 1
#define Observable_event_output_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_down_check_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_up_check_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_PRESENT 2
#define Observable_event_output_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_controller_PRESENT 1
#define Observable_event_output_event_event_selection_controller_PRESENT 1
#define Observable_Event_output_event_event_down_NONE 0
#define Observable_Event_output_event_event_down_msg_in_NONE 0
#define Observable_Event_output_event_event_down_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_down_msg_in_check_PRESENT 2
#define Observable_event_output_event_event_down_msg_in_selection_check_PRESENT 2
#define Observable_Event_output_event_event_down_msg_in_PRESENT 1
#define Observable_event_output_event_event_down_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_down_msg_out_NONE 0
#define Observable_Event_output_event_event_down_msg_out_result_PRESENT 1
#define Observable_event_output_event_event_down_msg_out_selection_result_PRESENT 1
#define Observable_Event_output_event_event_down_msg_out_PRESENT 2
#define Observable_event_output_event_event_down_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_down_PRESENT 2
#define Observable_event_output_event_event_selection_down_PRESENT 2
#define Observable_Event_output_event_event_environ_NONE 0
#define Observable_Event_output_event_event_environ_msg_out_NONE 0
#define Observable_Event_output_event_event_environ_msg_out_test_PRESENT 1
#define Observable_event_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_output_event_event_environ_msg_out_PRESENT 1
#define Observable_event_output_event_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_output_event_event_environ_PRESENT 3
#define Observable_event_output_event_event_selection_environ_PRESENT 3
#define Observable_Event_output_event_event_up_NONE 0
#define Observable_Event_output_event_event_up_msg_in_NONE 0
#define Observable_Event_output_event_event_up_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_up_msg_in_check_PRESENT 2
#define Observable_event_output_event_event_up_msg_in_selection_check_PRESENT 2
#define Observable_Event_output_event_event_up_msg_in_PRESENT 1
#define Observable_event_output_event_event_up_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_up_msg_out_NONE 0
#define Observable_Event_output_event_event_up_msg_out_result_PRESENT 1
#define Observable_event_output_event_event_up_msg_out_selection_result_PRESENT 1
#define Observable_Event_output_event_event_up_msg_out_PRESENT 2
#define Observable_event_output_event_event_up_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_up_PRESENT 4
#define Observable_event_output_event_event_selection_up_PRESENT 4
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_actuator 0
#define Observable_Event_unhandled_input_source_controller 1
#define Observable_Event_unhandled_input_source_down 2
#define Observable_Event_unhandled_input_source_environ 3
#define Observable_Event_unhandled_input_source_up 4
#define Observable_Event_unhandled_input_source_env 5
#define Observable_Event_unhandled_input_dest_actuator 0
#define Observable_Event_unhandled_input_dest_controller 1
#define Observable_Event_unhandled_input_dest_down 2
#define Observable_Event_unhandled_input_dest_environ 3
#define Observable_Event_unhandled_input_dest_up 4
#define Observable_Event_unhandled_input_dest_env 5
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_controller_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_in_down_result_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_in_selection_down_result_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define Observable_event_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_unhandled_input_event_controller_msg_in_up_result_PRESENT 4
#define Observable_event_unhandled_input_event_controller_msg_in_selection_up_result_PRESENT 4
#define Observable_Event_unhandled_input_event_controller_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_down_check_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_selection_down_check_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_up_check_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_selection_up_check_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_PRESENT 1
#define Observable_event_unhandled_input_event_selection_controller_PRESENT 1
#define Observable_Event_unhandled_input_event_down_NONE 0
#define Observable_Event_unhandled_input_event_down_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_down_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_down_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_down_msg_in_check_PRESENT 2
#define Observable_event_unhandled_input_event_down_msg_in_selection_check_PRESENT 2
#define Observable_Event_unhandled_input_event_down_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_down_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_down_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_down_msg_out_result_PRESENT 1
#define Observable_event_unhandled_input_event_down_msg_out_selection_result_PRESENT 1
#define Observable_Event_unhandled_input_event_down_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_down_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_down_PRESENT 2
#define Observable_event_unhandled_input_event_selection_down_PRESENT 2
#define Observable_Event_unhandled_input_event_environ_NONE 0
#define Observable_Event_unhandled_input_event_environ_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define Observable_event_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_unhandled_input_event_environ_msg_out_PRESENT 1
#define Observable_event_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_unhandled_input_event_environ_PRESENT 3
#define Observable_event_unhandled_input_event_selection_environ_PRESENT 3
#define Observable_Event_unhandled_input_event_up_NONE 0
#define Observable_Event_unhandled_input_event_up_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_up_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_up_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_up_msg_in_check_PRESENT 2
#define Observable_event_unhandled_input_event_up_msg_in_selection_check_PRESENT 2
#define Observable_Event_unhandled_input_event_up_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_up_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_up_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_up_msg_out_result_PRESENT 1
#define Observable_event_unhandled_input_event_up_msg_out_selection_result_PRESENT 1
#define Observable_Event_unhandled_input_event_up_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_up_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_up_PRESENT 4
#define Observable_event_unhandled_input_event_selection_up_PRESENT 4
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_actuator 0
#define Events_Ty_elem_input_event_source_controller 1
#define Events_Ty_elem_input_event_source_down 2
#define Events_Ty_elem_input_event_source_environ 3
#define Events_Ty_elem_input_event_source_up 4
#define Events_Ty_elem_input_event_source_env 5
#define Events_Ty_elem_input_event_dest_actuator 0
#define Events_Ty_elem_input_event_dest_controller 1
#define Events_Ty_elem_input_event_dest_down 2
#define Events_Ty_elem_input_event_dest_environ 3
#define Events_Ty_elem_input_event_dest_up 4
#define Events_Ty_elem_input_event_dest_env 5
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_controller_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_in_down_result_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_input_event_event_controller_msg_in_up_result_PRESENT 4
#define Events_ty_elem_input_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Events_Ty_elem_input_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_down_check_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_up_check_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_PRESENT 1
#define Events_ty_elem_input_event_event_selection_controller_PRESENT 1
#define Events_Ty_elem_input_event_event_down_NONE 0
#define Events_Ty_elem_input_event_event_down_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_down_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_down_msg_in_check_PRESENT 2
#define Events_ty_elem_input_event_event_down_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_input_event_event_down_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_down_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_down_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_down_msg_out_result_PRESENT 1
#define Events_ty_elem_input_event_event_down_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_input_event_event_down_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_down_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_down_PRESENT 2
#define Events_ty_elem_input_event_event_selection_down_PRESENT 2
#define Events_Ty_elem_input_event_event_environ_NONE 0
#define Events_Ty_elem_input_event_event_environ_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_input_event_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_input_event_event_environ_PRESENT 3
#define Events_ty_elem_input_event_event_selection_environ_PRESENT 3
#define Events_Ty_elem_input_event_event_up_NONE 0
#define Events_Ty_elem_input_event_event_up_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_up_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_up_msg_in_check_PRESENT 2
#define Events_ty_elem_input_event_event_up_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_input_event_event_up_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_up_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_up_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_up_msg_out_result_PRESENT 1
#define Events_ty_elem_input_event_event_up_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_input_event_event_up_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_up_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_up_PRESENT 4
#define Events_ty_elem_input_event_event_selection_up_PRESENT 4
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_actuator 0
#define Events_Ty_elem_output_event_source_controller 1
#define Events_Ty_elem_output_event_source_down 2
#define Events_Ty_elem_output_event_source_environ 3
#define Events_Ty_elem_output_event_source_up 4
#define Events_Ty_elem_output_event_source_env 5
#define Events_Ty_elem_output_event_dest_actuator 0
#define Events_Ty_elem_output_event_dest_controller 1
#define Events_Ty_elem_output_event_dest_down 2
#define Events_Ty_elem_output_event_dest_environ 3
#define Events_Ty_elem_output_event_dest_up 4
#define Events_Ty_elem_output_event_dest_env 5
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_controller_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_in_down_result_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_output_event_event_controller_msg_in_up_result_PRESENT 4
#define Events_ty_elem_output_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define Events_Ty_elem_output_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_down_check_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_up_check_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_PRESENT 1
#define Events_ty_elem_output_event_event_selection_controller_PRESENT 1
#define Events_Ty_elem_output_event_event_down_NONE 0
#define Events_Ty_elem_output_event_event_down_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_down_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_down_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_down_msg_in_check_PRESENT 2
#define Events_ty_elem_output_event_event_down_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_output_event_event_down_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_down_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_down_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_down_msg_out_result_PRESENT 1
#define Events_ty_elem_output_event_event_down_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_output_event_event_down_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_down_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_down_PRESENT 2
#define Events_ty_elem_output_event_event_selection_down_PRESENT 2
#define Events_Ty_elem_output_event_event_environ_NONE 0
#define Events_Ty_elem_output_event_event_environ_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_output_event_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_output_event_event_environ_PRESENT 3
#define Events_ty_elem_output_event_event_selection_environ_PRESENT 3
#define Events_Ty_elem_output_event_event_up_NONE 0
#define Events_Ty_elem_output_event_event_up_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_up_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_up_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_up_msg_in_check_PRESENT 2
#define Events_ty_elem_output_event_event_up_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_output_event_event_up_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_up_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_up_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_up_msg_out_result_PRESENT 1
#define Events_ty_elem_output_event_event_up_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_output_event_event_up_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_up_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_up_PRESENT 4
#define Events_ty_elem_output_event_event_selection_up_PRESENT 4
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_actuator 0
#define Events_Ty_elem_unhandled_input_source_controller 1
#define Events_Ty_elem_unhandled_input_source_down 2
#define Events_Ty_elem_unhandled_input_source_environ 3
#define Events_Ty_elem_unhandled_input_source_up 4
#define Events_Ty_elem_unhandled_input_source_env 5
#define Events_Ty_elem_unhandled_input_dest_actuator 0
#define Events_Ty_elem_unhandled_input_dest_controller 1
#define Events_Ty_elem_unhandled_input_dest_down 2
#define Events_Ty_elem_unhandled_input_dest_environ 3
#define Events_Ty_elem_unhandled_input_dest_up 4
#define Events_Ty_elem_unhandled_input_dest_env 5
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_down_result_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT 4
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_up_result_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_down_check_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_up_check_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_controller_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_down_NONE 0
#define Events_Ty_elem_unhandled_input_event_down_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_down_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_down_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_down_msg_in_check_PRESENT 2
#define Events_ty_elem_unhandled_input_event_down_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_down_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_down_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_down_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_down_msg_out_result_PRESENT 1
#define Events_ty_elem_unhandled_input_event_down_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_down_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_down_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_down_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_down_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_environ_NONE 0
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_environ_PRESENT 3
#define Events_ty_elem_unhandled_input_event_selection_environ_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_up_NONE 0
#define Events_Ty_elem_unhandled_input_event_up_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_up_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_up_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_up_msg_in_check_PRESENT 2
#define Events_ty_elem_unhandled_input_event_up_msg_in_selection_check_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_up_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_up_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_up_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_up_msg_out_result_PRESENT 1
#define Events_ty_elem_unhandled_input_event_up_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_up_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_up_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_up_PRESENT 4
#define Events_ty_elem_unhandled_input_event_selection_up_PRESENT 4
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_queue_elem_NONE 0
#define System_State_controller_queue_elem_no_event_PRESENT 1
#define System_state_controller_queue_elem_selection_no_event_PRESENT 1
#define System_State_controller_queue_elem_system_startup_PRESENT 2
#define System_state_controller_queue_elem_selection_system_startup_PRESENT 2
#define System_State_controller_queue_elem_input_event_source_actuator 0
#define System_State_controller_queue_elem_input_event_source_controller 1
#define System_State_controller_queue_elem_input_event_source_down 2
#define System_State_controller_queue_elem_input_event_source_environ 3
#define System_State_controller_queue_elem_input_event_source_up 4
#define System_State_controller_queue_elem_input_event_source_env 5
#define System_State_controller_queue_elem_input_event_dest_actuator 0
#define System_State_controller_queue_elem_input_event_dest_controller 1
#define System_State_controller_queue_elem_input_event_dest_down 2
#define System_State_controller_queue_elem_input_event_dest_environ 3
#define System_State_controller_queue_elem_input_event_dest_up 4
#define System_State_controller_queue_elem_input_event_dest_env 5
#define System_State_controller_queue_elem_input_event_event_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_selection_controller_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_down_NONE 0
#define System_State_controller_queue_elem_input_event_event_down_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_down_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_down_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_down_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_down_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_down_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_down_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_down_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_down_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_selection_down_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_environ_NONE 0
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_environ_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_up_NONE 0
#define System_State_controller_queue_elem_input_event_event_up_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_up_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_up_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_up_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_up_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_up_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_up_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_up_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_up_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_selection_up_PRESENT 4
#define System_State_controller_queue_elem_input_event_PRESENT 3
#define System_state_controller_queue_elem_selection_input_event_PRESENT 3
#define System_State_controller_queue_elem_output_event_source_actuator 0
#define System_State_controller_queue_elem_output_event_source_controller 1
#define System_State_controller_queue_elem_output_event_source_down 2
#define System_State_controller_queue_elem_output_event_source_environ 3
#define System_State_controller_queue_elem_output_event_source_up 4
#define System_State_controller_queue_elem_output_event_source_env 5
#define System_State_controller_queue_elem_output_event_dest_actuator 0
#define System_State_controller_queue_elem_output_event_dest_controller 1
#define System_State_controller_queue_elem_output_event_dest_down 2
#define System_State_controller_queue_elem_output_event_dest_environ 3
#define System_State_controller_queue_elem_output_event_dest_up 4
#define System_State_controller_queue_elem_output_event_dest_env 5
#define System_State_controller_queue_elem_output_event_event_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_selection_controller_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_down_NONE 0
#define System_State_controller_queue_elem_output_event_event_down_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_down_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_down_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_down_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_down_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_down_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_down_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_down_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_down_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_selection_down_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_environ_NONE 0
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_environ_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_up_NONE 0
#define System_State_controller_queue_elem_output_event_event_up_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_up_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_up_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_up_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_up_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_up_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_up_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_up_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_up_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_selection_up_PRESENT 4
#define System_State_controller_queue_elem_output_event_PRESENT 4
#define System_state_controller_queue_elem_selection_output_event_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_source_actuator 0
#define System_State_controller_queue_elem_unhandled_input_source_controller 1
#define System_State_controller_queue_elem_unhandled_input_source_down 2
#define System_State_controller_queue_elem_unhandled_input_source_environ 3
#define System_State_controller_queue_elem_unhandled_input_source_up 4
#define System_State_controller_queue_elem_unhandled_input_source_env 5
#define System_State_controller_queue_elem_unhandled_input_dest_actuator 0
#define System_State_controller_queue_elem_unhandled_input_dest_controller 1
#define System_State_controller_queue_elem_unhandled_input_dest_down 2
#define System_State_controller_queue_elem_unhandled_input_dest_environ 3
#define System_State_controller_queue_elem_unhandled_input_dest_up 4
#define System_State_controller_queue_elem_unhandled_input_dest_env 5
#define System_State_controller_queue_elem_unhandled_input_event_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_selection_controller_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_down_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_down_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_down_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_down_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_down_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_down_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_down_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_selection_down_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_environ_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_environ_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_up_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_up_msg_in_selection_check_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_up_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_up_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_up_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_up_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_up_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_selection_up_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_PRESENT 5
#define System_state_controller_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_down_queue_elem_NONE 0
#define System_State_down_queue_elem_no_event_PRESENT 1
#define System_state_down_queue_elem_selection_no_event_PRESENT 1
#define System_State_down_queue_elem_system_startup_PRESENT 2
#define System_state_down_queue_elem_selection_system_startup_PRESENT 2
#define System_State_down_queue_elem_input_event_source_actuator 0
#define System_State_down_queue_elem_input_event_source_controller 1
#define System_State_down_queue_elem_input_event_source_down 2
#define System_State_down_queue_elem_input_event_source_environ 3
#define System_State_down_queue_elem_input_event_source_up 4
#define System_State_down_queue_elem_input_event_source_env 5
#define System_State_down_queue_elem_input_event_dest_actuator 0
#define System_State_down_queue_elem_input_event_dest_controller 1
#define System_State_down_queue_elem_input_event_dest_down 2
#define System_State_down_queue_elem_input_event_dest_environ 3
#define System_State_down_queue_elem_input_event_dest_up 4
#define System_State_down_queue_elem_input_event_dest_env 5
#define System_State_down_queue_elem_input_event_event_NONE 0
#define System_State_down_queue_elem_input_event_event_controller_NONE 0
#define System_State_down_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_down_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_down_queue_elem_input_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_down_queue_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define System_state_down_queue_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_down_queue_elem_input_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_down_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_down_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_down_queue_elem_input_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_down_queue_elem_input_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_down_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_down_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_input_event_event_controller_PRESENT 1
#define System_state_down_queue_elem_input_event_event_selection_controller_PRESENT 1
#define System_State_down_queue_elem_input_event_event_down_NONE 0
#define System_State_down_queue_elem_input_event_event_down_msg_in_NONE 0
#define System_State_down_queue_elem_input_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_input_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_input_event_event_down_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_input_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_input_event_event_down_msg_in_PRESENT 1
#define System_state_down_queue_elem_input_event_event_down_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_input_event_event_down_msg_out_NONE 0
#define System_State_down_queue_elem_input_event_event_down_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_input_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_input_event_event_down_msg_out_PRESENT 2
#define System_state_down_queue_elem_input_event_event_down_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_input_event_event_down_PRESENT 2
#define System_state_down_queue_elem_input_event_event_selection_down_PRESENT 2
#define System_State_down_queue_elem_input_event_event_environ_NONE 0
#define System_State_down_queue_elem_input_event_event_environ_msg_out_NONE 0
#define System_State_down_queue_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define System_state_down_queue_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_down_queue_elem_input_event_event_environ_msg_out_PRESENT 1
#define System_state_down_queue_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_down_queue_elem_input_event_event_environ_PRESENT 3
#define System_state_down_queue_elem_input_event_event_selection_environ_PRESENT 3
#define System_State_down_queue_elem_input_event_event_up_NONE 0
#define System_State_down_queue_elem_input_event_event_up_msg_in_NONE 0
#define System_State_down_queue_elem_input_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_input_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_input_event_event_up_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_input_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_input_event_event_up_msg_in_PRESENT 1
#define System_state_down_queue_elem_input_event_event_up_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_input_event_event_up_msg_out_NONE 0
#define System_State_down_queue_elem_input_event_event_up_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_input_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_input_event_event_up_msg_out_PRESENT 2
#define System_state_down_queue_elem_input_event_event_up_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_input_event_event_up_PRESENT 4
#define System_state_down_queue_elem_input_event_event_selection_up_PRESENT 4
#define System_State_down_queue_elem_input_event_PRESENT 3
#define System_state_down_queue_elem_selection_input_event_PRESENT 3
#define System_State_down_queue_elem_output_event_source_actuator 0
#define System_State_down_queue_elem_output_event_source_controller 1
#define System_State_down_queue_elem_output_event_source_down 2
#define System_State_down_queue_elem_output_event_source_environ 3
#define System_State_down_queue_elem_output_event_source_up 4
#define System_State_down_queue_elem_output_event_source_env 5
#define System_State_down_queue_elem_output_event_dest_actuator 0
#define System_State_down_queue_elem_output_event_dest_controller 1
#define System_State_down_queue_elem_output_event_dest_down 2
#define System_State_down_queue_elem_output_event_dest_environ 3
#define System_State_down_queue_elem_output_event_dest_up 4
#define System_State_down_queue_elem_output_event_dest_env 5
#define System_State_down_queue_elem_output_event_event_NONE 0
#define System_State_down_queue_elem_output_event_event_controller_NONE 0
#define System_State_down_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_down_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_down_queue_elem_output_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_down_queue_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define System_state_down_queue_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_down_queue_elem_output_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_down_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_down_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_down_queue_elem_output_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_down_queue_elem_output_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_down_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_down_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_output_event_event_controller_PRESENT 1
#define System_state_down_queue_elem_output_event_event_selection_controller_PRESENT 1
#define System_State_down_queue_elem_output_event_event_down_NONE 0
#define System_State_down_queue_elem_output_event_event_down_msg_in_NONE 0
#define System_State_down_queue_elem_output_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_output_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_output_event_event_down_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_output_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_output_event_event_down_msg_in_PRESENT 1
#define System_state_down_queue_elem_output_event_event_down_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_output_event_event_down_msg_out_NONE 0
#define System_State_down_queue_elem_output_event_event_down_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_output_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_output_event_event_down_msg_out_PRESENT 2
#define System_state_down_queue_elem_output_event_event_down_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_output_event_event_down_PRESENT 2
#define System_state_down_queue_elem_output_event_event_selection_down_PRESENT 2
#define System_State_down_queue_elem_output_event_event_environ_NONE 0
#define System_State_down_queue_elem_output_event_event_environ_msg_out_NONE 0
#define System_State_down_queue_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define System_state_down_queue_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_down_queue_elem_output_event_event_environ_msg_out_PRESENT 1
#define System_state_down_queue_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_down_queue_elem_output_event_event_environ_PRESENT 3
#define System_state_down_queue_elem_output_event_event_selection_environ_PRESENT 3
#define System_State_down_queue_elem_output_event_event_up_NONE 0
#define System_State_down_queue_elem_output_event_event_up_msg_in_NONE 0
#define System_State_down_queue_elem_output_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_output_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_output_event_event_up_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_output_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_output_event_event_up_msg_in_PRESENT 1
#define System_state_down_queue_elem_output_event_event_up_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_output_event_event_up_msg_out_NONE 0
#define System_State_down_queue_elem_output_event_event_up_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_output_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_output_event_event_up_msg_out_PRESENT 2
#define System_state_down_queue_elem_output_event_event_up_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_output_event_event_up_PRESENT 4
#define System_state_down_queue_elem_output_event_event_selection_up_PRESENT 4
#define System_State_down_queue_elem_output_event_PRESENT 4
#define System_state_down_queue_elem_selection_output_event_PRESENT 4
#define System_State_down_queue_elem_unhandled_input_source_actuator 0
#define System_State_down_queue_elem_unhandled_input_source_controller 1
#define System_State_down_queue_elem_unhandled_input_source_down 2
#define System_State_down_queue_elem_unhandled_input_source_environ 3
#define System_State_down_queue_elem_unhandled_input_source_up 4
#define System_State_down_queue_elem_unhandled_input_source_env 5
#define System_State_down_queue_elem_unhandled_input_dest_actuator 0
#define System_State_down_queue_elem_unhandled_input_dest_controller 1
#define System_State_down_queue_elem_unhandled_input_dest_down 2
#define System_State_down_queue_elem_unhandled_input_dest_environ 3
#define System_State_down_queue_elem_unhandled_input_dest_up 4
#define System_State_down_queue_elem_unhandled_input_dest_env 5
#define System_State_down_queue_elem_unhandled_input_event_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT 4
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_controller_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_selection_controller_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_down_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_down_msg_in_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_down_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_down_msg_in_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_down_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_down_msg_out_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_down_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_down_msg_out_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_down_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_down_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_selection_down_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_environ_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_environ_msg_out_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_environ_PRESENT 3
#define System_state_down_queue_elem_unhandled_input_event_selection_environ_PRESENT 3
#define System_State_down_queue_elem_unhandled_input_event_up_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_up_msg_in_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_up_msg_in_selection_check_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_up_msg_in_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_up_selection_msg_in_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_up_msg_out_NONE 0
#define System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT 1
#define System_state_down_queue_elem_unhandled_input_event_up_msg_out_selection_result_PRESENT 1
#define System_State_down_queue_elem_unhandled_input_event_up_msg_out_PRESENT 2
#define System_state_down_queue_elem_unhandled_input_event_up_selection_msg_out_PRESENT 2
#define System_State_down_queue_elem_unhandled_input_event_up_PRESENT 4
#define System_state_down_queue_elem_unhandled_input_event_selection_up_PRESENT 4
#define System_State_down_queue_elem_unhandled_input_PRESENT 5
#define System_state_down_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_up_queue_elem_NONE 0
#define System_State_up_queue_elem_no_event_PRESENT 1
#define System_state_up_queue_elem_selection_no_event_PRESENT 1
#define System_State_up_queue_elem_system_startup_PRESENT 2
#define System_state_up_queue_elem_selection_system_startup_PRESENT 2
#define System_State_up_queue_elem_input_event_source_actuator 0
#define System_State_up_queue_elem_input_event_source_controller 1
#define System_State_up_queue_elem_input_event_source_down 2
#define System_State_up_queue_elem_input_event_source_environ 3
#define System_State_up_queue_elem_input_event_source_up 4
#define System_State_up_queue_elem_input_event_source_env 5
#define System_State_up_queue_elem_input_event_dest_actuator 0
#define System_State_up_queue_elem_input_event_dest_controller 1
#define System_State_up_queue_elem_input_event_dest_down 2
#define System_State_up_queue_elem_input_event_dest_environ 3
#define System_State_up_queue_elem_input_event_dest_up 4
#define System_State_up_queue_elem_input_event_dest_env 5
#define System_State_up_queue_elem_input_event_event_NONE 0
#define System_State_up_queue_elem_input_event_event_controller_NONE 0
#define System_State_up_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_up_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_up_queue_elem_input_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_up_queue_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define System_state_up_queue_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_up_queue_elem_input_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_up_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_up_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_up_queue_elem_input_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_up_queue_elem_input_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_up_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_up_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_input_event_event_controller_PRESENT 1
#define System_state_up_queue_elem_input_event_event_selection_controller_PRESENT 1
#define System_State_up_queue_elem_input_event_event_down_NONE 0
#define System_State_up_queue_elem_input_event_event_down_msg_in_NONE 0
#define System_State_up_queue_elem_input_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_input_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_input_event_event_down_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_input_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_input_event_event_down_msg_in_PRESENT 1
#define System_state_up_queue_elem_input_event_event_down_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_input_event_event_down_msg_out_NONE 0
#define System_State_up_queue_elem_input_event_event_down_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_input_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_input_event_event_down_msg_out_PRESENT 2
#define System_state_up_queue_elem_input_event_event_down_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_input_event_event_down_PRESENT 2
#define System_state_up_queue_elem_input_event_event_selection_down_PRESENT 2
#define System_State_up_queue_elem_input_event_event_environ_NONE 0
#define System_State_up_queue_elem_input_event_event_environ_msg_out_NONE 0
#define System_State_up_queue_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define System_state_up_queue_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_up_queue_elem_input_event_event_environ_msg_out_PRESENT 1
#define System_state_up_queue_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_up_queue_elem_input_event_event_environ_PRESENT 3
#define System_state_up_queue_elem_input_event_event_selection_environ_PRESENT 3
#define System_State_up_queue_elem_input_event_event_up_NONE 0
#define System_State_up_queue_elem_input_event_event_up_msg_in_NONE 0
#define System_State_up_queue_elem_input_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_input_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_input_event_event_up_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_input_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_input_event_event_up_msg_in_PRESENT 1
#define System_state_up_queue_elem_input_event_event_up_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_input_event_event_up_msg_out_NONE 0
#define System_State_up_queue_elem_input_event_event_up_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_input_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_input_event_event_up_msg_out_PRESENT 2
#define System_state_up_queue_elem_input_event_event_up_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_input_event_event_up_PRESENT 4
#define System_state_up_queue_elem_input_event_event_selection_up_PRESENT 4
#define System_State_up_queue_elem_input_event_PRESENT 3
#define System_state_up_queue_elem_selection_input_event_PRESENT 3
#define System_State_up_queue_elem_output_event_source_actuator 0
#define System_State_up_queue_elem_output_event_source_controller 1
#define System_State_up_queue_elem_output_event_source_down 2
#define System_State_up_queue_elem_output_event_source_environ 3
#define System_State_up_queue_elem_output_event_source_up 4
#define System_State_up_queue_elem_output_event_source_env 5
#define System_State_up_queue_elem_output_event_dest_actuator 0
#define System_State_up_queue_elem_output_event_dest_controller 1
#define System_State_up_queue_elem_output_event_dest_down 2
#define System_State_up_queue_elem_output_event_dest_environ 3
#define System_State_up_queue_elem_output_event_dest_up 4
#define System_State_up_queue_elem_output_event_dest_env 5
#define System_State_up_queue_elem_output_event_event_NONE 0
#define System_State_up_queue_elem_output_event_event_controller_NONE 0
#define System_State_up_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_up_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT 2
#define System_state_up_queue_elem_output_event_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_up_queue_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define System_state_up_queue_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT 4
#define System_state_up_queue_elem_output_event_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_up_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_up_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT 1
#define System_state_up_queue_elem_output_event_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT 2
#define System_state_up_queue_elem_output_event_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_up_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_up_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_output_event_event_controller_PRESENT 1
#define System_state_up_queue_elem_output_event_event_selection_controller_PRESENT 1
#define System_State_up_queue_elem_output_event_event_down_NONE 0
#define System_State_up_queue_elem_output_event_event_down_msg_in_NONE 0
#define System_State_up_queue_elem_output_event_event_down_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_output_event_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_output_event_event_down_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_output_event_event_down_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_output_event_event_down_msg_in_PRESENT 1
#define System_state_up_queue_elem_output_event_event_down_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_output_event_event_down_msg_out_NONE 0
#define System_State_up_queue_elem_output_event_event_down_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_output_event_event_down_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_output_event_event_down_msg_out_PRESENT 2
#define System_state_up_queue_elem_output_event_event_down_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_output_event_event_down_PRESENT 2
#define System_state_up_queue_elem_output_event_event_selection_down_PRESENT 2
#define System_State_up_queue_elem_output_event_event_environ_NONE 0
#define System_State_up_queue_elem_output_event_event_environ_msg_out_NONE 0
#define System_State_up_queue_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define System_state_up_queue_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_up_queue_elem_output_event_event_environ_msg_out_PRESENT 1
#define System_state_up_queue_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_up_queue_elem_output_event_event_environ_PRESENT 3
#define System_state_up_queue_elem_output_event_event_selection_environ_PRESENT 3
#define System_State_up_queue_elem_output_event_event_up_NONE 0
#define System_State_up_queue_elem_output_event_event_up_msg_in_NONE 0
#define System_State_up_queue_elem_output_event_event_up_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_output_event_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_output_event_event_up_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_output_event_event_up_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_output_event_event_up_msg_in_PRESENT 1
#define System_state_up_queue_elem_output_event_event_up_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_output_event_event_up_msg_out_NONE 0
#define System_State_up_queue_elem_output_event_event_up_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_output_event_event_up_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_output_event_event_up_msg_out_PRESENT 2
#define System_state_up_queue_elem_output_event_event_up_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_output_event_event_up_PRESENT 4
#define System_state_up_queue_elem_output_event_event_selection_up_PRESENT 4
#define System_State_up_queue_elem_output_event_PRESENT 4
#define System_state_up_queue_elem_selection_output_event_PRESENT 4
#define System_State_up_queue_elem_unhandled_input_source_actuator 0
#define System_State_up_queue_elem_unhandled_input_source_controller 1
#define System_State_up_queue_elem_unhandled_input_source_down 2
#define System_State_up_queue_elem_unhandled_input_source_environ 3
#define System_State_up_queue_elem_unhandled_input_source_up 4
#define System_State_up_queue_elem_unhandled_input_source_env 5
#define System_State_up_queue_elem_unhandled_input_dest_actuator 0
#define System_State_up_queue_elem_unhandled_input_dest_controller 1
#define System_State_up_queue_elem_unhandled_input_dest_down 2
#define System_State_up_queue_elem_unhandled_input_dest_environ 3
#define System_State_up_queue_elem_unhandled_input_dest_up 4
#define System_State_up_queue_elem_unhandled_input_dest_env 5
#define System_State_up_queue_elem_unhandled_input_event_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_in_selection_down_result_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT 4
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_in_selection_up_result_PRESENT 4
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_out_selection_down_check_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_controller_msg_out_selection_up_check_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_controller_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_selection_controller_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_down_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_down_msg_in_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_down_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_down_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_down_msg_in_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_down_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_down_msg_out_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_down_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_down_msg_out_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_down_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_down_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_selection_down_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_environ_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_environ_msg_out_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_environ_PRESENT 3
#define System_state_up_queue_elem_unhandled_input_event_selection_environ_PRESENT 3
#define System_State_up_queue_elem_unhandled_input_event_up_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_up_msg_in_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_up_msg_in_selection_input_none_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_up_msg_in_selection_check_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_up_msg_in_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_up_selection_msg_in_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_up_msg_out_NONE 0
#define System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT 1
#define System_state_up_queue_elem_unhandled_input_event_up_msg_out_selection_result_PRESENT 1
#define System_State_up_queue_elem_unhandled_input_event_up_msg_out_PRESENT 2
#define System_state_up_queue_elem_unhandled_input_event_up_selection_msg_out_PRESENT 2
#define System_State_up_queue_elem_unhandled_input_event_up_PRESENT 4
#define System_state_up_queue_elem_unhandled_input_event_selection_up_PRESENT 4
#define System_State_up_queue_elem_unhandled_input_PRESENT 5
#define System_state_up_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_state_waitingforup 0
#define System_State_controller_state_waitingfordown 1
#define System_State_controller_state_wait 2
#define System_State_controller_state_waitingforboth 3
#define System_State_controller_sender_actuator 0
#define System_State_controller_sender_controller 1
#define System_State_controller_sender_down 2
#define System_State_controller_sender_environ 3
#define System_State_controller_sender_up 4
#define System_State_controller_sender_env 5
#define System_State_down_state_wait 0
#define System_State_down_state_operation 1
#define System_State_down_sender_actuator 0
#define System_State_down_sender_controller 1
#define System_State_down_sender_down 2
#define System_State_down_sender_environ 3
#define System_State_down_sender_up 4
#define System_State_down_sender_env 5
#define System_State_up_state_wait 0
#define System_State_up_state_operation 1
#define System_State_up_sender_actuator 0
#define System_State_up_sender_controller 1
#define System_State_up_sender_down 2
#define System_State_up_sender_environ 3
#define System_State_up_sender_up 4
#define System_State_up_sender_env 5
typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_sender sender;
    Actuator_Context_check_param check_param;
    Actuator_Context_result_param result_param;
}

typedef AggregateTimerData_controller {
    bit dummy;
}

typedef AggregateTimerData_down {
    bit dummy;
}

typedef AggregateTimerData_dummy_entry {
    bit dummy;
}

typedef AggregateTimerData_up {
    bit dummy;
}

typedef Controller_Context {
    Controller_Context_state state;
    Controller_Context_init_done init_done;
    Controller_Context_sender sender;
    Controller_Context_test_param test_param;
    Controller_Context_up_check_param up_check_param;
    Controller_Context_down_check_param down_check_param;
    Controller_Context_up_result_param up_result_param;
    Controller_Context_down_result_param down_result_param;
    Controller_Context_up_value up_value;
    Controller_Context_down_value down_value;
    Controller_Context_error error;
    Controller_Context_reached reached;
}

typedef Controller_Event_msg_in_down_result {
    Controller_Event_msg_in_down_result_p1 p1;
}

typedef Controller_Event_msg_in_input_none {
    bit dummy;
}

typedef Controller_Event_msg_in_test {
    Controller_Event_msg_in_test_p1 p1;
}

typedef Controller_Event_msg_in_up_result {
    Controller_Event_msg_in_up_result_p1 p1;
}

typedef Controller_Event_msg_out_down_check {
    Controller_Event_msg_out_down_check_p1 p1;
}

typedef Controller_Event_msg_out_up_check {
    Controller_Event_msg_out_up_check_p1 p1;
}

typedef Down_Event_msg_in_check {
    Down_Event_msg_in_check_p1 p1;
}

typedef Down_Event_msg_in_input_none {
    bit dummy;
}

typedef Down_Event_msg_out_result {
    Down_Event_msg_out_result_p1 p1;
}

typedef Environ_Event_msg_out_test {
    Environ_Event_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_down_result {
    Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_test {
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_up_result {
    Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_down_check {
    Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_up_check {
    Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1 p1;
}

typedef Events_Ty_elem_input_event_event_down_msg_in_check {
    Events_Ty_elem_input_event_event_down_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_input_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_down_msg_out_result {
    Events_Ty_elem_input_event_event_down_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out_test {
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_input_event_event_up_msg_in_check {
    Events_Ty_elem_input_event_event_up_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_input_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_up_msg_out_result {
    Events_Ty_elem_input_event_event_up_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_down_result {
    Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_test {
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_up_result {
    Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_down_check {
    Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_up_check {
    Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1 p1;
}

typedef Events_Ty_elem_output_event_event_down_msg_in_check {
    Events_Ty_elem_output_event_event_down_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_output_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_down_msg_out_result {
    Events_Ty_elem_output_event_event_down_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out_test {
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_output_event_event_up_msg_in_check {
    Events_Ty_elem_output_event_event_up_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_output_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_up_msg_out_result {
    Events_Ty_elem_output_event_event_up_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_test {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_in_check {
    Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_out_result {
    Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out_test {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_in_check {
    Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_out_result {
    Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1 p1;
}

typedef Function_Event_controller_msg_in_down_result {
    Function_Event_controller_msg_in_down_result_p1 p1;
}

typedef Function_Event_controller_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_controller_msg_in_test {
    Function_Event_controller_msg_in_test_p1 p1;
}

typedef Function_Event_controller_msg_in_up_result {
    Function_Event_controller_msg_in_up_result_p1 p1;
}

typedef Function_Event_controller_msg_out_down_check {
    Function_Event_controller_msg_out_down_check_p1 p1;
}

typedef Function_Event_controller_msg_out_up_check {
    Function_Event_controller_msg_out_up_check_p1 p1;
}

typedef Function_Event_down_msg_in_check {
    Function_Event_down_msg_in_check_p1 p1;
}

typedef Function_Event_down_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_down_msg_out_result {
    Function_Event_down_msg_out_result_p1 p1;
}

typedef Function_Event_environ_msg_out_test {
    Function_Event_environ_msg_out_test_p1 p1;
}

typedef Function_Event_up_msg_in_check {
    Function_Event_up_msg_in_check_p1 p1;
}

typedef Function_Event_up_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_up_msg_out_result {
    Function_Event_up_msg_out_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_down_result {
    Interface_Event_event_controller_msg_in_down_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_test {
    Interface_Event_event_controller_msg_in_test_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_up_result {
    Interface_Event_event_controller_msg_in_up_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_down_check {
    Interface_Event_event_controller_msg_out_down_check_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_up_check {
    Interface_Event_event_controller_msg_out_up_check_p1 p1;
}

typedef Interface_Event_event_down_msg_in_check {
    Interface_Event_event_down_msg_in_check_p1 p1;
}

typedef Interface_Event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_down_msg_out_result {
    Interface_Event_event_down_msg_out_result_p1 p1;
}

typedef Interface_Event_event_environ_msg_out_test {
    Interface_Event_event_environ_msg_out_test_p1 p1;
}

typedef Interface_Event_event_up_msg_in_check {
    Interface_Event_event_up_msg_in_check_p1 p1;
}

typedef Interface_Event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_up_msg_out_result {
    Interface_Event_event_up_msg_out_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_down_result {
    Named_Function_Event_event_controller_msg_in_down_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_test {
    Named_Function_Event_event_controller_msg_in_test_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_up_result {
    Named_Function_Event_event_controller_msg_in_up_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_down_check {
    Named_Function_Event_event_controller_msg_out_down_check_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_up_check {
    Named_Function_Event_event_controller_msg_out_up_check_p1 p1;
}

typedef Named_Function_Event_event_down_msg_in_check {
    Named_Function_Event_event_down_msg_in_check_p1 p1;
}

typedef Named_Function_Event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_down_msg_out_result {
    Named_Function_Event_event_down_msg_out_result_p1 p1;
}

typedef Named_Function_Event_event_environ_msg_out_test {
    Named_Function_Event_event_environ_msg_out_test_p1 p1;
}

typedef Named_Function_Event_event_up_msg_in_check {
    Named_Function_Event_event_up_msg_in_check_p1 p1;
}

typedef Named_Function_Event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_up_msg_out_result {
    Named_Function_Event_event_up_msg_out_result_p1 p1;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_controller_msg_in_down_result {
    Observable_Event_input_event_event_controller_msg_in_down_result_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_test {
    Observable_Event_input_event_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_up_result {
    Observable_Event_input_event_event_controller_msg_in_up_result_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_down_check {
    Observable_Event_input_event_event_controller_msg_out_down_check_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_up_check {
    Observable_Event_input_event_event_controller_msg_out_up_check_p1 p1;
}

typedef Observable_Event_input_event_event_down_msg_in_check {
    Observable_Event_input_event_event_down_msg_in_check_p1 p1;
}

typedef Observable_Event_input_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_down_msg_out_result {
    Observable_Event_input_event_event_down_msg_out_result_p1 p1;
}

typedef Observable_Event_input_event_event_environ_msg_out_test {
    Observable_Event_input_event_event_environ_msg_out_test_p1 p1;
}

typedef Observable_Event_input_event_event_up_msg_in_check {
    Observable_Event_input_event_event_up_msg_in_check_p1 p1;
}

typedef Observable_Event_input_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_up_msg_out_result {
    Observable_Event_input_event_event_up_msg_out_result_p1 p1;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_down_result {
    Observable_Event_output_event_event_controller_msg_in_down_result_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_test {
    Observable_Event_output_event_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_up_result {
    Observable_Event_output_event_event_controller_msg_in_up_result_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_down_check {
    Observable_Event_output_event_event_controller_msg_out_down_check_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_up_check {
    Observable_Event_output_event_event_controller_msg_out_up_check_p1 p1;
}

typedef Observable_Event_output_event_event_down_msg_in_check {
    Observable_Event_output_event_event_down_msg_in_check_p1 p1;
}

typedef Observable_Event_output_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_down_msg_out_result {
    Observable_Event_output_event_event_down_msg_out_result_p1 p1;
}

typedef Observable_Event_output_event_event_environ_msg_out_test {
    Observable_Event_output_event_event_environ_msg_out_test_p1 p1;
}

typedef Observable_Event_output_event_event_up_msg_in_check {
    Observable_Event_output_event_event_up_msg_in_check_p1 p1;
}

typedef Observable_Event_output_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_up_msg_out_result {
    Observable_Event_output_event_event_up_msg_out_result_p1 p1;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_down_result {
    Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_test {
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_up_result {
    Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_down_check {
    Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_up_check {
    Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1 p1;
}

typedef Observable_Event_unhandled_input_event_down_msg_in_check {
    Observable_Event_unhandled_input_event_down_msg_in_check_p1 p1;
}

typedef Observable_Event_unhandled_input_event_down_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_down_msg_out_result {
    Observable_Event_unhandled_input_event_down_msg_out_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out_test {
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef Observable_Event_unhandled_input_event_up_msg_in_check {
    Observable_Event_unhandled_input_event_up_msg_in_check_p1 p1;
}

typedef Observable_Event_unhandled_input_event_up_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_up_msg_out_result {
    Observable_Event_unhandled_input_event_up_msg_out_result_p1 p1;
}

typedef System_State_controller {
    System_State_controller_state state;
    System_State_controller_init_done init_done;
    System_State_controller_sender sender;
    System_State_controller_test_param test_param;
    System_State_controller_up_check_param up_check_param;
    System_State_controller_down_check_param down_check_param;
    System_State_controller_up_result_param up_result_param;
    System_State_controller_down_result_param down_result_param;
    System_State_controller_up_value up_value;
    System_State_controller_down_value down_value;
    System_State_controller_error error;
    System_State_controller_reached reached;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_test {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_in_check {
    System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_out_result {
    System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out_test {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_in_check {
    System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_out_result {
    System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_no_event {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_test {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_in_check {
    System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_out_result {
    System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out_test {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_in_check {
    System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_out_result {
    System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1 p1;
}

typedef System_State_down {
    System_State_down_state state;
    System_State_down_init_done init_done;
    System_State_down_sender sender;
    System_State_down_check_param check_param;
    System_State_down_result_param result_param;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in_down_result {
    System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in_test {
    System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in_up_result {
    System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_out_down_check {
    System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_out_up_check {
    System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_in_check {
    System_State_down_queue_elem_input_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_out_result {
    System_State_down_queue_elem_input_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_environ_msg_out_test {
    System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_in_check {
    System_State_down_queue_elem_input_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_out_result {
    System_State_down_queue_elem_input_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_down_queue_elem_no_event {
    bit dummy;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in_down_result {
    System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in_test {
    System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in_up_result {
    System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_out_down_check {
    System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_out_up_check {
    System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_in_check {
    System_State_down_queue_elem_output_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_out_result {
    System_State_down_queue_elem_output_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_environ_msg_out_test {
    System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_in_check {
    System_State_down_queue_elem_output_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_out_result {
    System_State_down_queue_elem_output_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_down_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_in_check {
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_out_result {
    System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test {
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_in_check {
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1 p1;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_out_result {
    System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1 p1;
}

typedef System_State_timers_controller {
    bit dummy;
}

typedef System_State_timers_down {
    bit dummy;
}

typedef System_State_timers_dummy_entry {
    bit dummy;
}

typedef System_State_timers_up {
    bit dummy;
}

typedef System_State_up {
    System_State_up_state state;
    System_State_up_init_done init_done;
    System_State_up_sender sender;
    System_State_up_check_param check_param;
    System_State_up_result_param result_param;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in_down_result {
    System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in_test {
    System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in_up_result {
    System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_out_down_check {
    System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_out_up_check {
    System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_in_check {
    System_State_up_queue_elem_input_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_out_result {
    System_State_up_queue_elem_input_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_environ_msg_out_test {
    System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_in_check {
    System_State_up_queue_elem_input_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_out_result {
    System_State_up_queue_elem_input_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_up_queue_elem_no_event {
    bit dummy;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in_down_result {
    System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in_test {
    System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in_up_result {
    System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_out_down_check {
    System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_out_up_check {
    System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_in_check {
    System_State_up_queue_elem_output_event_event_down_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_out_result {
    System_State_up_queue_elem_output_event_event_down_msg_out_result_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_environ_msg_out_test {
    System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_in_check {
    System_State_up_queue_elem_output_event_event_up_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_out_result {
    System_State_up_queue_elem_output_event_event_up_msg_out_result_p1 p1;
}

typedef System_State_up_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_in_check {
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_out_result {
    System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test {
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_in_check {
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1 p1;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none {
    bit dummy;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_out_result {
    System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1 p1;
}

typedef T_Null_Record {
    bit dummy;
}

typedef TimerData {
    TimerData_timer_enabled timer_enabled;
    TimerData_interval interval;
}

typedef Up_Event_msg_in_check {
    Up_Event_msg_in_check_p1 p1;
}

typedef Up_Event_msg_in_input_none {
    bit dummy;
}

typedef Up_Event_msg_out_result {
    Up_Event_msg_out_result_p1 p1;
}

typedef AggregateTimerData {
    AggregateTimerData_controller controller;
    AggregateTimerData_down down;
    AggregateTimerData_up up;
    AggregateTimerData_dummy_entry dummy_entry;
}

typedef Controller_Event_msg_in_data {
    Controller_Event_msg_in_input_none input_none;
    Controller_Event_msg_in_down_result down_result;
    Controller_Event_msg_in_test test;
    Controller_Event_msg_in_up_result up_result;
}

typedef Controller_Event_msg_out_data {
    Controller_Event_msg_out_down_check down_check;
    Controller_Event_msg_out_up_check up_check;
}

typedef Down_Event_msg_in_data {
    Down_Event_msg_in_input_none input_none;
    Down_Event_msg_in_check check;
}

typedef Down_Event_msg_out_data {
    Down_Event_msg_out_result result;
}

typedef Environ_Event_msg_out_data {
    Environ_Event_msg_out_test test;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_data {
    Events_Ty_elem_input_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_controller_msg_in_down_result down_result;
    Events_Ty_elem_input_event_event_controller_msg_in_test test;
    Events_Ty_elem_input_event_event_controller_msg_in_up_result up_result;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_data {
    Events_Ty_elem_input_event_event_controller_msg_out_down_check down_check;
    Events_Ty_elem_input_event_event_controller_msg_out_up_check up_check;
}

typedef Events_Ty_elem_input_event_event_down_msg_in_data {
    Events_Ty_elem_input_event_event_down_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_down_msg_in_check check;
}

typedef Events_Ty_elem_input_event_event_down_msg_out_data {
    Events_Ty_elem_input_event_event_down_msg_out_result result;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out_data {
    Events_Ty_elem_input_event_event_environ_msg_out_test test;
}

typedef Events_Ty_elem_input_event_event_up_msg_in_data {
    Events_Ty_elem_input_event_event_up_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_up_msg_in_check check;
}

typedef Events_Ty_elem_input_event_event_up_msg_out_data {
    Events_Ty_elem_input_event_event_up_msg_out_result result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_data {
    Events_Ty_elem_output_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_controller_msg_in_down_result down_result;
    Events_Ty_elem_output_event_event_controller_msg_in_test test;
    Events_Ty_elem_output_event_event_controller_msg_in_up_result up_result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_data {
    Events_Ty_elem_output_event_event_controller_msg_out_down_check down_check;
    Events_Ty_elem_output_event_event_controller_msg_out_up_check up_check;
}

typedef Events_Ty_elem_output_event_event_down_msg_in_data {
    Events_Ty_elem_output_event_event_down_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_down_msg_in_check check;
}

typedef Events_Ty_elem_output_event_event_down_msg_out_data {
    Events_Ty_elem_output_event_event_down_msg_out_result result;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out_data {
    Events_Ty_elem_output_event_event_environ_msg_out_test test;
}

typedef Events_Ty_elem_output_event_event_up_msg_in_data {
    Events_Ty_elem_output_event_event_up_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_up_msg_in_check check;
}

typedef Events_Ty_elem_output_event_event_up_msg_out_data {
    Events_Ty_elem_output_event_event_up_msg_out_result result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result down_result;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test test;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result up_result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check down_check;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check up_check;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_in_data {
    Events_Ty_elem_unhandled_input_event_down_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_down_msg_in_check check;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_out_data {
    Events_Ty_elem_unhandled_input_event_down_msg_out_result result;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out_data {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_in_data {
    Events_Ty_elem_unhandled_input_event_up_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_up_msg_in_check check;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_out_data {
    Events_Ty_elem_unhandled_input_event_up_msg_out_result result;
}

typedef Function_Event_controller_msg_in_data {
    Function_Event_controller_msg_in_input_none input_none;
    Function_Event_controller_msg_in_down_result down_result;
    Function_Event_controller_msg_in_test test;
    Function_Event_controller_msg_in_up_result up_result;
}

typedef Function_Event_controller_msg_out_data {
    Function_Event_controller_msg_out_down_check down_check;
    Function_Event_controller_msg_out_up_check up_check;
}

typedef Function_Event_down_msg_in_data {
    Function_Event_down_msg_in_input_none input_none;
    Function_Event_down_msg_in_check check;
}

typedef Function_Event_down_msg_out_data {
    Function_Event_down_msg_out_result result;
}

typedef Function_Event_environ_msg_out_data {
    Function_Event_environ_msg_out_test test;
}

typedef Function_Event_up_msg_in_data {
    Function_Event_up_msg_in_input_none input_none;
    Function_Event_up_msg_in_check check;
}

typedef Function_Event_up_msg_out_data {
    Function_Event_up_msg_out_result result;
}

typedef Interface_Event_event_controller_msg_in_data {
    Interface_Event_event_controller_msg_in_input_none input_none;
    Interface_Event_event_controller_msg_in_down_result down_result;
    Interface_Event_event_controller_msg_in_test test;
    Interface_Event_event_controller_msg_in_up_result up_result;
}

typedef Interface_Event_event_controller_msg_out_data {
    Interface_Event_event_controller_msg_out_down_check down_check;
    Interface_Event_event_controller_msg_out_up_check up_check;
}

typedef Interface_Event_event_down_msg_in_data {
    Interface_Event_event_down_msg_in_input_none input_none;
    Interface_Event_event_down_msg_in_check check;
}

typedef Interface_Event_event_down_msg_out_data {
    Interface_Event_event_down_msg_out_result result;
}

typedef Interface_Event_event_environ_msg_out_data {
    Interface_Event_event_environ_msg_out_test test;
}

typedef Interface_Event_event_up_msg_in_data {
    Interface_Event_event_up_msg_in_input_none input_none;
    Interface_Event_event_up_msg_in_check check;
}

typedef Interface_Event_event_up_msg_out_data {
    Interface_Event_event_up_msg_out_result result;
}

typedef Named_Function_Event_event_controller_msg_in_data {
    Named_Function_Event_event_controller_msg_in_input_none input_none;
    Named_Function_Event_event_controller_msg_in_down_result down_result;
    Named_Function_Event_event_controller_msg_in_test test;
    Named_Function_Event_event_controller_msg_in_up_result up_result;
}

typedef Named_Function_Event_event_controller_msg_out_data {
    Named_Function_Event_event_controller_msg_out_down_check down_check;
    Named_Function_Event_event_controller_msg_out_up_check up_check;
}

typedef Named_Function_Event_event_down_msg_in_data {
    Named_Function_Event_event_down_msg_in_input_none input_none;
    Named_Function_Event_event_down_msg_in_check check;
}

typedef Named_Function_Event_event_down_msg_out_data {
    Named_Function_Event_event_down_msg_out_result result;
}

typedef Named_Function_Event_event_environ_msg_out_data {
    Named_Function_Event_event_environ_msg_out_test test;
}

typedef Named_Function_Event_event_up_msg_in_data {
    Named_Function_Event_event_up_msg_in_input_none input_none;
    Named_Function_Event_event_up_msg_in_check check;
}

typedef Named_Function_Event_event_up_msg_out_data {
    Named_Function_Event_event_up_msg_out_result result;
}

typedef Observable_Event_input_event_event_controller_msg_in_data {
    Observable_Event_input_event_event_controller_msg_in_input_none input_none;
    Observable_Event_input_event_event_controller_msg_in_down_result down_result;
    Observable_Event_input_event_event_controller_msg_in_test test;
    Observable_Event_input_event_event_controller_msg_in_up_result up_result;
}

typedef Observable_Event_input_event_event_controller_msg_out_data {
    Observable_Event_input_event_event_controller_msg_out_down_check down_check;
    Observable_Event_input_event_event_controller_msg_out_up_check up_check;
}

typedef Observable_Event_input_event_event_down_msg_in_data {
    Observable_Event_input_event_event_down_msg_in_input_none input_none;
    Observable_Event_input_event_event_down_msg_in_check check;
}

typedef Observable_Event_input_event_event_down_msg_out_data {
    Observable_Event_input_event_event_down_msg_out_result result;
}

typedef Observable_Event_input_event_event_environ_msg_out_data {
    Observable_Event_input_event_event_environ_msg_out_test test;
}

typedef Observable_Event_input_event_event_up_msg_in_data {
    Observable_Event_input_event_event_up_msg_in_input_none input_none;
    Observable_Event_input_event_event_up_msg_in_check check;
}

typedef Observable_Event_input_event_event_up_msg_out_data {
    Observable_Event_input_event_event_up_msg_out_result result;
}

typedef Observable_Event_output_event_event_controller_msg_in_data {
    Observable_Event_output_event_event_controller_msg_in_input_none input_none;
    Observable_Event_output_event_event_controller_msg_in_down_result down_result;
    Observable_Event_output_event_event_controller_msg_in_test test;
    Observable_Event_output_event_event_controller_msg_in_up_result up_result;
}

typedef Observable_Event_output_event_event_controller_msg_out_data {
    Observable_Event_output_event_event_controller_msg_out_down_check down_check;
    Observable_Event_output_event_event_controller_msg_out_up_check up_check;
}

typedef Observable_Event_output_event_event_down_msg_in_data {
    Observable_Event_output_event_event_down_msg_in_input_none input_none;
    Observable_Event_output_event_event_down_msg_in_check check;
}

typedef Observable_Event_output_event_event_down_msg_out_data {
    Observable_Event_output_event_event_down_msg_out_result result;
}

typedef Observable_Event_output_event_event_environ_msg_out_data {
    Observable_Event_output_event_event_environ_msg_out_test test;
}

typedef Observable_Event_output_event_event_up_msg_in_data {
    Observable_Event_output_event_event_up_msg_in_input_none input_none;
    Observable_Event_output_event_event_up_msg_in_check check;
}

typedef Observable_Event_output_event_event_up_msg_out_data {
    Observable_Event_output_event_event_up_msg_out_result result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_data {
    Observable_Event_unhandled_input_event_controller_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_controller_msg_in_down_result down_result;
    Observable_Event_unhandled_input_event_controller_msg_in_test test;
    Observable_Event_unhandled_input_event_controller_msg_in_up_result up_result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_data {
    Observable_Event_unhandled_input_event_controller_msg_out_down_check down_check;
    Observable_Event_unhandled_input_event_controller_msg_out_up_check up_check;
}

typedef Observable_Event_unhandled_input_event_down_msg_in_data {
    Observable_Event_unhandled_input_event_down_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_down_msg_in_check check;
}

typedef Observable_Event_unhandled_input_event_down_msg_out_data {
    Observable_Event_unhandled_input_event_down_msg_out_result result;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out_data {
    Observable_Event_unhandled_input_event_environ_msg_out_test test;
}

typedef Observable_Event_unhandled_input_event_up_msg_in_data {
    Observable_Event_unhandled_input_event_up_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_up_msg_in_check check;
}

typedef Observable_Event_unhandled_input_event_up_msg_out_data {
    Observable_Event_unhandled_input_event_up_msg_out_result result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result down_result;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test test;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check down_check;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_in_data {
    System_State_controller_queue_elem_input_event_event_down_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_down_msg_in_check check;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_out_data {
    System_State_controller_queue_elem_input_event_event_down_msg_out_result result;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out_data {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_in_data {
    System_State_controller_queue_elem_input_event_event_up_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_up_msg_in_check check;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_out_data {
    System_State_controller_queue_elem_input_event_event_up_msg_out_result result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result down_result;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test test;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check down_check;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_in_data {
    System_State_controller_queue_elem_output_event_event_down_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_down_msg_in_check check;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_out_data {
    System_State_controller_queue_elem_output_event_event_down_msg_out_result result;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out_data {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_in_data {
    System_State_controller_queue_elem_output_event_event_up_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_up_msg_in_check check;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_out_data {
    System_State_controller_queue_elem_output_event_event_up_msg_out_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result down_result;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test test;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result up_result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check down_check;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check up_check;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check check;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check check;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result result;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in_data {
    System_State_down_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_down_queue_elem_input_event_event_controller_msg_in_down_result down_result;
    System_State_down_queue_elem_input_event_event_controller_msg_in_test test;
    System_State_down_queue_elem_input_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_out_data {
    System_State_down_queue_elem_input_event_event_controller_msg_out_down_check down_check;
    System_State_down_queue_elem_input_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_in_data {
    System_State_down_queue_elem_input_event_event_down_msg_in_input_none input_none;
    System_State_down_queue_elem_input_event_event_down_msg_in_check check;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_out_data {
    System_State_down_queue_elem_input_event_event_down_msg_out_result result;
}

typedef System_State_down_queue_elem_input_event_event_environ_msg_out_data {
    System_State_down_queue_elem_input_event_event_environ_msg_out_test test;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_in_data {
    System_State_down_queue_elem_input_event_event_up_msg_in_input_none input_none;
    System_State_down_queue_elem_input_event_event_up_msg_in_check check;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_out_data {
    System_State_down_queue_elem_input_event_event_up_msg_out_result result;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in_data {
    System_State_down_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_down_queue_elem_output_event_event_controller_msg_in_down_result down_result;
    System_State_down_queue_elem_output_event_event_controller_msg_in_test test;
    System_State_down_queue_elem_output_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_out_data {
    System_State_down_queue_elem_output_event_event_controller_msg_out_down_check down_check;
    System_State_down_queue_elem_output_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_in_data {
    System_State_down_queue_elem_output_event_event_down_msg_in_input_none input_none;
    System_State_down_queue_elem_output_event_event_down_msg_in_check check;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_out_data {
    System_State_down_queue_elem_output_event_event_down_msg_out_result result;
}

typedef System_State_down_queue_elem_output_event_event_environ_msg_out_data {
    System_State_down_queue_elem_output_event_event_environ_msg_out_test test;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_in_data {
    System_State_down_queue_elem_output_event_event_up_msg_in_input_none input_none;
    System_State_down_queue_elem_output_event_event_up_msg_in_check check;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_out_data {
    System_State_down_queue_elem_output_event_event_up_msg_out_result result;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result down_result;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test test;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result up_result;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check down_check;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check up_check;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_in_data {
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none input_none;
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_check check;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_out_data {
    System_State_down_queue_elem_unhandled_input_event_down_msg_out_result result;
}

typedef System_State_down_queue_elem_unhandled_input_event_environ_msg_out_data {
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_in_data {
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none input_none;
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_check check;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_out_data {
    System_State_down_queue_elem_unhandled_input_event_up_msg_out_result result;
}

typedef System_State_timers {
    System_State_timers_controller controller;
    System_State_timers_down down;
    System_State_timers_up up;
    System_State_timers_dummy_entry dummy_entry;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in_data {
    System_State_up_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_up_queue_elem_input_event_event_controller_msg_in_down_result down_result;
    System_State_up_queue_elem_input_event_event_controller_msg_in_test test;
    System_State_up_queue_elem_input_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_out_data {
    System_State_up_queue_elem_input_event_event_controller_msg_out_down_check down_check;
    System_State_up_queue_elem_input_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_in_data {
    System_State_up_queue_elem_input_event_event_down_msg_in_input_none input_none;
    System_State_up_queue_elem_input_event_event_down_msg_in_check check;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_out_data {
    System_State_up_queue_elem_input_event_event_down_msg_out_result result;
}

typedef System_State_up_queue_elem_input_event_event_environ_msg_out_data {
    System_State_up_queue_elem_input_event_event_environ_msg_out_test test;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_in_data {
    System_State_up_queue_elem_input_event_event_up_msg_in_input_none input_none;
    System_State_up_queue_elem_input_event_event_up_msg_in_check check;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_out_data {
    System_State_up_queue_elem_input_event_event_up_msg_out_result result;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in_data {
    System_State_up_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_up_queue_elem_output_event_event_controller_msg_in_down_result down_result;
    System_State_up_queue_elem_output_event_event_controller_msg_in_test test;
    System_State_up_queue_elem_output_event_event_controller_msg_in_up_result up_result;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_out_data {
    System_State_up_queue_elem_output_event_event_controller_msg_out_down_check down_check;
    System_State_up_queue_elem_output_event_event_controller_msg_out_up_check up_check;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_in_data {
    System_State_up_queue_elem_output_event_event_down_msg_in_input_none input_none;
    System_State_up_queue_elem_output_event_event_down_msg_in_check check;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_out_data {
    System_State_up_queue_elem_output_event_event_down_msg_out_result result;
}

typedef System_State_up_queue_elem_output_event_event_environ_msg_out_data {
    System_State_up_queue_elem_output_event_event_environ_msg_out_test test;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_in_data {
    System_State_up_queue_elem_output_event_event_up_msg_in_input_none input_none;
    System_State_up_queue_elem_output_event_event_up_msg_in_check check;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_out_data {
    System_State_up_queue_elem_output_event_event_up_msg_out_result result;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result down_result;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test test;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result up_result;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check down_check;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check up_check;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_in_data {
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none input_none;
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_check check;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_out_data {
    System_State_up_queue_elem_unhandled_input_event_down_msg_out_result result;
}

typedef System_State_up_queue_elem_unhandled_input_event_environ_msg_out_data {
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_in_data {
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none input_none;
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_check check;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_out_data {
    System_State_up_queue_elem_unhandled_input_event_up_msg_out_result result;
}

typedef Up_Event_msg_in_data {
    Up_Event_msg_in_input_none input_none;
    Up_Event_msg_in_check check;
}

typedef Up_Event_msg_out_data {
    Up_Event_msg_out_result result;
}

typedef Controller_Event_msg_in {
    Controller_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out {
    Controller_Event_msg_out_data data;
    int selection;
}

typedef Down_Event_msg_in {
    Down_Event_msg_in_data data;
    int selection;
}

typedef Down_Event_msg_out {
    Down_Event_msg_out_data data;
    int selection;
}

typedef Environ_Event_msg_out {
    Environ_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in {
    Events_Ty_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out {
    Events_Ty_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_down_msg_in {
    Events_Ty_elem_input_event_event_down_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_down_msg_out {
    Events_Ty_elem_input_event_event_down_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out {
    Events_Ty_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_up_msg_in {
    Events_Ty_elem_input_event_event_up_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_up_msg_out {
    Events_Ty_elem_input_event_event_up_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in {
    Events_Ty_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out {
    Events_Ty_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_down_msg_in {
    Events_Ty_elem_output_event_event_down_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_down_msg_out {
    Events_Ty_elem_output_event_event_down_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out {
    Events_Ty_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_up_msg_in {
    Events_Ty_elem_output_event_event_up_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_up_msg_out {
    Events_Ty_elem_output_event_event_up_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_in {
    Events_Ty_elem_unhandled_input_event_down_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_down_msg_out {
    Events_Ty_elem_unhandled_input_event_down_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_in {
    Events_Ty_elem_unhandled_input_event_up_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_up_msg_out {
    Events_Ty_elem_unhandled_input_event_up_msg_out_data data;
    int selection;
}

typedef Function_Event_controller_msg_in {
    Function_Event_controller_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out {
    Function_Event_controller_msg_out_data data;
    int selection;
}

typedef Function_Event_down_msg_in {
    Function_Event_down_msg_in_data data;
    int selection;
}

typedef Function_Event_down_msg_out {
    Function_Event_down_msg_out_data data;
    int selection;
}

typedef Function_Event_environ_msg_out {
    Function_Event_environ_msg_out_data data;
    int selection;
}

typedef Function_Event_up_msg_in {
    Function_Event_up_msg_in_data data;
    int selection;
}

typedef Function_Event_up_msg_out {
    Function_Event_up_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_in {
    Interface_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out {
    Interface_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_down_msg_in {
    Interface_Event_event_down_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_down_msg_out {
    Interface_Event_event_down_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_environ_msg_out {
    Interface_Event_event_environ_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_up_msg_in {
    Interface_Event_event_up_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_up_msg_out {
    Interface_Event_event_up_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_in {
    Named_Function_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out {
    Named_Function_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_down_msg_in {
    Named_Function_Event_event_down_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_down_msg_out {
    Named_Function_Event_event_down_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_environ_msg_out {
    Named_Function_Event_event_environ_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_up_msg_in {
    Named_Function_Event_event_up_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_up_msg_out {
    Named_Function_Event_event_up_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_in {
    Observable_Event_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out {
    Observable_Event_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_down_msg_in {
    Observable_Event_input_event_event_down_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_down_msg_out {
    Observable_Event_input_event_event_down_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_environ_msg_out {
    Observable_Event_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_up_msg_in {
    Observable_Event_input_event_event_up_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_up_msg_out {
    Observable_Event_input_event_event_up_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_in {
    Observable_Event_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out {
    Observable_Event_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_down_msg_in {
    Observable_Event_output_event_event_down_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_down_msg_out {
    Observable_Event_output_event_event_down_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_environ_msg_out {
    Observable_Event_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_up_msg_in {
    Observable_Event_output_event_event_up_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_up_msg_out {
    Observable_Event_output_event_event_up_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in {
    Observable_Event_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out {
    Observable_Event_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_down_msg_in {
    Observable_Event_unhandled_input_event_down_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_down_msg_out {
    Observable_Event_unhandled_input_event_down_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out {
    Observable_Event_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_up_msg_in {
    Observable_Event_unhandled_input_event_up_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_up_msg_out {
    Observable_Event_unhandled_input_event_up_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_in {
    System_State_controller_queue_elem_input_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_down_msg_out {
    System_State_controller_queue_elem_input_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_in {
    System_State_controller_queue_elem_input_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_up_msg_out {
    System_State_controller_queue_elem_input_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_in {
    System_State_controller_queue_elem_output_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_down_msg_out {
    System_State_controller_queue_elem_output_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_in {
    System_State_controller_queue_elem_output_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_up_msg_out {
    System_State_controller_queue_elem_output_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_in {
    System_State_down_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_controller_msg_out {
    System_State_down_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_in {
    System_State_down_queue_elem_input_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_down_msg_out {
    System_State_down_queue_elem_input_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_environ_msg_out {
    System_State_down_queue_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_in {
    System_State_down_queue_elem_input_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_up_msg_out {
    System_State_down_queue_elem_input_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_in {
    System_State_down_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_controller_msg_out {
    System_State_down_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_in {
    System_State_down_queue_elem_output_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_down_msg_out {
    System_State_down_queue_elem_output_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_environ_msg_out {
    System_State_down_queue_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_in {
    System_State_down_queue_elem_output_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_up_msg_out {
    System_State_down_queue_elem_output_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_in {
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_msg_out {
    System_State_down_queue_elem_unhandled_input_event_down_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_environ_msg_out {
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_in {
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_msg_out {
    System_State_down_queue_elem_unhandled_input_event_up_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_in {
    System_State_up_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_controller_msg_out {
    System_State_up_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_in {
    System_State_up_queue_elem_input_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_down_msg_out {
    System_State_up_queue_elem_input_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_environ_msg_out {
    System_State_up_queue_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_in {
    System_State_up_queue_elem_input_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_up_msg_out {
    System_State_up_queue_elem_input_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_in {
    System_State_up_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_controller_msg_out {
    System_State_up_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_in {
    System_State_up_queue_elem_output_event_event_down_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_down_msg_out {
    System_State_up_queue_elem_output_event_event_down_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_environ_msg_out {
    System_State_up_queue_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_in {
    System_State_up_queue_elem_output_event_event_up_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_up_msg_out {
    System_State_up_queue_elem_output_event_event_up_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_in {
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_msg_out {
    System_State_up_queue_elem_unhandled_input_event_down_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_environ_msg_out {
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_in {
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_msg_out {
    System_State_up_queue_elem_unhandled_input_event_up_msg_out_data data;
    int selection;
}

typedef Up_Event_msg_in {
    Up_Event_msg_in_data data;
    int selection;
}

typedef Up_Event_msg_out {
    Up_Event_msg_out_data data;
    int selection;
}

typedef Controller_Event_data {
    Controller_Event_msg_in msg_in;
    Controller_Event_msg_out msg_out;
}

typedef Down_Event_data {
    Down_Event_msg_in msg_in;
    Down_Event_msg_out msg_out;
}

typedef Environ_Event_data {
    Environ_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_controller_data {
    Events_Ty_elem_input_event_event_controller_msg_in msg_in;
    Events_Ty_elem_input_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_down_data {
    Events_Ty_elem_input_event_event_down_msg_in msg_in;
    Events_Ty_elem_input_event_event_down_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_environ_data {
    Events_Ty_elem_input_event_event_environ_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_up_data {
    Events_Ty_elem_input_event_event_up_msg_in msg_in;
    Events_Ty_elem_input_event_event_up_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_controller_data {
    Events_Ty_elem_output_event_event_controller_msg_in msg_in;
    Events_Ty_elem_output_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_down_data {
    Events_Ty_elem_output_event_event_down_msg_in msg_in;
    Events_Ty_elem_output_event_event_down_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_environ_data {
    Events_Ty_elem_output_event_event_environ_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_up_data {
    Events_Ty_elem_output_event_event_up_msg_in msg_in;
    Events_Ty_elem_output_event_event_up_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_controller_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_down_data {
    Events_Ty_elem_unhandled_input_event_down_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_down_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_environ_data {
    Events_Ty_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_up_data {
    Events_Ty_elem_unhandled_input_event_up_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_up_msg_out msg_out;
}

typedef Function_Event_controller_data {
    Function_Event_controller_msg_in msg_in;
    Function_Event_controller_msg_out msg_out;
}

typedef Function_Event_down_data {
    Function_Event_down_msg_in msg_in;
    Function_Event_down_msg_out msg_out;
}

typedef Function_Event_environ_data {
    Function_Event_environ_msg_out msg_out;
}

typedef Function_Event_up_data {
    Function_Event_up_msg_in msg_in;
    Function_Event_up_msg_out msg_out;
}

typedef Interface_Event_event_controller_data {
    Interface_Event_event_controller_msg_in msg_in;
    Interface_Event_event_controller_msg_out msg_out;
}

typedef Interface_Event_event_down_data {
    Interface_Event_event_down_msg_in msg_in;
    Interface_Event_event_down_msg_out msg_out;
}

typedef Interface_Event_event_environ_data {
    Interface_Event_event_environ_msg_out msg_out;
}

typedef Interface_Event_event_up_data {
    Interface_Event_event_up_msg_in msg_in;
    Interface_Event_event_up_msg_out msg_out;
}

typedef Named_Function_Event_event_controller_data {
    Named_Function_Event_event_controller_msg_in msg_in;
    Named_Function_Event_event_controller_msg_out msg_out;
}

typedef Named_Function_Event_event_down_data {
    Named_Function_Event_event_down_msg_in msg_in;
    Named_Function_Event_event_down_msg_out msg_out;
}

typedef Named_Function_Event_event_environ_data {
    Named_Function_Event_event_environ_msg_out msg_out;
}

typedef Named_Function_Event_event_up_data {
    Named_Function_Event_event_up_msg_in msg_in;
    Named_Function_Event_event_up_msg_out msg_out;
}

typedef Observable_Event_input_event_event_controller_data {
    Observable_Event_input_event_event_controller_msg_in msg_in;
    Observable_Event_input_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_input_event_event_down_data {
    Observable_Event_input_event_event_down_msg_in msg_in;
    Observable_Event_input_event_event_down_msg_out msg_out;
}

typedef Observable_Event_input_event_event_environ_data {
    Observable_Event_input_event_event_environ_msg_out msg_out;
}

typedef Observable_Event_input_event_event_up_data {
    Observable_Event_input_event_event_up_msg_in msg_in;
    Observable_Event_input_event_event_up_msg_out msg_out;
}

typedef Observable_Event_output_event_event_controller_data {
    Observable_Event_output_event_event_controller_msg_in msg_in;
    Observable_Event_output_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_output_event_event_down_data {
    Observable_Event_output_event_event_down_msg_in msg_in;
    Observable_Event_output_event_event_down_msg_out msg_out;
}

typedef Observable_Event_output_event_event_environ_data {
    Observable_Event_output_event_event_environ_msg_out msg_out;
}

typedef Observable_Event_output_event_event_up_data {
    Observable_Event_output_event_event_up_msg_in msg_in;
    Observable_Event_output_event_event_up_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_controller_data {
    Observable_Event_unhandled_input_event_controller_msg_in msg_in;
    Observable_Event_unhandled_input_event_controller_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_down_data {
    Observable_Event_unhandled_input_event_down_msg_in msg_in;
    Observable_Event_unhandled_input_event_down_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_environ_data {
    Observable_Event_unhandled_input_event_environ_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_up_data {
    Observable_Event_unhandled_input_event_up_msg_in msg_in;
    Observable_Event_unhandled_input_event_up_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_controller_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_down_data {
    System_State_controller_queue_elem_input_event_event_down_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_down_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_environ_data {
    System_State_controller_queue_elem_input_event_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_up_data {
    System_State_controller_queue_elem_input_event_event_up_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_up_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_controller_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_down_data {
    System_State_controller_queue_elem_output_event_event_down_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_down_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_environ_data {
    System_State_controller_queue_elem_output_event_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_up_data {
    System_State_controller_queue_elem_output_event_event_up_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_up_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down_data {
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_data {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up_data {
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out msg_out;
}

typedef System_State_down_queue_elem_input_event_event_controller_data {
    System_State_down_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_down_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_down_queue_elem_input_event_event_down_data {
    System_State_down_queue_elem_input_event_event_down_msg_in msg_in;
    System_State_down_queue_elem_input_event_event_down_msg_out msg_out;
}

typedef System_State_down_queue_elem_input_event_event_environ_data {
    System_State_down_queue_elem_input_event_event_environ_msg_out msg_out;
}

typedef System_State_down_queue_elem_input_event_event_up_data {
    System_State_down_queue_elem_input_event_event_up_msg_in msg_in;
    System_State_down_queue_elem_input_event_event_up_msg_out msg_out;
}

typedef System_State_down_queue_elem_output_event_event_controller_data {
    System_State_down_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_down_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_down_queue_elem_output_event_event_down_data {
    System_State_down_queue_elem_output_event_event_down_msg_in msg_in;
    System_State_down_queue_elem_output_event_event_down_msg_out msg_out;
}

typedef System_State_down_queue_elem_output_event_event_environ_data {
    System_State_down_queue_elem_output_event_event_environ_msg_out msg_out;
}

typedef System_State_down_queue_elem_output_event_event_up_data {
    System_State_down_queue_elem_output_event_event_up_msg_in msg_in;
    System_State_down_queue_elem_output_event_event_up_msg_out msg_out;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller_data {
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_down_queue_elem_unhandled_input_event_down_data {
    System_State_down_queue_elem_unhandled_input_event_down_msg_in msg_in;
    System_State_down_queue_elem_unhandled_input_event_down_msg_out msg_out;
}

typedef System_State_down_queue_elem_unhandled_input_event_environ_data {
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef System_State_down_queue_elem_unhandled_input_event_up_data {
    System_State_down_queue_elem_unhandled_input_event_up_msg_in msg_in;
    System_State_down_queue_elem_unhandled_input_event_up_msg_out msg_out;
}

typedef System_State_up_queue_elem_input_event_event_controller_data {
    System_State_up_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_up_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_up_queue_elem_input_event_event_down_data {
    System_State_up_queue_elem_input_event_event_down_msg_in msg_in;
    System_State_up_queue_elem_input_event_event_down_msg_out msg_out;
}

typedef System_State_up_queue_elem_input_event_event_environ_data {
    System_State_up_queue_elem_input_event_event_environ_msg_out msg_out;
}

typedef System_State_up_queue_elem_input_event_event_up_data {
    System_State_up_queue_elem_input_event_event_up_msg_in msg_in;
    System_State_up_queue_elem_input_event_event_up_msg_out msg_out;
}

typedef System_State_up_queue_elem_output_event_event_controller_data {
    System_State_up_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_up_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_up_queue_elem_output_event_event_down_data {
    System_State_up_queue_elem_output_event_event_down_msg_in msg_in;
    System_State_up_queue_elem_output_event_event_down_msg_out msg_out;
}

typedef System_State_up_queue_elem_output_event_event_environ_data {
    System_State_up_queue_elem_output_event_event_environ_msg_out msg_out;
}

typedef System_State_up_queue_elem_output_event_event_up_data {
    System_State_up_queue_elem_output_event_event_up_msg_in msg_in;
    System_State_up_queue_elem_output_event_event_up_msg_out msg_out;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller_data {
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_up_queue_elem_unhandled_input_event_down_data {
    System_State_up_queue_elem_unhandled_input_event_down_msg_in msg_in;
    System_State_up_queue_elem_unhandled_input_event_down_msg_out msg_out;
}

typedef System_State_up_queue_elem_unhandled_input_event_environ_data {
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef System_State_up_queue_elem_unhandled_input_event_up_data {
    System_State_up_queue_elem_unhandled_input_event_up_msg_in msg_in;
    System_State_up_queue_elem_unhandled_input_event_up_msg_out msg_out;
}

typedef Up_Event_data {
    Up_Event_msg_in msg_in;
    Up_Event_msg_out msg_out;
}

typedef Controller_Event {
    Controller_Event_data data;
    int selection;
}

typedef Down_Event {
    Down_Event_data data;
    int selection;
}

typedef Environ_Event {
    Environ_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller {
    Events_Ty_elem_input_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_down {
    Events_Ty_elem_input_event_event_down_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_environ {
    Events_Ty_elem_input_event_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_up {
    Events_Ty_elem_input_event_event_up_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller {
    Events_Ty_elem_output_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_down {
    Events_Ty_elem_output_event_event_down_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_environ {
    Events_Ty_elem_output_event_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_up {
    Events_Ty_elem_output_event_event_up_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller {
    Events_Ty_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_down {
    Events_Ty_elem_unhandled_input_event_down_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_environ {
    Events_Ty_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_up {
    Events_Ty_elem_unhandled_input_event_up_data data;
    int selection;
}

typedef Function_Event_controller {
    Function_Event_controller_data data;
    int selection;
}

typedef Function_Event_down {
    Function_Event_down_data data;
    int selection;
}

typedef Function_Event_environ {
    Function_Event_environ_data data;
    int selection;
}

typedef Function_Event_up {
    Function_Event_up_data data;
    int selection;
}

typedef Interface_Event_event_controller {
    Interface_Event_event_controller_data data;
    int selection;
}

typedef Interface_Event_event_down {
    Interface_Event_event_down_data data;
    int selection;
}

typedef Interface_Event_event_environ {
    Interface_Event_event_environ_data data;
    int selection;
}

typedef Interface_Event_event_up {
    Interface_Event_event_up_data data;
    int selection;
}

typedef Named_Function_Event_event_controller {
    Named_Function_Event_event_controller_data data;
    int selection;
}

typedef Named_Function_Event_event_down {
    Named_Function_Event_event_down_data data;
    int selection;
}

typedef Named_Function_Event_event_environ {
    Named_Function_Event_event_environ_data data;
    int selection;
}

typedef Named_Function_Event_event_up {
    Named_Function_Event_event_up_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller {
    Observable_Event_input_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_input_event_event_down {
    Observable_Event_input_event_event_down_data data;
    int selection;
}

typedef Observable_Event_input_event_event_environ {
    Observable_Event_input_event_event_environ_data data;
    int selection;
}

typedef Observable_Event_input_event_event_up {
    Observable_Event_input_event_event_up_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller {
    Observable_Event_output_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_output_event_event_down {
    Observable_Event_output_event_event_down_data data;
    int selection;
}

typedef Observable_Event_output_event_event_environ {
    Observable_Event_output_event_event_environ_data data;
    int selection;
}

typedef Observable_Event_output_event_event_up {
    Observable_Event_output_event_event_up_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller {
    Observable_Event_unhandled_input_event_controller_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_down {
    Observable_Event_unhandled_input_event_down_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_environ {
    Observable_Event_unhandled_input_event_environ_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_up {
    Observable_Event_unhandled_input_event_up_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller {
    System_State_controller_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_down {
    System_State_controller_queue_elem_input_event_event_down_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_environ {
    System_State_controller_queue_elem_input_event_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_up {
    System_State_controller_queue_elem_input_event_event_up_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller {
    System_State_controller_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_down {
    System_State_controller_queue_elem_output_event_event_down_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_environ {
    System_State_controller_queue_elem_output_event_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_up {
    System_State_controller_queue_elem_output_event_event_up_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller {
    System_State_controller_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_down {
    System_State_controller_queue_elem_unhandled_input_event_down_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ {
    System_State_controller_queue_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_up {
    System_State_controller_queue_elem_unhandled_input_event_up_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_controller {
    System_State_down_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_down {
    System_State_down_queue_elem_input_event_event_down_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_environ {
    System_State_down_queue_elem_input_event_event_environ_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event_up {
    System_State_down_queue_elem_input_event_event_up_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_controller {
    System_State_down_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_down {
    System_State_down_queue_elem_output_event_event_down_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_environ {
    System_State_down_queue_elem_output_event_event_environ_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event_up {
    System_State_down_queue_elem_output_event_event_up_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_controller {
    System_State_down_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_down {
    System_State_down_queue_elem_unhandled_input_event_down_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_environ {
    System_State_down_queue_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event_up {
    System_State_down_queue_elem_unhandled_input_event_up_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_controller {
    System_State_up_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_down {
    System_State_up_queue_elem_input_event_event_down_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_environ {
    System_State_up_queue_elem_input_event_event_environ_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event_up {
    System_State_up_queue_elem_input_event_event_up_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_controller {
    System_State_up_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_down {
    System_State_up_queue_elem_output_event_event_down_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_environ {
    System_State_up_queue_elem_output_event_event_environ_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event_up {
    System_State_up_queue_elem_output_event_event_up_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_controller {
    System_State_up_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_down {
    System_State_up_queue_elem_unhandled_input_event_down_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_environ {
    System_State_up_queue_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event_up {
    System_State_up_queue_elem_unhandled_input_event_up_data data;
    int selection;
}

typedef Up_Event {
    Up_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_controller controller;
    Events_Ty_elem_input_event_event_down down;
    Events_Ty_elem_input_event_event_environ environ;
    Events_Ty_elem_input_event_event_up up;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_controller controller;
    Events_Ty_elem_output_event_event_down down;
    Events_Ty_elem_output_event_event_environ environ;
    Events_Ty_elem_output_event_event_up up;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_controller controller;
    Events_Ty_elem_unhandled_input_event_down down;
    Events_Ty_elem_unhandled_input_event_environ environ;
    Events_Ty_elem_unhandled_input_event_up up;
}

typedef Function_Event_data {
    Function_Event_controller controller;
    Function_Event_down down;
    Function_Event_environ environ;
    Function_Event_up up;
}

typedef Interface_Event_event_data {
    Interface_Event_event_controller controller;
    Interface_Event_event_down down;
    Interface_Event_event_environ environ;
    Interface_Event_event_up up;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_controller controller;
    Named_Function_Event_event_down down;
    Named_Function_Event_event_environ environ;
    Named_Function_Event_event_up up;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_controller controller;
    Observable_Event_input_event_event_down down;
    Observable_Event_input_event_event_environ environ;
    Observable_Event_input_event_event_up up;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_controller controller;
    Observable_Event_output_event_event_down down;
    Observable_Event_output_event_event_environ environ;
    Observable_Event_output_event_event_up up;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_controller controller;
    Observable_Event_unhandled_input_event_down down;
    Observable_Event_unhandled_input_event_environ environ;
    Observable_Event_unhandled_input_event_up up;
}

typedef System_State_controller_queue_elem_input_event_event_data {
    System_State_controller_queue_elem_input_event_event_controller controller;
    System_State_controller_queue_elem_input_event_event_down down;
    System_State_controller_queue_elem_input_event_event_environ environ;
    System_State_controller_queue_elem_input_event_event_up up;
}

typedef System_State_controller_queue_elem_output_event_event_data {
    System_State_controller_queue_elem_output_event_event_controller controller;
    System_State_controller_queue_elem_output_event_event_down down;
    System_State_controller_queue_elem_output_event_event_environ environ;
    System_State_controller_queue_elem_output_event_event_up up;
}

typedef System_State_controller_queue_elem_unhandled_input_event_data {
    System_State_controller_queue_elem_unhandled_input_event_controller controller;
    System_State_controller_queue_elem_unhandled_input_event_down down;
    System_State_controller_queue_elem_unhandled_input_event_environ environ;
    System_State_controller_queue_elem_unhandled_input_event_up up;
}

typedef System_State_down_queue_elem_input_event_event_data {
    System_State_down_queue_elem_input_event_event_controller controller;
    System_State_down_queue_elem_input_event_event_down down;
    System_State_down_queue_elem_input_event_event_environ environ;
    System_State_down_queue_elem_input_event_event_up up;
}

typedef System_State_down_queue_elem_output_event_event_data {
    System_State_down_queue_elem_output_event_event_controller controller;
    System_State_down_queue_elem_output_event_event_down down;
    System_State_down_queue_elem_output_event_event_environ environ;
    System_State_down_queue_elem_output_event_event_up up;
}

typedef System_State_down_queue_elem_unhandled_input_event_data {
    System_State_down_queue_elem_unhandled_input_event_controller controller;
    System_State_down_queue_elem_unhandled_input_event_down down;
    System_State_down_queue_elem_unhandled_input_event_environ environ;
    System_State_down_queue_elem_unhandled_input_event_up up;
}

typedef System_State_up_queue_elem_input_event_event_data {
    System_State_up_queue_elem_input_event_event_controller controller;
    System_State_up_queue_elem_input_event_event_down down;
    System_State_up_queue_elem_input_event_event_environ environ;
    System_State_up_queue_elem_input_event_event_up up;
}

typedef System_State_up_queue_elem_output_event_event_data {
    System_State_up_queue_elem_output_event_event_controller controller;
    System_State_up_queue_elem_output_event_event_down down;
    System_State_up_queue_elem_output_event_event_environ environ;
    System_State_up_queue_elem_output_event_event_up up;
}

typedef System_State_up_queue_elem_unhandled_input_event_data {
    System_State_up_queue_elem_unhandled_input_event_controller controller;
    System_State_up_queue_elem_unhandled_input_event_down down;
    System_State_up_queue_elem_unhandled_input_event_environ environ;
    System_State_up_queue_elem_unhandled_input_event_up up;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event {
    System_State_controller_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event {
    System_State_controller_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event {
    System_State_controller_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_down_queue_elem_input_event_event {
    System_State_down_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_down_queue_elem_output_event_event {
    System_State_down_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_down_queue_elem_unhandled_input_event {
    System_State_down_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_up_queue_elem_input_event_event {
    System_State_up_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_up_queue_elem_output_event_event {
    System_State_up_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_up_queue_elem_unhandled_input_event {
    System_State_up_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_controller_queue_elem_input_event {
    System_State_controller_queue_elem_input_event_source source;
    System_State_controller_queue_elem_input_event_dest dest;
    System_State_controller_queue_elem_input_event_event event;
}

typedef System_State_controller_queue_elem_output_event {
    System_State_controller_queue_elem_output_event_source source;
    System_State_controller_queue_elem_output_event_dest dest;
    System_State_controller_queue_elem_output_event_event event;
}

typedef System_State_controller_queue_elem_unhandled_input {
    System_State_controller_queue_elem_unhandled_input_source source;
    System_State_controller_queue_elem_unhandled_input_dest dest;
    System_State_controller_queue_elem_unhandled_input_event event;
}

typedef System_State_down_queue_elem_input_event {
    System_State_down_queue_elem_input_event_source source;
    System_State_down_queue_elem_input_event_dest dest;
    System_State_down_queue_elem_input_event_event event;
}

typedef System_State_down_queue_elem_output_event {
    System_State_down_queue_elem_output_event_source source;
    System_State_down_queue_elem_output_event_dest dest;
    System_State_down_queue_elem_output_event_event event;
}

typedef System_State_down_queue_elem_unhandled_input {
    System_State_down_queue_elem_unhandled_input_source source;
    System_State_down_queue_elem_unhandled_input_dest dest;
    System_State_down_queue_elem_unhandled_input_event event;
}

typedef System_State_up_queue_elem_input_event {
    System_State_up_queue_elem_input_event_source source;
    System_State_up_queue_elem_input_event_dest dest;
    System_State_up_queue_elem_input_event_event event;
}

typedef System_State_up_queue_elem_output_event {
    System_State_up_queue_elem_output_event_source source;
    System_State_up_queue_elem_output_event_dest dest;
    System_State_up_queue_elem_output_event_event event;
}

typedef System_State_up_queue_elem_unhandled_input {
    System_State_up_queue_elem_unhandled_input_source source;
    System_State_up_queue_elem_unhandled_input_dest dest;
    System_State_up_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_controller_queue_elem_data {
    System_State_controller_queue_elem_no_event no_event;
    System_State_controller_queue_elem_system_startup system_startup;
    System_State_controller_queue_elem_input_event input_event;
    System_State_controller_queue_elem_output_event output_event;
    System_State_controller_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_down_queue_elem_data {
    System_State_down_queue_elem_no_event no_event;
    System_State_down_queue_elem_system_startup system_startup;
    System_State_down_queue_elem_input_event input_event;
    System_State_down_queue_elem_output_event output_event;
    System_State_down_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_up_queue_elem_data {
    System_State_up_queue_elem_no_event no_event;
    System_State_up_queue_elem_system_startup system_startup;
    System_State_up_queue_elem_input_event input_event;
    System_State_up_queue_elem_output_event output_event;
    System_State_up_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_controller_queue_elem {
    System_State_controller_queue_elem_data data;
    int selection;
}

typedef System_State_down_queue_elem {
    System_State_down_queue_elem_data data;
    int selection;
}

typedef System_State_up_queue_elem {
    System_State_up_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_controller_queue {
    System_State_controller_queue_elem data[2];
    int length;
}

typedef System_State_down_queue {
    System_State_down_queue_elem data[2];
    int length;
}

typedef System_State_up_queue {
    System_State_up_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_timers timers;
    System_State_controller_queue controller_queue;
    System_State_down_queue down_queue;
    System_State_up_queue up_queue;
    System_State_controller controller;
    System_State_down down;
    System_State_up up;
}

Observable_Event nothing;
inline Controller_States_assign_value(dst, src)
{
    dst = src;
    Controller_States_range_check(dst);
}
inline Controller_States_range_check(Controller_States_vc)
{
    assert(((((Controller_States_vc == Controller_States_waitingforup) || (Controller_States_vc == Controller_States_waitingfordown)) || (Controller_States_vc == Controller_States_wait)) || (Controller_States_vc == Controller_States_waitingforboth)));
}
inline Controller_Context_state_assign_value(dst, src)
{
    dst = src;
    Controller_Context_state_range_check(dst);
}
inline Controller_Context_state_range_check(Controller_Context_state_vc)
{
    assert(((((Controller_Context_state_vc == Controller_Context_state_waitingforup) || (Controller_Context_state_vc == Controller_Context_state_waitingfordown)) || (Controller_Context_state_vc == Controller_Context_state_wait)) || (Controller_Context_state_vc == Controller_Context_state_waitingforboth)));
}
inline Controller_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Controller_Context_init_done_range_check(dst);
}
inline Controller_Context_init_done_range_check(Controller_Context_init_done_vc)
{
    assert(true);
}
inline Controller_Context_sender_assign_value(dst, src)
{
    dst = src;
    Controller_Context_sender_range_check(dst);
}
inline Controller_Context_sender_range_check(Controller_Context_sender_vc)
{
    assert(((((((Controller_Context_sender_vc == Controller_Context_sender_actuator) || (Controller_Context_sender_vc == Controller_Context_sender_controller)) || (Controller_Context_sender_vc == Controller_Context_sender_down)) || (Controller_Context_sender_vc == Controller_Context_sender_environ)) || (Controller_Context_sender_vc == Controller_Context_sender_up)) || (Controller_Context_sender_vc == Controller_Context_sender_env)));
}
inline Controller_Context_test_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_test_param_range_check(dst);
}
inline Controller_Context_test_param_range_check(Controller_Context_test_param_vc)
{
    assert(((Controller_Context_test_param_vc >= 1) && (Controller_Context_test_param_vc <= 4)));
}
inline Controller_Context_up_check_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_up_check_param_range_check(dst);
}
inline Controller_Context_up_check_param_range_check(Controller_Context_up_check_param_vc)
{
    assert(((Controller_Context_up_check_param_vc >= 0) && (Controller_Context_up_check_param_vc <= 100)));
}
inline Controller_Context_down_check_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_down_check_param_range_check(dst);
}
inline Controller_Context_down_check_param_range_check(Controller_Context_down_check_param_vc)
{
    assert(((Controller_Context_down_check_param_vc >= 0) && (Controller_Context_down_check_param_vc <= 100)));
}
inline Controller_Context_up_result_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_up_result_param_range_check(dst);
}
inline Controller_Context_up_result_param_range_check(Controller_Context_up_result_param_vc)
{
    assert(((Controller_Context_up_result_param_vc >= 0) && (Controller_Context_up_result_param_vc <= 10000)));
}
inline Controller_Context_down_result_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_down_result_param_range_check(dst);
}
inline Controller_Context_down_result_param_range_check(Controller_Context_down_result_param_vc)
{
    assert(((Controller_Context_down_result_param_vc >= 0) && (Controller_Context_down_result_param_vc <= 10000)));
}
inline Controller_Context_up_value_assign_value(dst, src)
{
    dst = src;
    Controller_Context_up_value_range_check(dst);
}
inline Controller_Context_up_value_range_check(Controller_Context_up_value_vc)
{
    assert(((Controller_Context_up_value_vc >= 0) && (Controller_Context_up_value_vc <= 10000)));
}
inline Controller_Context_down_value_assign_value(dst, src)
{
    dst = src;
    Controller_Context_down_value_range_check(dst);
}
inline Controller_Context_down_value_range_check(Controller_Context_down_value_vc)
{
    assert(((Controller_Context_down_value_vc >= 0) && (Controller_Context_down_value_vc <= 10000)));
}
inline Controller_Context_error_assign_value(dst, src)
{
    dst = src;
    Controller_Context_error_range_check(dst);
}
inline Controller_Context_error_range_check(Controller_Context_error_vc)
{
    assert(((Controller_Context_error_vc >= 0) && (Controller_Context_error_vc <= 100)));
}
inline Controller_Context_reached_assign_value(dst, src)
{
    dst = src;
    Controller_Context_reached_range_check(dst);
}
inline Controller_Context_reached_range_check(Controller_Context_reached_vc)
{
    assert(((Controller_Context_reached_vc >= 0) && (Controller_Context_reached_vc <= 100)));
}
inline Controller_Context_assign_value(dst, src)
{
    Controller_Context_state_assign_value(dst.state, src.state);
    Controller_Context_init_done_assign_value(dst.init_done, src.init_done);
    Controller_Context_sender_assign_value(dst.sender, src.sender);
    Controller_Context_test_param_assign_value(dst.test_param, src.test_param);
    Controller_Context_up_check_param_assign_value(dst.up_check_param, src.up_check_param);
    Controller_Context_down_check_param_assign_value(dst.down_check_param, src.down_check_param);
    Controller_Context_up_result_param_assign_value(dst.up_result_param, src.up_result_param);
    Controller_Context_down_result_param_assign_value(dst.down_result_param, src.down_result_param);
    Controller_Context_up_value_assign_value(dst.up_value, src.up_value);
    Controller_Context_down_value_assign_value(dst.down_value, src.down_value);
    Controller_Context_error_assign_value(dst.error, src.error);
    Controller_Context_reached_assign_value(dst.reached, src.reached);
}
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert(((Actuator_States_vc == Actuator_States_wait) || (Actuator_States_vc == Actuator_States_operation)));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert(((Actuator_Context_state_vc == Actuator_Context_state_wait) || (Actuator_Context_state_vc == Actuator_Context_state_operation)));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_sender_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_sender_range_check(dst);
}
inline Actuator_Context_sender_range_check(Actuator_Context_sender_vc)
{
    assert(((((((Actuator_Context_sender_vc == Actuator_Context_sender_actuator) || (Actuator_Context_sender_vc == Actuator_Context_sender_controller)) || (Actuator_Context_sender_vc == Actuator_Context_sender_down)) || (Actuator_Context_sender_vc == Actuator_Context_sender_environ)) || (Actuator_Context_sender_vc == Actuator_Context_sender_up)) || (Actuator_Context_sender_vc == Actuator_Context_sender_env)));
}
inline Actuator_Context_check_param_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_check_param_range_check(dst);
}
inline Actuator_Context_check_param_range_check(Actuator_Context_check_param_vc)
{
    assert(((Actuator_Context_check_param_vc >= 0) && (Actuator_Context_check_param_vc <= 100)));
}
inline Actuator_Context_result_param_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_result_param_range_check(dst);
}
inline Actuator_Context_result_param_range_check(Actuator_Context_result_param_vc)
{
    assert(((Actuator_Context_result_param_vc >= 0) && (Actuator_Context_result_param_vc <= 10000)));
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_sender_assign_value(dst.sender, src.sender);
    Actuator_Context_check_param_assign_value(dst.check_param, src.check_param);
    Actuator_Context_result_param_assign_value(dst.result_param, src.result_param);
}
inline MyInteger_assign_value(dst, src)
{
    dst = src;
    MyInteger_range_check(dst);
}
inline MyInteger_range_check(MyInteger_vc)
{
    assert(((MyInteger_vc >= 0) && (MyInteger_vc <= 100)));
}
inline MyResultInteger_assign_value(dst, src)
{
    dst = src;
    MyResultInteger_range_check(dst);
}
inline MyResultInteger_range_check(MyResultInteger_vc)
{
    assert(((MyResultInteger_vc >= 0) && (MyResultInteger_vc <= 10000)));
}
inline MyTestInteger_assign_value(dst, src)
{
    dst = src;
    MyTestInteger_range_check(dst);
}
inline MyTestInteger_range_check(MyTestInteger_vc)
{
    assert(((MyTestInteger_vc >= 1) && (MyTestInteger_vc <= 4)));
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline PID_Range_assign_value(dst, src)
{
    dst = src;
    PID_Range_range_check(dst);
}
inline PID_Range_range_check(PID_Range_vc)
{
    assert(((PID_Range_vc >= 0) && (PID_Range_vc <= 5)));
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert(((((((PID_vc == PID_actuator) || (PID_vc == PID_controller)) || (PID_vc == PID_down)) || (PID_vc == PID_environ)) || (PID_vc == PID_up)) || (PID_vc == PID_env)));
}
inline Environ_test_p1_assign_value(dst, src)
{
    dst = src;
    Environ_test_p1_range_check(dst);
}
inline Environ_test_p1_range_check(Environ_test_p1_vc)
{
    assert(((Environ_test_p1_vc >= 1) && (Environ_test_p1_vc <= 4)));
}
inline Controller_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_down_result_p1_range_check(dst);
}
inline Controller_Event_msg_in_down_result_p1_range_check(Controller_Event_msg_in_down_result_p1_vc)
{
    assert(((Controller_Event_msg_in_down_result_p1_vc >= 0) && (Controller_Event_msg_in_down_result_p1_vc <= 10000)));
}
inline Controller_Event_msg_in_down_result_assign_value(dst, src)
{
    Controller_Event_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_test_p1_range_check(dst);
}
inline Controller_Event_msg_in_test_p1_range_check(Controller_Event_msg_in_test_p1_vc)
{
    assert(((Controller_Event_msg_in_test_p1_vc >= 1) && (Controller_Event_msg_in_test_p1_vc <= 4)));
}
inline Controller_Event_msg_in_test_assign_value(dst, src)
{
    Controller_Event_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_up_result_p1_range_check(dst);
}
inline Controller_Event_msg_in_up_result_p1_range_check(Controller_Event_msg_in_up_result_p1_vc)
{
    assert(((Controller_Event_msg_in_up_result_p1_vc >= 0) && (Controller_Event_msg_in_up_result_p1_vc <= 10000)));
}
inline Controller_Event_msg_in_up_result_assign_value(dst, src)
{
    Controller_Event_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_input_none_PRESENT);
        Controller_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Controller_Event_msg_in_down_result_PRESENT);
        Controller_Event_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Controller_Event_msg_in_test_PRESENT);
        Controller_Event_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Controller_Event_msg_in_up_result_PRESENT);
        Controller_Event_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_down_check_p1_range_check(dst);
}
inline Controller_Event_msg_out_down_check_p1_range_check(Controller_Event_msg_out_down_check_p1_vc)
{
    assert(((Controller_Event_msg_out_down_check_p1_vc >= 0) && (Controller_Event_msg_out_down_check_p1_vc <= 100)));
}
inline Controller_Event_msg_out_down_check_assign_value(dst, src)
{
    Controller_Event_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_up_check_p1_range_check(dst);
}
inline Controller_Event_msg_out_up_check_p1_range_check(Controller_Event_msg_out_up_check_p1_vc)
{
    assert(((Controller_Event_msg_out_up_check_p1_vc >= 0) && (Controller_Event_msg_out_up_check_p1_vc <= 100)));
}
inline Controller_Event_msg_out_up_check_assign_value(dst, src)
{
    Controller_Event_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_down_check_PRESENT);
        Controller_Event_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Controller_Event_msg_out_up_check_PRESENT);
        Controller_Event_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_PRESENT);
        Controller_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Controller_Event_msg_out_PRESENT);
        Controller_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Controller_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Down_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Down_Event_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Down_Event_msg_in_check_p1_range_check(dst);
}
inline Down_Event_msg_in_check_p1_range_check(Down_Event_msg_in_check_p1_vc)
{
    assert(((Down_Event_msg_in_check_p1_vc >= 0) && (Down_Event_msg_in_check_p1_vc <= 100)));
}
inline Down_Event_msg_in_check_assign_value(dst, src)
{
    Down_Event_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Down_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Down_Event_msg_in_input_none_PRESENT);
        Down_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Down_Event_msg_in_check_PRESENT);
        Down_Event_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Down_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Down_Event_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Down_Event_msg_out_result_p1_range_check(dst);
}
inline Down_Event_msg_out_result_p1_range_check(Down_Event_msg_out_result_p1_vc)
{
    assert(((Down_Event_msg_out_result_p1_vc >= 0) && (Down_Event_msg_out_result_p1_vc <= 10000)));
}
inline Down_Event_msg_out_result_assign_value(dst, src)
{
    Down_Event_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Down_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Down_Event_msg_out_result_PRESENT);
        Down_Event_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Down_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Down_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Down_Event_msg_in_PRESENT);
        Down_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Down_Event_msg_out_PRESENT);
        Down_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Down_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Environ_Event_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Environ_Event_msg_out_test_p1_range_check(dst);
}
inline Environ_Event_msg_out_test_p1_range_check(Environ_Event_msg_out_test_p1_vc)
{
    assert(((Environ_Event_msg_out_test_p1_vc >= 1) && (Environ_Event_msg_out_test_p1_vc <= 4)));
}
inline Environ_Event_msg_out_test_assign_value(dst, src)
{
    Environ_Event_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Environ_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Environ_Event_msg_out_test_PRESENT);
        Environ_Event_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Environ_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Environ_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Environ_Event_msg_out_PRESENT);
        Environ_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Environ_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Up_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Up_Event_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Up_Event_msg_in_check_p1_range_check(dst);
}
inline Up_Event_msg_in_check_p1_range_check(Up_Event_msg_in_check_p1_vc)
{
    assert(((Up_Event_msg_in_check_p1_vc >= 0) && (Up_Event_msg_in_check_p1_vc <= 100)));
}
inline Up_Event_msg_in_check_assign_value(dst, src)
{
    Up_Event_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Up_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Up_Event_msg_in_input_none_PRESENT);
        Up_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Up_Event_msg_in_check_PRESENT);
        Up_Event_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Up_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Up_Event_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Up_Event_msg_out_result_p1_range_check(dst);
}
inline Up_Event_msg_out_result_p1_range_check(Up_Event_msg_out_result_p1_vc)
{
    assert(((Up_Event_msg_out_result_p1_vc >= 0) && (Up_Event_msg_out_result_p1_vc <= 10000)));
}
inline Up_Event_msg_out_result_assign_value(dst, src)
{
    Up_Event_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Up_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Up_Event_msg_out_result_PRESENT);
        Up_Event_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Up_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Up_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Up_Event_msg_in_PRESENT);
        Up_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Up_Event_msg_out_PRESENT);
        Up_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Up_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_down_result_p1_range_check(Function_Event_controller_msg_in_down_result_p1_vc)
{
    assert(((Function_Event_controller_msg_in_down_result_p1_vc >= 0) && (Function_Event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_in_down_result_assign_value(dst, src)
{
    Function_Event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_test_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_test_p1_range_check(Function_Event_controller_msg_in_test_p1_vc)
{
    assert(((Function_Event_controller_msg_in_test_p1_vc >= 1) && (Function_Event_controller_msg_in_test_p1_vc <= 4)));
}
inline Function_Event_controller_msg_in_test_assign_value(dst, src)
{
    Function_Event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_up_result_p1_range_check(Function_Event_controller_msg_in_up_result_p1_vc)
{
    assert(((Function_Event_controller_msg_in_up_result_p1_vc >= 0) && (Function_Event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_in_up_result_assign_value(dst, src)
{
    Function_Event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_input_none_PRESENT);
        Function_Event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_controller_msg_in_down_result_PRESENT);
        Function_Event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Function_Event_controller_msg_in_test_PRESENT);
        Function_Event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Function_Event_controller_msg_in_up_result_PRESENT);
        Function_Event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_down_check_p1_range_check(Function_Event_controller_msg_out_down_check_p1_vc)
{
    assert(((Function_Event_controller_msg_out_down_check_p1_vc >= 0) && (Function_Event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Function_Event_controller_msg_out_down_check_assign_value(dst, src)
{
    Function_Event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_up_check_p1_range_check(Function_Event_controller_msg_out_up_check_p1_vc)
{
    assert(((Function_Event_controller_msg_out_up_check_p1_vc >= 0) && (Function_Event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Function_Event_controller_msg_out_up_check_assign_value(dst, src)
{
    Function_Event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_down_check_PRESENT);
        Function_Event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Function_Event_controller_msg_out_up_check_PRESENT);
        Function_Event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_PRESENT);
        Function_Event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_controller_msg_out_PRESENT);
        Function_Event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_down_msg_in_check_p1_range_check(dst);
}
inline Function_Event_down_msg_in_check_p1_range_check(Function_Event_down_msg_in_check_p1_vc)
{
    assert(((Function_Event_down_msg_in_check_p1_vc >= 0) && (Function_Event_down_msg_in_check_p1_vc <= 100)));
}
inline Function_Event_down_msg_in_check_assign_value(dst, src)
{
    Function_Event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_down_msg_in_input_none_PRESENT);
        Function_Event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_down_msg_in_check_PRESENT);
        Function_Event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Function_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_down_msg_out_result_p1_range_check(dst);
}
inline Function_Event_down_msg_out_result_p1_range_check(Function_Event_down_msg_out_result_p1_vc)
{
    assert(((Function_Event_down_msg_out_result_p1_vc >= 0) && (Function_Event_down_msg_out_result_p1_vc <= 10000)));
}
inline Function_Event_down_msg_out_result_assign_value(dst, src)
{
    Function_Event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_down_msg_out_result_PRESENT);
        Function_Event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_down_msg_in_PRESENT);
        Function_Event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_down_msg_out_PRESENT);
        Function_Event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_environ_msg_out_test_p1_range_check(dst);
}
inline Function_Event_environ_msg_out_test_p1_range_check(Function_Event_environ_msg_out_test_p1_vc)
{
    assert(((Function_Event_environ_msg_out_test_p1_vc >= 1) && (Function_Event_environ_msg_out_test_p1_vc <= 4)));
}
inline Function_Event_environ_msg_out_test_assign_value(dst, src)
{
    Function_Event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_environ_msg_out_test_PRESENT);
        Function_Event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Function_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_environ_msg_out_PRESENT);
        Function_Event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_up_msg_in_check_p1_range_check(dst);
}
inline Function_Event_up_msg_in_check_p1_range_check(Function_Event_up_msg_in_check_p1_vc)
{
    assert(((Function_Event_up_msg_in_check_p1_vc >= 0) && (Function_Event_up_msg_in_check_p1_vc <= 100)));
}
inline Function_Event_up_msg_in_check_assign_value(dst, src)
{
    Function_Event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_up_msg_in_input_none_PRESENT);
        Function_Event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_up_msg_in_check_PRESENT);
        Function_Event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Function_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_up_msg_out_result_p1_range_check(dst);
}
inline Function_Event_up_msg_out_result_p1_range_check(Function_Event_up_msg_out_result_p1_vc)
{
    assert(((Function_Event_up_msg_out_result_p1_vc >= 0) && (Function_Event_up_msg_out_result_p1_vc <= 10000)));
}
inline Function_Event_up_msg_out_result_assign_value(dst, src)
{
    Function_Event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_up_msg_out_result_PRESENT);
        Function_Event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_up_msg_in_PRESENT);
        Function_Event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_up_msg_out_PRESENT);
        Function_Event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_PRESENT);
        Function_Event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Function_Event_down_PRESENT);
        Function_Event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Function_Event_environ_PRESENT);
        Function_Event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Function_Event_up_PRESENT);
        Function_Event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i;
    for(i : 0 .. (src.length - 1))
    {
        dst.data[i] = src.data[i];
    }
    for(i : src.length .. 79)
    {
        dst.data[i] = 0;
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_down_result_p1_range_check(Named_Function_Event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_down_result_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_test_p1_range_check(Named_Function_Event_event_controller_msg_in_test_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_test_p1_vc >= 1) && (Named_Function_Event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Named_Function_Event_event_controller_msg_in_test_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_up_result_p1_range_check(Named_Function_Event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_up_result_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_input_none_PRESENT);
        Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_down_result_PRESENT);
        Named_Function_Event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_test_PRESENT);
        Named_Function_Event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_up_result_PRESENT);
        Named_Function_Event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_down_check_p1_range_check(Named_Function_Event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_down_check_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Named_Function_Event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_up_check_p1_range_check(Named_Function_Event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_up_check_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Named_Function_Event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_down_check_PRESENT);
        Named_Function_Event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_up_check_PRESENT);
        Named_Function_Event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_PRESENT);
        Named_Function_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_PRESENT);
        Named_Function_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_down_msg_in_check_p1_range_check(dst);
}
inline Named_Function_Event_event_down_msg_in_check_p1_range_check(Named_Function_Event_event_down_msg_in_check_p1_vc)
{
    assert(((Named_Function_Event_event_down_msg_in_check_p1_vc >= 0) && (Named_Function_Event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Named_Function_Event_event_down_msg_in_check_assign_value(dst, src)
{
    Named_Function_Event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_down_msg_in_input_none_PRESENT);
        Named_Function_Event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_down_msg_in_check_PRESENT);
        Named_Function_Event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_down_msg_out_result_p1_range_check(dst);
}
inline Named_Function_Event_event_down_msg_out_result_p1_range_check(Named_Function_Event_event_down_msg_out_result_p1_vc)
{
    assert(((Named_Function_Event_event_down_msg_out_result_p1_vc >= 0) && (Named_Function_Event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Named_Function_Event_event_down_msg_out_result_assign_value(dst, src)
{
    Named_Function_Event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_down_msg_out_result_PRESENT);
        Named_Function_Event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_down_msg_in_PRESENT);
        Named_Function_Event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_down_msg_out_PRESENT);
        Named_Function_Event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Named_Function_Event_event_environ_msg_out_test_p1_range_check(Named_Function_Event_event_environ_msg_out_test_p1_vc)
{
    assert(((Named_Function_Event_event_environ_msg_out_test_p1_vc >= 1) && (Named_Function_Event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Named_Function_Event_event_environ_msg_out_test_assign_value(dst, src)
{
    Named_Function_Event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_environ_msg_out_test_PRESENT);
        Named_Function_Event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_environ_msg_out_PRESENT);
        Named_Function_Event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_up_msg_in_check_p1_range_check(dst);
}
inline Named_Function_Event_event_up_msg_in_check_p1_range_check(Named_Function_Event_event_up_msg_in_check_p1_vc)
{
    assert(((Named_Function_Event_event_up_msg_in_check_p1_vc >= 0) && (Named_Function_Event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Named_Function_Event_event_up_msg_in_check_assign_value(dst, src)
{
    Named_Function_Event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_up_msg_in_input_none_PRESENT);
        Named_Function_Event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_up_msg_in_check_PRESENT);
        Named_Function_Event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_up_msg_out_result_p1_range_check(dst);
}
inline Named_Function_Event_event_up_msg_out_result_p1_range_check(Named_Function_Event_event_up_msg_out_result_p1_vc)
{
    assert(((Named_Function_Event_event_up_msg_out_result_p1_vc >= 0) && (Named_Function_Event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Named_Function_Event_event_up_msg_out_result_assign_value(dst, src)
{
    Named_Function_Event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_up_msg_out_result_PRESENT);
        Named_Function_Event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_up_msg_in_PRESENT);
        Named_Function_Event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_up_msg_out_PRESENT);
        Named_Function_Event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_PRESENT);
        Named_Function_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Named_Function_Event_event_down_PRESENT);
        Named_Function_Event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Named_Function_Event_event_environ_PRESENT);
        Named_Function_Event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Named_Function_Event_event_up_PRESENT);
        Named_Function_Event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert(((((((Interface_Event_source_vc == Interface_Event_source_actuator) || (Interface_Event_source_vc == Interface_Event_source_controller)) || (Interface_Event_source_vc == Interface_Event_source_down)) || (Interface_Event_source_vc == Interface_Event_source_environ)) || (Interface_Event_source_vc == Interface_Event_source_up)) || (Interface_Event_source_vc == Interface_Event_source_env)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert(((((((Interface_Event_dest_vc == Interface_Event_dest_actuator) || (Interface_Event_dest_vc == Interface_Event_dest_controller)) || (Interface_Event_dest_vc == Interface_Event_dest_down)) || (Interface_Event_dest_vc == Interface_Event_dest_environ)) || (Interface_Event_dest_vc == Interface_Event_dest_up)) || (Interface_Event_dest_vc == Interface_Event_dest_env)));
}
inline Interface_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_down_result_p1_range_check(Interface_Event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_down_result_p1_vc >= 0) && (Interface_Event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_test_p1_range_check(Interface_Event_event_controller_msg_in_test_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_test_p1_vc >= 1) && (Interface_Event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Interface_Event_event_controller_msg_in_test_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_up_result_p1_range_check(Interface_Event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_up_result_p1_vc >= 0) && (Interface_Event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_input_none_PRESENT);
        Interface_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_down_result_PRESENT);
        Interface_Event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_test_PRESENT);
        Interface_Event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_up_result_PRESENT);
        Interface_Event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_down_check_p1_range_check(Interface_Event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_down_check_p1_vc >= 0) && (Interface_Event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Interface_Event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_up_check_p1_range_check(Interface_Event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_up_check_p1_vc >= 0) && (Interface_Event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Interface_Event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_down_check_PRESENT);
        Interface_Event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_up_check_PRESENT);
        Interface_Event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_PRESENT);
        Interface_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_PRESENT);
        Interface_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_down_msg_in_check_p1_range_check(dst);
}
inline Interface_Event_event_down_msg_in_check_p1_range_check(Interface_Event_event_down_msg_in_check_p1_vc)
{
    assert(((Interface_Event_event_down_msg_in_check_p1_vc >= 0) && (Interface_Event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Interface_Event_event_down_msg_in_check_assign_value(dst, src)
{
    Interface_Event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_down_msg_in_input_none_PRESENT);
        Interface_Event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_down_msg_in_check_PRESENT);
        Interface_Event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_down_msg_out_result_p1_range_check(dst);
}
inline Interface_Event_event_down_msg_out_result_p1_range_check(Interface_Event_event_down_msg_out_result_p1_vc)
{
    assert(((Interface_Event_event_down_msg_out_result_p1_vc >= 0) && (Interface_Event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Interface_Event_event_down_msg_out_result_assign_value(dst, src)
{
    Interface_Event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_down_msg_out_result_PRESENT);
        Interface_Event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_down_msg_in_PRESENT);
        Interface_Event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_down_msg_out_PRESENT);
        Interface_Event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Interface_Event_event_environ_msg_out_test_p1_range_check(Interface_Event_event_environ_msg_out_test_p1_vc)
{
    assert(((Interface_Event_event_environ_msg_out_test_p1_vc >= 1) && (Interface_Event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Interface_Event_event_environ_msg_out_test_assign_value(dst, src)
{
    Interface_Event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_environ_msg_out_test_PRESENT);
        Interface_Event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_environ_msg_out_PRESENT);
        Interface_Event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_up_msg_in_check_p1_range_check(dst);
}
inline Interface_Event_event_up_msg_in_check_p1_range_check(Interface_Event_event_up_msg_in_check_p1_vc)
{
    assert(((Interface_Event_event_up_msg_in_check_p1_vc >= 0) && (Interface_Event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Interface_Event_event_up_msg_in_check_assign_value(dst, src)
{
    Interface_Event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_up_msg_in_input_none_PRESENT);
        Interface_Event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_up_msg_in_check_PRESENT);
        Interface_Event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_up_msg_out_result_p1_range_check(dst);
}
inline Interface_Event_event_up_msg_out_result_p1_range_check(Interface_Event_event_up_msg_out_result_p1_vc)
{
    assert(((Interface_Event_event_up_msg_out_result_p1_vc >= 0) && (Interface_Event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Interface_Event_event_up_msg_out_result_assign_value(dst, src)
{
    Interface_Event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_up_msg_out_result_PRESENT);
        Interface_Event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_up_msg_in_PRESENT);
        Interface_Event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_up_msg_out_PRESENT);
        Interface_Event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_PRESENT);
        Interface_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Interface_Event_event_down_PRESENT);
        Interface_Event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Interface_Event_event_environ_PRESENT);
        Interface_Event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Interface_Event_event_up_PRESENT);
        Interface_Event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert(((((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_controller)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_down)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_environ)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_up)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert(((((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_controller)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_down)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_environ)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_up)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env)));
}
inline Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_down_result_p1_range_check(Observable_Event_input_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_down_result_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_test_p1_range_check(Observable_Event_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_test_p1_vc >= 1) && (Observable_Event_input_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Observable_Event_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_up_result_p1_range_check(Observable_Event_input_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_up_result_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_down_result_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_test_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_up_result_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_down_check_p1_range_check(Observable_Event_input_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_down_check_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Observable_Event_input_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_up_check_p1_range_check(Observable_Event_input_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_up_check_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Observable_Event_input_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_down_check_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_up_check_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_down_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_input_event_event_down_msg_in_check_p1_range_check(Observable_Event_input_event_event_down_msg_in_check_p1_vc)
{
    assert(((Observable_Event_input_event_event_down_msg_in_check_p1_vc >= 0) && (Observable_Event_input_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_input_event_event_down_msg_in_check_assign_value(dst, src)
{
    Observable_Event_input_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_down_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_down_msg_in_check_PRESENT);
        Observable_Event_input_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_down_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_down_msg_out_result_p1_range_check(Observable_Event_input_event_event_down_msg_out_result_p1_vc)
{
    assert(((Observable_Event_input_event_event_down_msg_out_result_p1_vc >= 0) && (Observable_Event_input_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_down_msg_out_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_down_msg_out_result_PRESENT);
        Observable_Event_input_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_down_msg_in_PRESENT);
        Observable_Event_input_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_down_msg_out_PRESENT);
        Observable_Event_input_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_input_event_event_environ_msg_out_test_p1_range_check(Observable_Event_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_input_event_event_environ_msg_out_test_p1_vc >= 1) && (Observable_Event_input_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Observable_Event_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_environ_msg_out_test_PRESENT);
        Observable_Event_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_environ_msg_out_PRESENT);
        Observable_Event_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_up_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_input_event_event_up_msg_in_check_p1_range_check(Observable_Event_input_event_event_up_msg_in_check_p1_vc)
{
    assert(((Observable_Event_input_event_event_up_msg_in_check_p1_vc >= 0) && (Observable_Event_input_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_input_event_event_up_msg_in_check_assign_value(dst, src)
{
    Observable_Event_input_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_up_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_up_msg_in_check_PRESENT);
        Observable_Event_input_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_up_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_up_msg_out_result_p1_range_check(Observable_Event_input_event_event_up_msg_out_result_p1_vc)
{
    assert(((Observable_Event_input_event_event_up_msg_out_result_p1_vc >= 0) && (Observable_Event_input_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_up_msg_out_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_up_msg_out_result_PRESENT);
        Observable_Event_input_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_up_msg_in_PRESENT);
        Observable_Event_input_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_up_msg_out_PRESENT);
        Observable_Event_input_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_PRESENT);
        Observable_Event_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_input_event_event_down_PRESENT);
        Observable_Event_input_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Observable_Event_input_event_event_environ_PRESENT);
        Observable_Event_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Observable_Event_input_event_event_up_PRESENT);
        Observable_Event_input_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert(((((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_controller)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_down)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_environ)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_up)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert(((((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_controller)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_down)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_environ)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_up)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env)));
}
inline Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_down_result_p1_range_check(Observable_Event_output_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_down_result_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_test_p1_range_check(Observable_Event_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_test_p1_vc >= 1) && (Observable_Event_output_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Observable_Event_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_up_result_p1_range_check(Observable_Event_output_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_up_result_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_down_result_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_test_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_up_result_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_down_check_p1_range_check(Observable_Event_output_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_down_check_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Observable_Event_output_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_up_check_p1_range_check(Observable_Event_output_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_up_check_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Observable_Event_output_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_down_check_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_up_check_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_down_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_output_event_event_down_msg_in_check_p1_range_check(Observable_Event_output_event_event_down_msg_in_check_p1_vc)
{
    assert(((Observable_Event_output_event_event_down_msg_in_check_p1_vc >= 0) && (Observable_Event_output_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_output_event_event_down_msg_in_check_assign_value(dst, src)
{
    Observable_Event_output_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_down_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_down_msg_in_check_PRESENT);
        Observable_Event_output_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_down_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_down_msg_out_result_p1_range_check(Observable_Event_output_event_event_down_msg_out_result_p1_vc)
{
    assert(((Observable_Event_output_event_event_down_msg_out_result_p1_vc >= 0) && (Observable_Event_output_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_down_msg_out_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_down_msg_out_result_PRESENT);
        Observable_Event_output_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_down_msg_in_PRESENT);
        Observable_Event_output_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_down_msg_out_PRESENT);
        Observable_Event_output_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_output_event_event_environ_msg_out_test_p1_range_check(Observable_Event_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_output_event_event_environ_msg_out_test_p1_vc >= 1) && (Observable_Event_output_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Observable_Event_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_environ_msg_out_test_PRESENT);
        Observable_Event_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_environ_msg_out_PRESENT);
        Observable_Event_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_up_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_output_event_event_up_msg_in_check_p1_range_check(Observable_Event_output_event_event_up_msg_in_check_p1_vc)
{
    assert(((Observable_Event_output_event_event_up_msg_in_check_p1_vc >= 0) && (Observable_Event_output_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_output_event_event_up_msg_in_check_assign_value(dst, src)
{
    Observable_Event_output_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_up_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_up_msg_in_check_PRESENT);
        Observable_Event_output_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_up_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_up_msg_out_result_p1_range_check(Observable_Event_output_event_event_up_msg_out_result_p1_vc)
{
    assert(((Observable_Event_output_event_event_up_msg_out_result_p1_vc >= 0) && (Observable_Event_output_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_up_msg_out_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_up_msg_out_result_PRESENT);
        Observable_Event_output_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_up_msg_in_PRESENT);
        Observable_Event_output_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_up_msg_out_PRESENT);
        Observable_Event_output_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_PRESENT);
        Observable_Event_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_output_event_event_down_PRESENT);
        Observable_Event_output_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Observable_Event_output_event_event_environ_PRESENT);
        Observable_Event_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Observable_Event_output_event_event_up_PRESENT);
        Observable_Event_output_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert(((((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_controller)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_down)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_environ)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_up)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert(((((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_controller)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_down)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_environ)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_up)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc >= 1) && (Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_down_result_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_test_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_up_result_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_down_check_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_up_check_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_down_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_down_msg_in_check_p1_range_check(Observable_Event_unhandled_input_event_down_msg_in_check_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_down_msg_in_check_p1_vc >= 0) && (Observable_Event_unhandled_input_event_down_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_unhandled_input_event_down_msg_in_check_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_msg_in_check_PRESENT);
        Observable_Event_unhandled_input_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_down_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_down_msg_out_result_p1_range_check(Observable_Event_unhandled_input_event_down_msg_out_result_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_down_msg_out_result_p1_vc >= 0) && (Observable_Event_unhandled_input_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_down_msg_out_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_msg_out_result_PRESENT);
        Observable_Event_unhandled_input_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_p1_range_check(Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc >= 1) && (Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_msg_out_test_PRESENT);
        Observable_Event_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_up_msg_in_check_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_up_msg_in_check_p1_range_check(Observable_Event_unhandled_input_event_up_msg_in_check_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_up_msg_in_check_p1_vc >= 0) && (Observable_Event_unhandled_input_event_up_msg_in_check_p1_vc <= 100)));
}
inline Observable_Event_unhandled_input_event_up_msg_in_check_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_msg_in_check_PRESENT);
        Observable_Event_unhandled_input_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_up_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_up_msg_out_result_p1_range_check(Observable_Event_unhandled_input_event_up_msg_out_result_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_up_msg_out_result_p1_vc >= 0) && (Observable_Event_unhandled_input_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_up_msg_out_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_msg_out_result_PRESENT);
        Observable_Event_unhandled_input_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_PRESENT);
        Observable_Event_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_unhandled_input_event_down_PRESENT);
        Observable_Event_unhandled_input_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_PRESENT);
        Observable_Event_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Observable_Event_unhandled_input_event_up_PRESENT);
        Observable_Event_unhandled_input_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert(((((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_controller)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_down)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_environ)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_up)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert(((((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_controller)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_down)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_environ)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_up)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc >= 1) && (Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_down_result_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_up_result_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_down_check_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_up_check_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_down_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_down_msg_in_check_p1_range_check(Events_Ty_elem_input_event_event_down_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_down_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_input_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_input_event_event_down_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_msg_in_check_PRESENT);
        Events_Ty_elem_input_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_down_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_down_msg_out_result_p1_range_check(Events_Ty_elem_input_event_event_down_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_down_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_input_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_down_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_msg_out_result_PRESENT);
        Events_Ty_elem_input_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc >= 1) && (Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_up_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_up_msg_in_check_p1_range_check(Events_Ty_elem_input_event_event_up_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_up_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_input_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_input_event_event_up_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_msg_in_check_PRESENT);
        Events_Ty_elem_input_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_up_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_up_msg_out_result_p1_range_check(Events_Ty_elem_input_event_event_up_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_up_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_input_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_up_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_msg_out_result_PRESENT);
        Events_Ty_elem_input_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_PRESENT);
        Events_Ty_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_input_event_event_down_PRESENT);
        Events_Ty_elem_input_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_PRESENT);
        Events_Ty_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Events_Ty_elem_input_event_event_up_PRESENT);
        Events_Ty_elem_input_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert(((((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_controller)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_down)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_environ)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_up)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert(((((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_controller)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_down)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_environ)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_up)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc >= 1) && (Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_down_result_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_up_result_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_down_check_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_up_check_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_down_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_down_msg_in_check_p1_range_check(Events_Ty_elem_output_event_event_down_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_down_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_output_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_output_event_event_down_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_msg_in_check_PRESENT);
        Events_Ty_elem_output_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_down_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_down_msg_out_result_p1_range_check(Events_Ty_elem_output_event_event_down_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_down_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_output_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_down_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_msg_out_result_PRESENT);
        Events_Ty_elem_output_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc >= 1) && (Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_up_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_up_msg_in_check_p1_range_check(Events_Ty_elem_output_event_event_up_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_up_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_output_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_output_event_event_up_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_msg_in_check_PRESENT);
        Events_Ty_elem_output_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_up_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_up_msg_out_result_p1_range_check(Events_Ty_elem_output_event_event_up_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_up_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_output_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_up_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_msg_out_result_PRESENT);
        Events_Ty_elem_output_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_PRESENT);
        Events_Ty_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_output_event_event_down_PRESENT);
        Events_Ty_elem_output_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_PRESENT);
        Events_Ty_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Events_Ty_elem_output_event_event_up_PRESENT);
        Events_Ty_elem_output_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert(((((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_controller)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_down)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_environ)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_up)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert(((((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_controller)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_down)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_environ)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_up)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 1) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 4)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_range_check(Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_unhandled_input_event_down_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_msg_in_check_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_range_check(Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_down_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_msg_out_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 1) && (Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 4)));
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_range_check(Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_vc <= 100)));
}
inline Events_Ty_elem_unhandled_input_event_up_msg_in_check_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_msg_in_check_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_range_check(Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_up_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_msg_out_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_down_PRESENT);
        Events_Ty_elem_unhandled_input_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_up_PRESENT);
        Events_Ty_elem_unhandled_input_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_Ty_elem_init_value(dst)
{
    skip;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        Events_Ty_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 9)
    {
        Events_Ty_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_timers_controller_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_down_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_up_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_assign_value(dst, src)
{
    System_State_timers_controller_assign_value(dst.controller, src.controller);
    System_State_timers_down_assign_value(dst.down, src.down);
    System_State_timers_up_assign_value(dst.up, src.up);
    System_State_timers_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline System_State_controller_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_source_range_check(System_State_controller_queue_elem_input_event_source_vc)
{
    assert(((((((System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_actuator) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_controller)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_down)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_environ)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_up)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_env)));
}
inline System_State_controller_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_dest_range_check(System_State_controller_queue_elem_input_event_dest_vc)
{
    assert(((((((System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_actuator) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_controller)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_down)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_environ)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_up)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_env)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_range_check(System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_input_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_msg_in_check_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_range_check(System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_msg_out_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_range_check(System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_input_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_msg_in_check_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_range_check(System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_msg_out_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_down_PRESENT);
        System_State_controller_queue_elem_input_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_up_PRESENT);
        System_State_controller_queue_elem_input_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_source_range_check(System_State_controller_queue_elem_output_event_source_vc)
{
    assert(((((((System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_actuator) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_controller)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_down)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_environ)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_up)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_env)));
}
inline System_State_controller_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_dest_range_check(System_State_controller_queue_elem_output_event_dest_vc)
{
    assert(((((((System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_actuator) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_controller)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_down)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_environ)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_up)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_env)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_range_check(System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_output_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_msg_in_check_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_range_check(System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_msg_out_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_range_check(System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_output_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_msg_in_check_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_range_check(System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_msg_out_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_down_PRESENT);
        System_State_controller_queue_elem_output_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_up_PRESENT);
        System_State_controller_queue_elem_output_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_source_range_check(System_State_controller_queue_elem_unhandled_input_source_vc)
{
    assert(((((((System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_actuator) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_controller)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_down)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_environ)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_up)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_env)));
}
inline System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_dest_range_check(System_State_controller_queue_elem_unhandled_input_dest_vc)
{
    assert(((((((System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_actuator) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_controller)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_down)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_environ)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_up)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_env)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_down_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_up_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_no_event_PRESENT);
        System_State_controller_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_controller_queue_elem_system_startup_PRESENT);
        System_State_controller_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_PRESENT);
        System_State_controller_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_PRESENT);
        System_State_controller_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_PRESENT);
        System_State_controller_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_controller_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_controller_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_controller_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_size_check(System_State_controller_queue_sc)
{
    assert(((System_State_controller_queue_sc >= 0) && (System_State_controller_queue_sc <= 2)));
}
inline System_State_down_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_source_range_check(dst);
}
inline System_State_down_queue_elem_input_event_source_range_check(System_State_down_queue_elem_input_event_source_vc)
{
    assert(((((((System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_actuator) || (System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_controller)) || (System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_down)) || (System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_environ)) || (System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_up)) || (System_State_down_queue_elem_input_event_source_vc == System_State_down_queue_elem_input_event_source_env)));
}
inline System_State_down_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_down_queue_elem_input_event_dest_range_check(System_State_down_queue_elem_input_event_dest_vc)
{
    assert(((((((System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_actuator) || (System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_controller)) || (System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_down)) || (System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_environ)) || (System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_up)) || (System_State_down_queue_elem_input_event_dest_vc == System_State_down_queue_elem_input_event_dest_env)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_in_test_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_range_check(System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_input_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_msg_in_check_PRESENT);
        System_State_down_queue_elem_input_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_range_check(System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_input_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_msg_out_result_PRESENT);
        System_State_down_queue_elem_input_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_msg_in_PRESENT);
        System_State_down_queue_elem_input_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_msg_out_PRESENT);
        System_State_down_queue_elem_input_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_environ_msg_out_test_PRESENT);
        System_State_down_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_environ_msg_out_PRESENT);
        System_State_down_queue_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_range_check(System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_input_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_msg_in_check_PRESENT);
        System_State_down_queue_elem_input_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_range_check(System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_input_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_input_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_msg_out_result_PRESENT);
        System_State_down_queue_elem_input_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_msg_in_PRESENT);
        System_State_down_queue_elem_input_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_msg_out_PRESENT);
        System_State_down_queue_elem_input_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_controller_PRESENT);
        System_State_down_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_down_PRESENT);
        System_State_down_queue_elem_input_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_environ_PRESENT);
        System_State_down_queue_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_down_queue_elem_input_event_event_up_PRESENT);
        System_State_down_queue_elem_input_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_input_event_assign_value(dst, src)
{
    System_State_down_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_down_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_down_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_down_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_source_range_check(dst);
}
inline System_State_down_queue_elem_output_event_source_range_check(System_State_down_queue_elem_output_event_source_vc)
{
    assert(((((((System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_actuator) || (System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_controller)) || (System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_down)) || (System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_environ)) || (System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_up)) || (System_State_down_queue_elem_output_event_source_vc == System_State_down_queue_elem_output_event_source_env)));
}
inline System_State_down_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_down_queue_elem_output_event_dest_range_check(System_State_down_queue_elem_output_event_dest_vc)
{
    assert(((((((System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_actuator) || (System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_controller)) || (System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_down)) || (System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_environ)) || (System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_up)) || (System_State_down_queue_elem_output_event_dest_vc == System_State_down_queue_elem_output_event_dest_env)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_in_test_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_range_check(System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_output_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_msg_in_check_PRESENT);
        System_State_down_queue_elem_output_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_range_check(System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_output_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_msg_out_result_PRESENT);
        System_State_down_queue_elem_output_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_msg_in_PRESENT);
        System_State_down_queue_elem_output_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_msg_out_PRESENT);
        System_State_down_queue_elem_output_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_environ_msg_out_test_PRESENT);
        System_State_down_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_environ_msg_out_PRESENT);
        System_State_down_queue_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_range_check(System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_output_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_msg_in_check_PRESENT);
        System_State_down_queue_elem_output_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_range_check(System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_output_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_output_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_msg_out_result_PRESENT);
        System_State_down_queue_elem_output_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_msg_in_PRESENT);
        System_State_down_queue_elem_output_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_msg_out_PRESENT);
        System_State_down_queue_elem_output_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_controller_PRESENT);
        System_State_down_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_down_PRESENT);
        System_State_down_queue_elem_output_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_environ_PRESENT);
        System_State_down_queue_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_down_queue_elem_output_event_event_up_PRESENT);
        System_State_down_queue_elem_output_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_output_event_assign_value(dst, src)
{
    System_State_down_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_down_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_down_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_down_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_source_range_check(System_State_down_queue_elem_unhandled_input_source_vc)
{
    assert(((((((System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_actuator) || (System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_controller)) || (System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_down)) || (System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_environ)) || (System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_up)) || (System_State_down_queue_elem_unhandled_input_source_vc == System_State_down_queue_elem_unhandled_input_source_env)));
}
inline System_State_down_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_dest_range_check(System_State_down_queue_elem_unhandled_input_dest_vc)
{
    assert(((((((System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_actuator) || (System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_controller)) || (System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_down)) || (System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_environ)) || (System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_up)) || (System_State_down_queue_elem_unhandled_input_dest_vc == System_State_down_queue_elem_unhandled_input_dest_env)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 1) && (System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_msg_in_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_msg_out_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 1) && (System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_environ_msg_out_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc >= 0) && (System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_down_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_msg_in_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_msg_out_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_down_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_environ_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_event_up_PRESENT);
        System_State_down_queue_elem_unhandled_input_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_down_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_down_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_down_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_down_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_down_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_down_queue_elem_no_event_PRESENT);
        System_State_down_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_down_queue_elem_system_startup_PRESENT);
        System_State_down_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_down_queue_elem_input_event_PRESENT);
        System_State_down_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_down_queue_elem_output_event_PRESENT);
        System_State_down_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_down_queue_elem_unhandled_input_PRESENT);
        System_State_down_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_down_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_down_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_down_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_down_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_down_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_down_queue_size_check(System_State_down_queue_sc)
{
    assert(((System_State_down_queue_sc >= 0) && (System_State_down_queue_sc <= 2)));
}
inline System_State_up_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_source_range_check(dst);
}
inline System_State_up_queue_elem_input_event_source_range_check(System_State_up_queue_elem_input_event_source_vc)
{
    assert(((((((System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_actuator) || (System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_controller)) || (System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_down)) || (System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_environ)) || (System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_up)) || (System_State_up_queue_elem_input_event_source_vc == System_State_up_queue_elem_input_event_source_env)));
}
inline System_State_up_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_up_queue_elem_input_event_dest_range_check(System_State_up_queue_elem_input_event_dest_vc)
{
    assert(((((((System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_actuator) || (System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_controller)) || (System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_down)) || (System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_environ)) || (System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_up)) || (System_State_up_queue_elem_input_event_dest_vc == System_State_up_queue_elem_input_event_dest_env)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_range_check(System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_range_check(System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_in_test_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_range_check(System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_range_check(System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_range_check(System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_input_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_input_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_msg_in_check_PRESENT);
        System_State_up_queue_elem_input_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_range_check(System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_input_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_msg_out_result_PRESENT);
        System_State_up_queue_elem_input_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_msg_in_PRESENT);
        System_State_up_queue_elem_input_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_msg_out_PRESENT);
        System_State_up_queue_elem_input_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_environ_msg_out_test_PRESENT);
        System_State_up_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_environ_msg_out_PRESENT);
        System_State_up_queue_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_range_check(System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_input_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_input_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_msg_in_check_PRESENT);
        System_State_up_queue_elem_input_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_range_check(System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_input_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_input_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_msg_out_result_PRESENT);
        System_State_up_queue_elem_input_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_msg_in_PRESENT);
        System_State_up_queue_elem_input_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_msg_out_PRESENT);
        System_State_up_queue_elem_input_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_controller_PRESENT);
        System_State_up_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_down_PRESENT);
        System_State_up_queue_elem_input_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_environ_PRESENT);
        System_State_up_queue_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_up_queue_elem_input_event_event_up_PRESENT);
        System_State_up_queue_elem_input_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_input_event_assign_value(dst, src)
{
    System_State_up_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_up_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_up_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_up_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_source_range_check(dst);
}
inline System_State_up_queue_elem_output_event_source_range_check(System_State_up_queue_elem_output_event_source_vc)
{
    assert(((((((System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_actuator) || (System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_controller)) || (System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_down)) || (System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_environ)) || (System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_up)) || (System_State_up_queue_elem_output_event_source_vc == System_State_up_queue_elem_output_event_source_env)));
}
inline System_State_up_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_up_queue_elem_output_event_dest_range_check(System_State_up_queue_elem_output_event_dest_vc)
{
    assert(((((((System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_actuator) || (System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_controller)) || (System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_down)) || (System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_environ)) || (System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_up)) || (System_State_up_queue_elem_output_event_dest_vc == System_State_up_queue_elem_output_event_dest_env)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_range_check(System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_vc >= 1) && (System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_range_check(System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_in_test_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_range_check(System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_range_check(System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_range_check(System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_output_event_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_output_event_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_msg_in_check_PRESENT);
        System_State_up_queue_elem_output_event_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_range_check(System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_output_event_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_msg_out_result_PRESENT);
        System_State_up_queue_elem_output_event_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_msg_in_PRESENT);
        System_State_up_queue_elem_output_event_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_msg_out_PRESENT);
        System_State_up_queue_elem_output_event_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_vc >= 1) && (System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_environ_msg_out_test_PRESENT);
        System_State_up_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_environ_msg_out_PRESENT);
        System_State_up_queue_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_range_check(System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_output_event_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_output_event_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_msg_in_check_PRESENT);
        System_State_up_queue_elem_output_event_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_range_check(System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_output_event_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_output_event_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_msg_out_result_PRESENT);
        System_State_up_queue_elem_output_event_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_msg_in_PRESENT);
        System_State_up_queue_elem_output_event_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_msg_out_PRESENT);
        System_State_up_queue_elem_output_event_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_controller_PRESENT);
        System_State_up_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_down_PRESENT);
        System_State_up_queue_elem_output_event_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_environ_PRESENT);
        System_State_up_queue_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_up_queue_elem_output_event_event_up_PRESENT);
        System_State_up_queue_elem_output_event_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_output_event_assign_value(dst, src)
{
    System_State_up_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_up_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_up_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_up_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_source_range_check(System_State_up_queue_elem_unhandled_input_source_vc)
{
    assert(((((((System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_actuator) || (System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_controller)) || (System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_down)) || (System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_environ)) || (System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_up)) || (System_State_up_queue_elem_unhandled_input_source_vc == System_State_up_queue_elem_unhandled_input_source_env)));
}
inline System_State_up_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_dest_range_check(System_State_up_queue_elem_unhandled_input_dest_vc)
{
    assert(((((((System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_actuator) || (System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_controller)) || (System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_down)) || (System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_environ)) || (System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_up)) || (System_State_up_queue_elem_unhandled_input_dest_vc == System_State_up_queue_elem_unhandled_input_dest_env)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_range_check(System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 1) && (System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_range_check(System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_in_down_result_assign_value(dst.data.down_result, src.data.down_result);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_in_up_result_assign_value(dst.data.up_result, src.data.up_result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_range_check(System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_range_check(System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_out_down_check_assign_value(dst.data.down_check, src.data.down_check);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_out_up_check_assign_value(dst.data.up_check, src.data.up_check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_range_check(System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_down_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_range_check(System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_down_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_down_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_msg_in_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_msg_out_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_down_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 1) && (System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 4)));
}
inline System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_environ_msg_out_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_range_check(System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_vc <= 100)));
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_msg_in_check_assign_value(dst.data.check, src.data.check);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_up_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(dst);
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_range_check(System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc)
{
    assert(((System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc >= 0) && (System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_vc <= 10000)));
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_up_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_up_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_up_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_msg_in_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_msg_out_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_up_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_down_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_down_assign_value(dst.data.down, src.data.down);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_environ_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_event_up_PRESENT);
        System_State_up_queue_elem_unhandled_input_event_up_assign_value(dst.data.up, src.data.up);
    ::  else;
        skip;
    fi;
}
inline System_state_up_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_up_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_up_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_up_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_up_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_up_queue_elem_no_event_PRESENT);
        System_State_up_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_up_queue_elem_system_startup_PRESENT);
        System_State_up_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_up_queue_elem_input_event_PRESENT);
        System_State_up_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_up_queue_elem_output_event_PRESENT);
        System_State_up_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_up_queue_elem_unhandled_input_PRESENT);
        System_State_up_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_up_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_up_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_up_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_up_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_up_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_up_queue_size_check(System_State_up_queue_sc)
{
    assert(((System_State_up_queue_sc >= 0) && (System_State_up_queue_sc <= 2)));
}
inline System_State_controller_state_assign_value(dst, src)
{
    dst = src;
    System_State_controller_state_range_check(dst);
}
inline System_State_controller_state_range_check(System_State_controller_state_vc)
{
    assert(((((System_State_controller_state_vc == System_State_controller_state_waitingforup) || (System_State_controller_state_vc == System_State_controller_state_waitingfordown)) || (System_State_controller_state_vc == System_State_controller_state_wait)) || (System_State_controller_state_vc == System_State_controller_state_waitingforboth)));
}
inline System_State_controller_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_controller_init_done_range_check(dst);
}
inline System_State_controller_init_done_range_check(System_State_controller_init_done_vc)
{
    assert(true);
}
inline System_State_controller_sender_assign_value(dst, src)
{
    dst = src;
    System_State_controller_sender_range_check(dst);
}
inline System_State_controller_sender_range_check(System_State_controller_sender_vc)
{
    assert(((((((System_State_controller_sender_vc == System_State_controller_sender_actuator) || (System_State_controller_sender_vc == System_State_controller_sender_controller)) || (System_State_controller_sender_vc == System_State_controller_sender_down)) || (System_State_controller_sender_vc == System_State_controller_sender_environ)) || (System_State_controller_sender_vc == System_State_controller_sender_up)) || (System_State_controller_sender_vc == System_State_controller_sender_env)));
}
inline System_State_controller_test_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_test_param_range_check(dst);
}
inline System_State_controller_test_param_range_check(System_State_controller_test_param_vc)
{
    assert(((System_State_controller_test_param_vc >= 1) && (System_State_controller_test_param_vc <= 4)));
}
inline System_State_controller_up_check_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_up_check_param_range_check(dst);
}
inline System_State_controller_up_check_param_range_check(System_State_controller_up_check_param_vc)
{
    assert(((System_State_controller_up_check_param_vc >= 0) && (System_State_controller_up_check_param_vc <= 100)));
}
inline System_State_controller_down_check_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_down_check_param_range_check(dst);
}
inline System_State_controller_down_check_param_range_check(System_State_controller_down_check_param_vc)
{
    assert(((System_State_controller_down_check_param_vc >= 0) && (System_State_controller_down_check_param_vc <= 100)));
}
inline System_State_controller_up_result_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_up_result_param_range_check(dst);
}
inline System_State_controller_up_result_param_range_check(System_State_controller_up_result_param_vc)
{
    assert(((System_State_controller_up_result_param_vc >= 0) && (System_State_controller_up_result_param_vc <= 10000)));
}
inline System_State_controller_down_result_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_down_result_param_range_check(dst);
}
inline System_State_controller_down_result_param_range_check(System_State_controller_down_result_param_vc)
{
    assert(((System_State_controller_down_result_param_vc >= 0) && (System_State_controller_down_result_param_vc <= 10000)));
}
inline System_State_controller_up_value_assign_value(dst, src)
{
    dst = src;
    System_State_controller_up_value_range_check(dst);
}
inline System_State_controller_up_value_range_check(System_State_controller_up_value_vc)
{
    assert(((System_State_controller_up_value_vc >= 0) && (System_State_controller_up_value_vc <= 10000)));
}
inline System_State_controller_down_value_assign_value(dst, src)
{
    dst = src;
    System_State_controller_down_value_range_check(dst);
}
inline System_State_controller_down_value_range_check(System_State_controller_down_value_vc)
{
    assert(((System_State_controller_down_value_vc >= 0) && (System_State_controller_down_value_vc <= 10000)));
}
inline System_State_controller_error_assign_value(dst, src)
{
    dst = src;
    System_State_controller_error_range_check(dst);
}
inline System_State_controller_error_range_check(System_State_controller_error_vc)
{
    assert(((System_State_controller_error_vc >= 0) && (System_State_controller_error_vc <= 100)));
}
inline System_State_controller_reached_assign_value(dst, src)
{
    dst = src;
    System_State_controller_reached_range_check(dst);
}
inline System_State_controller_reached_range_check(System_State_controller_reached_vc)
{
    assert(((System_State_controller_reached_vc >= 0) && (System_State_controller_reached_vc <= 100)));
}
inline System_State_controller_assign_value(dst, src)
{
    System_State_controller_state_assign_value(dst.state, src.state);
    System_State_controller_init_done_assign_value(dst.init_done, src.init_done);
    System_State_controller_sender_assign_value(dst.sender, src.sender);
    System_State_controller_test_param_assign_value(dst.test_param, src.test_param);
    System_State_controller_up_check_param_assign_value(dst.up_check_param, src.up_check_param);
    System_State_controller_down_check_param_assign_value(dst.down_check_param, src.down_check_param);
    System_State_controller_up_result_param_assign_value(dst.up_result_param, src.up_result_param);
    System_State_controller_down_result_param_assign_value(dst.down_result_param, src.down_result_param);
    System_State_controller_up_value_assign_value(dst.up_value, src.up_value);
    System_State_controller_down_value_assign_value(dst.down_value, src.down_value);
    System_State_controller_error_assign_value(dst.error, src.error);
    System_State_controller_reached_assign_value(dst.reached, src.reached);
}
inline System_State_down_state_assign_value(dst, src)
{
    dst = src;
    System_State_down_state_range_check(dst);
}
inline System_State_down_state_range_check(System_State_down_state_vc)
{
    assert(((System_State_down_state_vc == System_State_down_state_wait) || (System_State_down_state_vc == System_State_down_state_operation)));
}
inline System_State_down_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_down_init_done_range_check(dst);
}
inline System_State_down_init_done_range_check(System_State_down_init_done_vc)
{
    assert(true);
}
inline System_State_down_sender_assign_value(dst, src)
{
    dst = src;
    System_State_down_sender_range_check(dst);
}
inline System_State_down_sender_range_check(System_State_down_sender_vc)
{
    assert(((((((System_State_down_sender_vc == System_State_down_sender_actuator) || (System_State_down_sender_vc == System_State_down_sender_controller)) || (System_State_down_sender_vc == System_State_down_sender_down)) || (System_State_down_sender_vc == System_State_down_sender_environ)) || (System_State_down_sender_vc == System_State_down_sender_up)) || (System_State_down_sender_vc == System_State_down_sender_env)));
}
inline System_State_down_check_param_assign_value(dst, src)
{
    dst = src;
    System_State_down_check_param_range_check(dst);
}
inline System_State_down_check_param_range_check(System_State_down_check_param_vc)
{
    assert(((System_State_down_check_param_vc >= 0) && (System_State_down_check_param_vc <= 100)));
}
inline System_State_down_result_param_assign_value(dst, src)
{
    dst = src;
    System_State_down_result_param_range_check(dst);
}
inline System_State_down_result_param_range_check(System_State_down_result_param_vc)
{
    assert(((System_State_down_result_param_vc >= 0) && (System_State_down_result_param_vc <= 10000)));
}
inline System_State_down_assign_value(dst, src)
{
    System_State_down_state_assign_value(dst.state, src.state);
    System_State_down_init_done_assign_value(dst.init_done, src.init_done);
    System_State_down_sender_assign_value(dst.sender, src.sender);
    System_State_down_check_param_assign_value(dst.check_param, src.check_param);
    System_State_down_result_param_assign_value(dst.result_param, src.result_param);
}
inline System_State_up_state_assign_value(dst, src)
{
    dst = src;
    System_State_up_state_range_check(dst);
}
inline System_State_up_state_range_check(System_State_up_state_vc)
{
    assert(((System_State_up_state_vc == System_State_up_state_wait) || (System_State_up_state_vc == System_State_up_state_operation)));
}
inline System_State_up_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_up_init_done_range_check(dst);
}
inline System_State_up_init_done_range_check(System_State_up_init_done_vc)
{
    assert(true);
}
inline System_State_up_sender_assign_value(dst, src)
{
    dst = src;
    System_State_up_sender_range_check(dst);
}
inline System_State_up_sender_range_check(System_State_up_sender_vc)
{
    assert(((((((System_State_up_sender_vc == System_State_up_sender_actuator) || (System_State_up_sender_vc == System_State_up_sender_controller)) || (System_State_up_sender_vc == System_State_up_sender_down)) || (System_State_up_sender_vc == System_State_up_sender_environ)) || (System_State_up_sender_vc == System_State_up_sender_up)) || (System_State_up_sender_vc == System_State_up_sender_env)));
}
inline System_State_up_check_param_assign_value(dst, src)
{
    dst = src;
    System_State_up_check_param_range_check(dst);
}
inline System_State_up_check_param_range_check(System_State_up_check_param_vc)
{
    assert(((System_State_up_check_param_vc >= 0) && (System_State_up_check_param_vc <= 100)));
}
inline System_State_up_result_param_assign_value(dst, src)
{
    dst = src;
    System_State_up_result_param_range_check(dst);
}
inline System_State_up_result_param_range_check(System_State_up_result_param_vc)
{
    assert(((System_State_up_result_param_vc >= 0) && (System_State_up_result_param_vc <= 10000)));
}
inline System_State_up_assign_value(dst, src)
{
    System_State_up_state_assign_value(dst.state, src.state);
    System_State_up_init_done_assign_value(dst.init_done, src.init_done);
    System_State_up_sender_assign_value(dst.sender, src.sender);
    System_State_up_check_param_assign_value(dst.check_param, src.check_param);
    System_State_up_result_param_assign_value(dst.result_param, src.result_param);
}
inline System_State_assign_value(dst, src)
{
    System_State_timers_assign_value(dst.timers, src.timers);
    System_State_controller_queue_assign_value(dst.controller_queue, src.controller_queue);
    System_State_down_queue_assign_value(dst.down_queue, src.down_queue);
    System_State_up_queue_assign_value(dst.up_queue, src.up_queue);
    System_State_controller_assign_value(dst.controller, src.controller);
    System_State_down_assign_value(dst.down, src.down);
    System_State_up_assign_value(dst.up, src.up);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
inline TimerData_timer_enabled_assign_value(dst, src)
{
    dst = src;
    TimerData_timer_enabled_range_check(dst);
}
inline TimerData_timer_enabled_range_check(TimerData_timer_enabled_vc)
{
    assert(true);
}
inline TimerData_interval_assign_value(dst, src)
{
    dst = src;
    TimerData_interval_range_check(dst);
}
inline TimerData_interval_range_check(TimerData_interval_vc)
{
    assert(((TimerData_interval_vc >= 0) && (TimerData_interval_vc <= 50000)));
}
inline TimerData_assign_value(dst, src)
{
    TimerData_timer_enabled_assign_value(dst.timer_enabled, src.timer_enabled);
    TimerData_interval_assign_value(dst.interval, src.interval);
}
inline AggregateTimerData_controller_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_down_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_up_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_assign_value(dst, src)
{
    AggregateTimerData_controller_assign_value(dst.controller, src.controller);
    AggregateTimerData_down_assign_value(dst.down, src.down);
    AggregateTimerData_up_assign_value(dst.up, src.up);
    AggregateTimerData_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline global_dataview_init()
{
    d_step {
        nothing_init();
    }
}
