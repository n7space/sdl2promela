SPIN?=spin

# We are testing the sources, not the installed application
SDL2PROMELA=PYTHONPATH=../../ python3 -m sdl2promela.sdl2promela

RES_DIR=resources

TEST_DIR=out

CREATE_EMPTY_TEST_DIR=rm -r -f ${TEST_DIR} && mkdir -p ${TEST_DIR}
DELETE_TEST_DIR=rm -r ${TEST_DIR}

TESTS = \
	test_bare_outputs

.SILENT : \
	${TESTS}

.PHONY : \
	${TESTS} \
	check

check: ${TESTS}

##############################INTEGRATION TESTS################################

# These tests are created based on the tests supplied with custom Spin version
# used by N7 Space (see github.com/n7space/Spin). Their purpose is to validate
# whether the generated Promela code actually works inside Spin.
# As sdl2promela generates only inlines (representing the SDL logic) which need
# external data and process definitions (similarly to opengeode generating
# only C functions, which need type declarations generated by asn1scc and
# glue code generated by Kazoo), they are wrapped inside "host" Promela
# files

test_bare_outputs:
	echo "Test bare outputs"
	${CREATE_EMPTY_TEST_DIR}
	${SDL2PROMELA} -o ${TEST_DIR}/bare_outputs.pml ${RES_DIR}/bare_outputs.pr
	cp ${RES_DIR}/bare_outputs_host.pml ${TEST_DIR}/bare_outputs_host.pml
	cd ${TEST_DIR} && \
	${SPIN} bare_outputs_host.pml > bare_outputs.output
	grep -q "Initializing the system" ${TEST_DIR}/bare_outputs.output
	grep -q "Starting the system" ${TEST_DIR}/bare_outputs.output
	grep -q "Sending signal from environment" ${TEST_DIR}/bare_outputs.output
	grep -q "Received signal in" ${TEST_DIR}/bare_outputs.output
	grep -q "Received signal out" ${TEST_DIR}/bare_outputs.output
	${DELETE_TEST_DIR}
