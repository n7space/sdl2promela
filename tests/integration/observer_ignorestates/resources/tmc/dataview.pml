#define Observer_States int
#define Observer_Context_state int
#define Observer_Context_init_done bool
#define Observer_Actuator_Event_Msg_In_Selection int
#define Observer_Actuator_Event_Msg_Out_Selection int
#define Observer_Actuator_Event_Selection int
#define Observer_Controller_Event_Msg_In_Selection int
#define Observer_Controller_Event_Msg_Out_Selection int
#define Observer_Controller_Event_Selection int
#define Observer_Environ_Event_Msg_Out_Selection int
#define Observer_Environ_Event_Selection int
#define Observer_Function_Event_Selection int
#define Observer_Observable_Event_Selection int
#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_param int
#define Controller_States int
#define Controller_Context_state int
#define Controller_Context_init_done bool
#define Controller_Context_test_param int
#define Controller_Context_ping_param int
#define Controller_Context_pong_param int
#define MyInteger int
#define MyTestInteger int
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define Environ_test_p1 int
#define PID int
#define Actuator_Event_msg_in_ping_p1 int
#define Actuator_Event_msg_out_pong_p1 int
#define Controller_Event_msg_in_pong_p1 int
#define Controller_Event_msg_in_test_p1 int
#define Controller_Event_msg_out_ping_p1 int
#define Environ_Event_msg_out_test_p1 int
#define Observer_State_Kind int
#define Function_Event_actuator_msg_in_ping_p1 int
#define Function_Event_actuator_msg_out_pong_p1 int
#define Function_Event_controller_msg_in_pong_p1 int
#define Function_Event_controller_msg_in_test_p1 int
#define Function_Event_controller_msg_out_ping_p1 int
#define Function_Event_environ_msg_out_test_p1 int
#define Named_Function_Event_event_actuator_msg_in_ping_p1 int
#define Named_Function_Event_event_actuator_msg_out_pong_p1 int
#define Named_Function_Event_event_controller_msg_in_pong_p1 int
#define Named_Function_Event_event_controller_msg_in_test_p1 int
#define Named_Function_Event_event_controller_msg_out_ping_p1 int
#define Named_Function_Event_event_environ_msg_out_test_p1 int
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_actuator_msg_in_ping_p1 int
#define Interface_Event_event_actuator_msg_out_pong_p1 int
#define Interface_Event_event_controller_msg_in_pong_p1 int
#define Interface_Event_event_controller_msg_in_test_p1 int
#define Interface_Event_event_controller_msg_out_ping_p1 int
#define Interface_Event_event_environ_msg_out_test_p1 int
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_actuator_msg_in_ping_p1 int
#define Observable_Event_input_event_event_actuator_msg_out_pong_p1 int
#define Observable_Event_input_event_event_controller_msg_in_pong_p1 int
#define Observable_Event_input_event_event_controller_msg_in_test_p1 int
#define Observable_Event_input_event_event_controller_msg_out_ping_p1 int
#define Observable_Event_input_event_event_environ_msg_out_test_p1 int
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_actuator_msg_in_ping_p1 int
#define Observable_Event_output_event_event_actuator_msg_out_pong_p1 int
#define Observable_Event_output_event_event_controller_msg_in_pong_p1 int
#define Observable_Event_output_event_event_controller_msg_in_test_p1 int
#define Observable_Event_output_event_event_controller_msg_out_ping_p1 int
#define Observable_Event_output_event_event_environ_msg_out_test_p1 int
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_pong_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_test_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_ping_p1 int
#define Observable_Event_unhandled_input_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_pong_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_ping_p1 int
#define Events_Ty_elem_input_event_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_pong_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_ping_p1 int
#define Events_Ty_elem_output_event_event_environ_msg_out_test_p1 int
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1 int
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_actuator_queue_elem_input_event_source int
#define System_State_actuator_queue_elem_input_event_dest int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1 int
#define System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1 int
#define System_State_actuator_queue_elem_output_event_source int
#define System_State_actuator_queue_elem_output_event_dest int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1 int
#define System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1 int
#define System_State_actuator_queue_elem_unhandled_input_source int
#define System_State_actuator_queue_elem_unhandled_input_dest int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_input_event_source int
#define System_State_controller_queue_elem_input_event_dest int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1 int
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_output_event_source int
#define System_State_controller_queue_elem_output_event_dest int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1 int
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1 int
#define System_State_controller_queue_elem_unhandled_input_source int
#define System_State_controller_queue_elem_unhandled_input_dest int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1 int
#define System_State_actuator_state int
#define System_State_actuator_init_done bool
#define System_State_actuator_param int
#define System_State_controller_state int
#define System_State_controller_init_done bool
#define System_State_controller_test_param int
#define System_State_controller_ping_param int
#define System_State_controller_pong_param int
#define Observer_States_ign 0
#define Observer_States_wait 1
#define Observer_Context_state_ign 0
#define Observer_Context_state_wait 1
#define Observer_Actuator_Event_Msg_In_Selection_input_none_present 1
#define Observer_Actuator_Event_Msg_In_Selection_ping_present 2
#define Observer_Actuator_Event_Msg_Out_Selection_pong_present 1
#define Observer_Actuator_Event_Selection_msg_in_present 1
#define Observer_Actuator_Event_Selection_msg_out_present 2
#define Observer_Controller_Event_Msg_In_Selection_input_none_present 1
#define Observer_Controller_Event_Msg_In_Selection_pong_present 2
#define Observer_Controller_Event_Msg_In_Selection_test_present 3
#define Observer_Controller_Event_Msg_Out_Selection_ping_present 1
#define Observer_Controller_Event_Selection_msg_in_present 1
#define Observer_Controller_Event_Selection_msg_out_present 2
#define Observer_Environ_Event_Msg_Out_Selection_test_present 1
#define Observer_Environ_Event_Selection_msg_out_present 1
#define Observer_Function_Event_Selection_actuator_present 1
#define Observer_Function_Event_Selection_controller_present 2
#define Observer_Function_Event_Selection_environ_present 3
#define Observer_Observable_Event_Selection_no_event_present 1
#define Observer_Observable_Event_Selection_system_startup_present 2
#define Observer_Observable_Event_Selection_input_event_present 3
#define Observer_Observable_Event_Selection_output_event_present 4
#define Observer_Observable_Event_Selection_unhandled_input_present 5
#define Actuator_States_wait 0
#define Actuator_Context_state_wait 0
#define Controller_States_wait 0
#define Controller_States_operation 1
#define Controller_Context_state_wait 0
#define Controller_Context_state_operation 1
#define PID_env 0
#define PID_actuator 1
#define PID_controller 2
#define PID_environ 3
#define Actuator_Event_NONE 0
#define Actuator_Event_msg_in_NONE 0
#define Actuator_Event_msg_in_input_none_PRESENT 1
#define Actuator_event_msg_in_selection_input_none_PRESENT 1
#define Actuator_Event_msg_in_ping_PRESENT 2
#define Actuator_event_msg_in_selection_ping_PRESENT 2
#define Actuator_Event_msg_in_PRESENT 1
#define Actuator_event_selection_msg_in_PRESENT 1
#define Actuator_Event_msg_out_NONE 0
#define Actuator_Event_msg_out_pong_PRESENT 1
#define Actuator_event_msg_out_selection_pong_PRESENT 1
#define Actuator_Event_msg_out_PRESENT 2
#define Actuator_event_selection_msg_out_PRESENT 2
#define Controller_Event_NONE 0
#define Controller_Event_msg_in_NONE 0
#define Controller_Event_msg_in_input_none_PRESENT 1
#define Controller_event_msg_in_selection_input_none_PRESENT 1
#define Controller_Event_msg_in_pong_PRESENT 2
#define Controller_event_msg_in_selection_pong_PRESENT 2
#define Controller_Event_msg_in_test_PRESENT 3
#define Controller_event_msg_in_selection_test_PRESENT 3
#define Controller_Event_msg_in_PRESENT 1
#define Controller_event_selection_msg_in_PRESENT 1
#define Controller_Event_msg_out_NONE 0
#define Controller_Event_msg_out_ping_PRESENT 1
#define Controller_event_msg_out_selection_ping_PRESENT 1
#define Controller_Event_msg_out_PRESENT 2
#define Controller_event_selection_msg_out_PRESENT 2
#define Environ_Event_NONE 0
#define Environ_Event_msg_out_NONE 0
#define Environ_Event_msg_out_test_PRESENT 1
#define Environ_event_msg_out_selection_test_PRESENT 1
#define Environ_Event_msg_out_PRESENT 1
#define Environ_event_selection_msg_out_PRESENT 1
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_actuator_NONE 0
#define Function_Event_actuator_msg_in_NONE 0
#define Function_Event_actuator_msg_in_input_none_PRESENT 1
#define Function_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Function_Event_actuator_msg_in_ping_PRESENT 2
#define Function_event_actuator_msg_in_selection_ping_PRESENT 2
#define Function_Event_actuator_msg_in_PRESENT 1
#define Function_event_actuator_selection_msg_in_PRESENT 1
#define Function_Event_actuator_msg_out_NONE 0
#define Function_Event_actuator_msg_out_pong_PRESENT 1
#define Function_event_actuator_msg_out_selection_pong_PRESENT 1
#define Function_Event_actuator_msg_out_PRESENT 2
#define Function_event_actuator_selection_msg_out_PRESENT 2
#define Function_Event_actuator_PRESENT 1
#define Function_event_selection_actuator_PRESENT 1
#define Function_Event_controller_NONE 0
#define Function_Event_controller_msg_in_NONE 0
#define Function_Event_controller_msg_in_input_none_PRESENT 1
#define Function_event_controller_msg_in_selection_input_none_PRESENT 1
#define Function_Event_controller_msg_in_pong_PRESENT 2
#define Function_event_controller_msg_in_selection_pong_PRESENT 2
#define Function_Event_controller_msg_in_test_PRESENT 3
#define Function_event_controller_msg_in_selection_test_PRESENT 3
#define Function_Event_controller_msg_in_PRESENT 1
#define Function_event_controller_selection_msg_in_PRESENT 1
#define Function_Event_controller_msg_out_NONE 0
#define Function_Event_controller_msg_out_ping_PRESENT 1
#define Function_event_controller_msg_out_selection_ping_PRESENT 1
#define Function_Event_controller_msg_out_PRESENT 2
#define Function_event_controller_selection_msg_out_PRESENT 2
#define Function_Event_controller_PRESENT 2
#define Function_event_selection_controller_PRESENT 2
#define Function_Event_environ_NONE 0
#define Function_Event_environ_msg_out_NONE 0
#define Function_Event_environ_msg_out_test_PRESENT 1
#define Function_event_environ_msg_out_selection_test_PRESENT 1
#define Function_Event_environ_msg_out_PRESENT 1
#define Function_event_environ_selection_msg_out_PRESENT 1
#define Function_Event_environ_PRESENT 3
#define Function_event_selection_environ_PRESENT 3
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_actuator_NONE 0
#define Named_Function_Event_event_actuator_msg_in_NONE 0
#define Named_Function_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Named_function_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_ping_PRESENT 2
#define Named_function_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_PRESENT 1
#define Named_function_event_event_actuator_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_NONE 0
#define Named_Function_Event_event_actuator_msg_out_pong_PRESENT 1
#define Named_function_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_PRESENT 2
#define Named_function_event_event_actuator_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_actuator_PRESENT 1
#define Named_function_event_event_selection_actuator_PRESENT 1
#define Named_Function_Event_event_controller_NONE 0
#define Named_Function_Event_event_controller_msg_in_NONE 0
#define Named_Function_Event_event_controller_msg_in_input_none_PRESENT 1
#define Named_function_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_controller_msg_in_pong_PRESENT 2
#define Named_function_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Named_Function_Event_event_controller_msg_in_test_PRESENT 3
#define Named_function_event_event_controller_msg_in_selection_test_PRESENT 3
#define Named_Function_Event_event_controller_msg_in_PRESENT 1
#define Named_function_event_event_controller_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_NONE 0
#define Named_Function_Event_event_controller_msg_out_ping_PRESENT 1
#define Named_function_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_PRESENT 2
#define Named_function_event_event_controller_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_controller_PRESENT 2
#define Named_function_event_event_selection_controller_PRESENT 2
#define Named_Function_Event_event_environ_NONE 0
#define Named_Function_Event_event_environ_msg_out_NONE 0
#define Named_Function_Event_event_environ_msg_out_test_PRESENT 1
#define Named_function_event_event_environ_msg_out_selection_test_PRESENT 1
#define Named_Function_Event_event_environ_msg_out_PRESENT 1
#define Named_function_event_event_environ_selection_msg_out_PRESENT 1
#define Named_Function_Event_event_environ_PRESENT 3
#define Named_function_event_event_selection_environ_PRESENT 3
#define Interface_Event_source_env 0
#define Interface_Event_source_actuator 1
#define Interface_Event_source_controller 2
#define Interface_Event_source_environ 3
#define Interface_Event_dest_env 0
#define Interface_Event_dest_actuator 1
#define Interface_Event_dest_controller 2
#define Interface_Event_dest_environ 3
#define Interface_Event_event_NONE 0
#define Interface_Event_event_actuator_NONE 0
#define Interface_Event_event_actuator_msg_in_NONE 0
#define Interface_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Interface_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_actuator_msg_in_ping_PRESENT 2
#define Interface_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Interface_Event_event_actuator_msg_in_PRESENT 1
#define Interface_event_event_actuator_selection_msg_in_PRESENT 1
#define Interface_Event_event_actuator_msg_out_NONE 0
#define Interface_Event_event_actuator_msg_out_pong_PRESENT 1
#define Interface_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Interface_Event_event_actuator_msg_out_PRESENT 2
#define Interface_event_event_actuator_selection_msg_out_PRESENT 2
#define Interface_Event_event_actuator_PRESENT 1
#define Interface_event_event_selection_actuator_PRESENT 1
#define Interface_Event_event_controller_NONE 0
#define Interface_Event_event_controller_msg_in_NONE 0
#define Interface_Event_event_controller_msg_in_input_none_PRESENT 1
#define Interface_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_controller_msg_in_pong_PRESENT 2
#define Interface_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Interface_Event_event_controller_msg_in_test_PRESENT 3
#define Interface_event_event_controller_msg_in_selection_test_PRESENT 3
#define Interface_Event_event_controller_msg_in_PRESENT 1
#define Interface_event_event_controller_selection_msg_in_PRESENT 1
#define Interface_Event_event_controller_msg_out_NONE 0
#define Interface_Event_event_controller_msg_out_ping_PRESENT 1
#define Interface_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Interface_Event_event_controller_msg_out_PRESENT 2
#define Interface_event_event_controller_selection_msg_out_PRESENT 2
#define Interface_Event_event_controller_PRESENT 2
#define Interface_event_event_selection_controller_PRESENT 2
#define Interface_Event_event_environ_NONE 0
#define Interface_Event_event_environ_msg_out_NONE 0
#define Interface_Event_event_environ_msg_out_test_PRESENT 1
#define Interface_event_event_environ_msg_out_selection_test_PRESENT 1
#define Interface_Event_event_environ_msg_out_PRESENT 1
#define Interface_event_event_environ_selection_msg_out_PRESENT 1
#define Interface_Event_event_environ_PRESENT 3
#define Interface_event_event_selection_environ_PRESENT 3
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_env 0
#define Observable_Event_input_event_source_actuator 1
#define Observable_Event_input_event_source_controller 2
#define Observable_Event_input_event_source_environ 3
#define Observable_Event_input_event_dest_env 0
#define Observable_Event_input_event_dest_actuator 1
#define Observable_Event_input_event_dest_controller 2
#define Observable_Event_input_event_dest_environ 3
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_actuator_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_ping_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_NONE 0
#define Observable_Event_input_event_event_actuator_msg_out_pong_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_actuator_PRESENT 1
#define Observable_event_input_event_event_selection_actuator_PRESENT 1
#define Observable_Event_input_event_event_controller_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_in_pong_PRESENT 2
#define Observable_event_input_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_in_test_PRESENT 3
#define Observable_event_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_input_event_event_controller_msg_in_PRESENT 1
#define Observable_event_input_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_ping_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_PRESENT 2
#define Observable_event_input_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_controller_PRESENT 2
#define Observable_event_input_event_event_selection_controller_PRESENT 2
#define Observable_Event_input_event_event_environ_NONE 0
#define Observable_Event_input_event_event_environ_msg_out_NONE 0
#define Observable_Event_input_event_event_environ_msg_out_test_PRESENT 1
#define Observable_event_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_input_event_event_environ_msg_out_PRESENT 1
#define Observable_event_input_event_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_input_event_event_environ_PRESENT 3
#define Observable_event_input_event_event_selection_environ_PRESENT 3
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_env 0
#define Observable_Event_output_event_source_actuator 1
#define Observable_Event_output_event_source_controller 2
#define Observable_Event_output_event_source_environ 3
#define Observable_Event_output_event_dest_env 0
#define Observable_Event_output_event_dest_actuator 1
#define Observable_Event_output_event_dest_controller 2
#define Observable_Event_output_event_dest_environ 3
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_actuator_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_ping_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_NONE 0
#define Observable_Event_output_event_event_actuator_msg_out_pong_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_actuator_PRESENT 1
#define Observable_event_output_event_event_selection_actuator_PRESENT 1
#define Observable_Event_output_event_event_controller_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_in_pong_PRESENT 2
#define Observable_event_output_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_in_test_PRESENT 3
#define Observable_event_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_output_event_event_controller_msg_in_PRESENT 1
#define Observable_event_output_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_ping_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_PRESENT 2
#define Observable_event_output_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_controller_PRESENT 2
#define Observable_event_output_event_event_selection_controller_PRESENT 2
#define Observable_Event_output_event_event_environ_NONE 0
#define Observable_Event_output_event_event_environ_msg_out_NONE 0
#define Observable_Event_output_event_event_environ_msg_out_test_PRESENT 1
#define Observable_event_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_output_event_event_environ_msg_out_PRESENT 1
#define Observable_event_output_event_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_output_event_event_environ_PRESENT 3
#define Observable_event_output_event_event_selection_environ_PRESENT 3
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_env 0
#define Observable_Event_unhandled_input_source_actuator 1
#define Observable_Event_unhandled_input_source_controller 2
#define Observable_Event_unhandled_input_source_environ 3
#define Observable_Event_unhandled_input_dest_env 0
#define Observable_Event_unhandled_input_dest_actuator 1
#define Observable_Event_unhandled_input_dest_controller 2
#define Observable_Event_unhandled_input_dest_environ 3
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_actuator_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_ping_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_ping_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_pong_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_pong_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_PRESENT 1
#define Observable_event_unhandled_input_event_selection_actuator_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_in_pong_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_in_selection_pong_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define Observable_event_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define Observable_Event_unhandled_input_event_controller_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_ping_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_selection_ping_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_PRESENT 2
#define Observable_event_unhandled_input_event_selection_controller_PRESENT 2
#define Observable_Event_unhandled_input_event_environ_NONE 0
#define Observable_Event_unhandled_input_event_environ_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define Observable_event_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define Observable_Event_unhandled_input_event_environ_msg_out_PRESENT 1
#define Observable_event_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define Observable_Event_unhandled_input_event_environ_PRESENT 3
#define Observable_event_unhandled_input_event_selection_environ_PRESENT 3
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_env 0
#define Events_Ty_elem_input_event_source_actuator 1
#define Events_Ty_elem_input_event_source_controller 2
#define Events_Ty_elem_input_event_source_environ 3
#define Events_Ty_elem_input_event_dest_env 0
#define Events_Ty_elem_input_event_dest_actuator 1
#define Events_Ty_elem_input_event_dest_controller 2
#define Events_Ty_elem_input_event_dest_environ 3
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_actuator_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_ping_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_pong_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_PRESENT 1
#define Events_ty_elem_input_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_in_pong_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_input_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_ping_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_PRESENT 2
#define Events_ty_elem_input_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_input_event_event_environ_NONE 0
#define Events_Ty_elem_input_event_event_environ_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_input_event_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_input_event_event_environ_PRESENT 3
#define Events_ty_elem_input_event_event_selection_environ_PRESENT 3
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_env 0
#define Events_Ty_elem_output_event_source_actuator 1
#define Events_Ty_elem_output_event_source_controller 2
#define Events_Ty_elem_output_event_source_environ 3
#define Events_Ty_elem_output_event_dest_env 0
#define Events_Ty_elem_output_event_dest_actuator 1
#define Events_Ty_elem_output_event_dest_controller 2
#define Events_Ty_elem_output_event_dest_environ 3
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_actuator_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_ping_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_pong_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_PRESENT 1
#define Events_ty_elem_output_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_in_pong_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_in_selection_pong_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_output_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_ping_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_selection_ping_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_PRESENT 2
#define Events_ty_elem_output_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_output_event_event_environ_NONE 0
#define Events_Ty_elem_output_event_event_environ_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_output_event_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_output_event_event_environ_PRESENT 3
#define Events_ty_elem_output_event_event_selection_environ_PRESENT 3
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_env 0
#define Events_Ty_elem_unhandled_input_source_actuator 1
#define Events_Ty_elem_unhandled_input_source_controller 2
#define Events_Ty_elem_unhandled_input_source_environ 3
#define Events_Ty_elem_unhandled_input_dest_env 0
#define Events_Ty_elem_unhandled_input_dest_actuator 1
#define Events_Ty_elem_unhandled_input_dest_controller 2
#define Events_Ty_elem_unhandled_input_dest_environ 3
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_ping_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_pong_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_pong_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_ping_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_controller_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_environ_NONE 0
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define Events_ty_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define Events_ty_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_environ_PRESENT 3
#define Events_ty_elem_unhandled_input_event_selection_environ_PRESENT 3
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_queue_elem_NONE 0
#define System_State_actuator_queue_elem_no_event_PRESENT 1
#define System_state_actuator_queue_elem_selection_no_event_PRESENT 1
#define System_State_actuator_queue_elem_system_startup_PRESENT 2
#define System_state_actuator_queue_elem_selection_system_startup_PRESENT 2
#define System_State_actuator_queue_elem_input_event_source_env 0
#define System_State_actuator_queue_elem_input_event_source_actuator 1
#define System_State_actuator_queue_elem_input_event_source_controller 2
#define System_State_actuator_queue_elem_input_event_source_environ 3
#define System_State_actuator_queue_elem_input_event_dest_env 0
#define System_State_actuator_queue_elem_input_event_dest_actuator 1
#define System_State_actuator_queue_elem_input_event_dest_controller 2
#define System_State_actuator_queue_elem_input_event_dest_environ 3
#define System_State_actuator_queue_elem_input_event_event_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_environ_NONE 0
#define System_State_actuator_queue_elem_input_event_event_environ_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_environ_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_environ_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_selection_environ_PRESENT 3
#define System_State_actuator_queue_elem_input_event_PRESENT 3
#define System_state_actuator_queue_elem_selection_input_event_PRESENT 3
#define System_State_actuator_queue_elem_output_event_source_env 0
#define System_State_actuator_queue_elem_output_event_source_actuator 1
#define System_State_actuator_queue_elem_output_event_source_controller 2
#define System_State_actuator_queue_elem_output_event_source_environ 3
#define System_State_actuator_queue_elem_output_event_dest_env 0
#define System_State_actuator_queue_elem_output_event_dest_actuator 1
#define System_State_actuator_queue_elem_output_event_dest_controller 2
#define System_State_actuator_queue_elem_output_event_dest_environ 3
#define System_State_actuator_queue_elem_output_event_event_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_environ_NONE 0
#define System_State_actuator_queue_elem_output_event_event_environ_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_environ_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_environ_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_selection_environ_PRESENT 3
#define System_State_actuator_queue_elem_output_event_PRESENT 4
#define System_state_actuator_queue_elem_selection_output_event_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_source_env 0
#define System_State_actuator_queue_elem_unhandled_input_source_actuator 1
#define System_State_actuator_queue_elem_unhandled_input_source_controller 2
#define System_State_actuator_queue_elem_unhandled_input_source_environ 3
#define System_State_actuator_queue_elem_unhandled_input_dest_env 0
#define System_State_actuator_queue_elem_unhandled_input_dest_actuator 1
#define System_State_actuator_queue_elem_unhandled_input_dest_controller 2
#define System_State_actuator_queue_elem_unhandled_input_dest_environ 3
#define System_State_actuator_queue_elem_unhandled_input_event_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_environ_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_environ_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_selection_environ_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_PRESENT 5
#define System_state_actuator_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_queue_elem_NONE 0
#define System_State_controller_queue_elem_no_event_PRESENT 1
#define System_state_controller_queue_elem_selection_no_event_PRESENT 1
#define System_State_controller_queue_elem_system_startup_PRESENT 2
#define System_state_controller_queue_elem_selection_system_startup_PRESENT 2
#define System_State_controller_queue_elem_input_event_source_env 0
#define System_State_controller_queue_elem_input_event_source_actuator 1
#define System_State_controller_queue_elem_input_event_source_controller 2
#define System_State_controller_queue_elem_input_event_source_environ 3
#define System_State_controller_queue_elem_input_event_dest_env 0
#define System_State_controller_queue_elem_input_event_dest_actuator 1
#define System_State_controller_queue_elem_input_event_dest_controller 2
#define System_State_controller_queue_elem_input_event_dest_environ 3
#define System_State_controller_queue_elem_input_event_event_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_environ_NONE 0
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_environ_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_input_event_PRESENT 3
#define System_state_controller_queue_elem_selection_input_event_PRESENT 3
#define System_State_controller_queue_elem_output_event_source_env 0
#define System_State_controller_queue_elem_output_event_source_actuator 1
#define System_State_controller_queue_elem_output_event_source_controller 2
#define System_State_controller_queue_elem_output_event_source_environ 3
#define System_State_controller_queue_elem_output_event_dest_env 0
#define System_State_controller_queue_elem_output_event_dest_actuator 1
#define System_State_controller_queue_elem_output_event_dest_controller 2
#define System_State_controller_queue_elem_output_event_dest_environ 3
#define System_State_controller_queue_elem_output_event_event_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_environ_NONE 0
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_environ_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_output_event_PRESENT 4
#define System_state_controller_queue_elem_selection_output_event_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_source_env 0
#define System_State_controller_queue_elem_unhandled_input_source_actuator 1
#define System_State_controller_queue_elem_unhandled_input_source_controller 2
#define System_State_controller_queue_elem_unhandled_input_source_environ 3
#define System_State_controller_queue_elem_unhandled_input_dest_env 0
#define System_State_controller_queue_elem_unhandled_input_dest_actuator 1
#define System_State_controller_queue_elem_unhandled_input_dest_controller 2
#define System_State_controller_queue_elem_unhandled_input_dest_environ 3
#define System_State_controller_queue_elem_unhandled_input_event_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_ping_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_pong_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_pong_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_test_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_ping_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_environ_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_environ_msg_out_selection_test_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_environ_selection_msg_out_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_environ_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_selection_environ_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_PRESENT 5
#define System_state_controller_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_state_wait 0
#define System_State_controller_state_wait 0
#define System_State_controller_state_operation 1
typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_param param;
}

typedef Actuator_Event_msg_in_input_none {
    bit dummy;
}

typedef Actuator_Event_msg_in_ping {
    Actuator_Event_msg_in_ping_p1 p1;
}

typedef Actuator_Event_msg_out_pong {
    Actuator_Event_msg_out_pong_p1 p1;
}

typedef Controller_Context {
    Controller_Context_state state;
    Controller_Context_init_done init_done;
    Controller_Context_test_param test_param;
    Controller_Context_ping_param ping_param;
    Controller_Context_pong_param pong_param;
}

typedef Controller_Event_msg_in_input_none {
    bit dummy;
}

typedef Controller_Event_msg_in_pong {
    Controller_Event_msg_in_pong_p1 p1;
}

typedef Controller_Event_msg_in_test {
    Controller_Event_msg_in_test_p1 p1;
}

typedef Controller_Event_msg_out_ping {
    Controller_Event_msg_out_ping_p1 p1;
}

typedef Environ_Event_msg_out_test {
    Environ_Event_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_ping {
    Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_pong {
    Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_pong {
    Events_Ty_elem_input_event_event_controller_msg_in_pong_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_test {
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_ping {
    Events_Ty_elem_input_event_event_controller_msg_out_ping_p1 p1;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out_test {
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_ping {
    Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_pong {
    Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_pong {
    Events_Ty_elem_output_event_event_controller_msg_in_pong_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_test {
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_ping {
    Events_Ty_elem_output_event_event_controller_msg_out_ping_p1 p1;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out_test {
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_pong {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_test {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_ping {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out_test {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef Function_Event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_actuator_msg_in_ping {
    Function_Event_actuator_msg_in_ping_p1 p1;
}

typedef Function_Event_actuator_msg_out_pong {
    Function_Event_actuator_msg_out_pong_p1 p1;
}

typedef Function_Event_controller_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_controller_msg_in_pong {
    Function_Event_controller_msg_in_pong_p1 p1;
}

typedef Function_Event_controller_msg_in_test {
    Function_Event_controller_msg_in_test_p1 p1;
}

typedef Function_Event_controller_msg_out_ping {
    Function_Event_controller_msg_out_ping_p1 p1;
}

typedef Function_Event_environ_msg_out_test {
    Function_Event_environ_msg_out_test_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_actuator_msg_in_ping {
    Interface_Event_event_actuator_msg_in_ping_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out_pong {
    Interface_Event_event_actuator_msg_out_pong_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_pong {
    Interface_Event_event_controller_msg_in_pong_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_test {
    Interface_Event_event_controller_msg_in_test_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_ping {
    Interface_Event_event_controller_msg_out_ping_p1 p1;
}

typedef Interface_Event_event_environ_msg_out_test {
    Interface_Event_event_environ_msg_out_test_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_actuator_msg_in_ping {
    Named_Function_Event_event_actuator_msg_in_ping_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out_pong {
    Named_Function_Event_event_actuator_msg_out_pong_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_pong {
    Named_Function_Event_event_controller_msg_in_pong_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_test {
    Named_Function_Event_event_controller_msg_in_test_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_ping {
    Named_Function_Event_event_controller_msg_out_ping_p1 p1;
}

typedef Named_Function_Event_event_environ_msg_out_test {
    Named_Function_Event_event_environ_msg_out_test_p1 p1;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_actuator_msg_in_ping {
    Observable_Event_input_event_event_actuator_msg_in_ping_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out_pong {
    Observable_Event_input_event_event_actuator_msg_out_pong_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_pong {
    Observable_Event_input_event_event_controller_msg_in_pong_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_test {
    Observable_Event_input_event_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_ping {
    Observable_Event_input_event_event_controller_msg_out_ping_p1 p1;
}

typedef Observable_Event_input_event_event_environ_msg_out_test {
    Observable_Event_input_event_event_environ_msg_out_test_p1 p1;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_ping {
    Observable_Event_output_event_event_actuator_msg_in_ping_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out_pong {
    Observable_Event_output_event_event_actuator_msg_out_pong_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_pong {
    Observable_Event_output_event_event_controller_msg_in_pong_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_test {
    Observable_Event_output_event_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_ping {
    Observable_Event_output_event_event_controller_msg_out_ping_p1 p1;
}

typedef Observable_Event_output_event_event_environ_msg_out_test {
    Observable_Event_output_event_event_environ_msg_out_test_p1 p1;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_ping {
    Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_pong {
    Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_pong {
    Observable_Event_unhandled_input_event_controller_msg_in_pong_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_test {
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_ping {
    Observable_Event_unhandled_input_event_controller_msg_out_ping_p1 p1;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out_test {
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef Observer_Context {
    Observer_Context_state state;
    Observer_Context_init_done init_done;
}

typedef System_State_actuator {
    System_State_actuator_state state;
    System_State_actuator_init_done init_done;
    System_State_actuator_param param;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_test {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_environ_msg_out_test {
    System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_actuator_queue_elem_no_event {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_test {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_environ_msg_out_test {
    System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_actuator_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test {
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller {
    System_State_controller_state state;
    System_State_controller_init_done init_done;
    System_State_controller_test_param test_param;
    System_State_controller_ping_param ping_param;
    System_State_controller_pong_param pong_param;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_pong {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_test {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_ping {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out_test {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller_queue_elem_no_event {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_pong {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_test {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_ping {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out_test {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1 p1;
}

typedef System_State_controller_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1 p1;
}

typedef T_Null_Record {
    bit dummy;
}

typedef Actuator_Event_msg_in_data {
    Actuator_Event_msg_in_input_none input_none;
    Actuator_Event_msg_in_ping ping;
}

typedef Actuator_Event_msg_out_data {
    Actuator_Event_msg_out_pong pong;
}

typedef Controller_Event_msg_in_data {
    Controller_Event_msg_in_input_none input_none;
    Controller_Event_msg_in_pong pong;
    Controller_Event_msg_in_test test;
}

typedef Controller_Event_msg_out_data {
    Controller_Event_msg_out_ping ping;
}

typedef Environ_Event_msg_out_data {
    Environ_Event_msg_out_test test;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_actuator_msg_in_ping ping;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_data {
    Events_Ty_elem_input_event_event_actuator_msg_out_pong pong;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_data {
    Events_Ty_elem_input_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_controller_msg_in_pong pong;
    Events_Ty_elem_input_event_event_controller_msg_in_test test;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_data {
    Events_Ty_elem_input_event_event_controller_msg_out_ping ping;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out_data {
    Events_Ty_elem_input_event_event_environ_msg_out_test test;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_actuator_msg_in_ping ping;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_data {
    Events_Ty_elem_output_event_event_actuator_msg_out_pong pong;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_data {
    Events_Ty_elem_output_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_controller_msg_in_pong pong;
    Events_Ty_elem_output_event_event_controller_msg_in_test test;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_data {
    Events_Ty_elem_output_event_event_controller_msg_out_ping ping;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out_data {
    Events_Ty_elem_output_event_event_environ_msg_out_test test;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping ping;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong pong;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_pong pong;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test test;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_ping ping;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out_data {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef Function_Event_actuator_msg_in_data {
    Function_Event_actuator_msg_in_input_none input_none;
    Function_Event_actuator_msg_in_ping ping;
}

typedef Function_Event_actuator_msg_out_data {
    Function_Event_actuator_msg_out_pong pong;
}

typedef Function_Event_controller_msg_in_data {
    Function_Event_controller_msg_in_input_none input_none;
    Function_Event_controller_msg_in_pong pong;
    Function_Event_controller_msg_in_test test;
}

typedef Function_Event_controller_msg_out_data {
    Function_Event_controller_msg_out_ping ping;
}

typedef Function_Event_environ_msg_out_data {
    Function_Event_environ_msg_out_test test;
}

typedef Interface_Event_event_actuator_msg_in_data {
    Interface_Event_event_actuator_msg_in_input_none input_none;
    Interface_Event_event_actuator_msg_in_ping ping;
}

typedef Interface_Event_event_actuator_msg_out_data {
    Interface_Event_event_actuator_msg_out_pong pong;
}

typedef Interface_Event_event_controller_msg_in_data {
    Interface_Event_event_controller_msg_in_input_none input_none;
    Interface_Event_event_controller_msg_in_pong pong;
    Interface_Event_event_controller_msg_in_test test;
}

typedef Interface_Event_event_controller_msg_out_data {
    Interface_Event_event_controller_msg_out_ping ping;
}

typedef Interface_Event_event_environ_msg_out_data {
    Interface_Event_event_environ_msg_out_test test;
}

typedef Named_Function_Event_event_actuator_msg_in_data {
    Named_Function_Event_event_actuator_msg_in_input_none input_none;
    Named_Function_Event_event_actuator_msg_in_ping ping;
}

typedef Named_Function_Event_event_actuator_msg_out_data {
    Named_Function_Event_event_actuator_msg_out_pong pong;
}

typedef Named_Function_Event_event_controller_msg_in_data {
    Named_Function_Event_event_controller_msg_in_input_none input_none;
    Named_Function_Event_event_controller_msg_in_pong pong;
    Named_Function_Event_event_controller_msg_in_test test;
}

typedef Named_Function_Event_event_controller_msg_out_data {
    Named_Function_Event_event_controller_msg_out_ping ping;
}

typedef Named_Function_Event_event_environ_msg_out_data {
    Named_Function_Event_event_environ_msg_out_test test;
}

typedef Observable_Event_input_event_event_actuator_msg_in_data {
    Observable_Event_input_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_input_event_event_actuator_msg_in_ping ping;
}

typedef Observable_Event_input_event_event_actuator_msg_out_data {
    Observable_Event_input_event_event_actuator_msg_out_pong pong;
}

typedef Observable_Event_input_event_event_controller_msg_in_data {
    Observable_Event_input_event_event_controller_msg_in_input_none input_none;
    Observable_Event_input_event_event_controller_msg_in_pong pong;
    Observable_Event_input_event_event_controller_msg_in_test test;
}

typedef Observable_Event_input_event_event_controller_msg_out_data {
    Observable_Event_input_event_event_controller_msg_out_ping ping;
}

typedef Observable_Event_input_event_event_environ_msg_out_data {
    Observable_Event_input_event_event_environ_msg_out_test test;
}

typedef Observable_Event_output_event_event_actuator_msg_in_data {
    Observable_Event_output_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_output_event_event_actuator_msg_in_ping ping;
}

typedef Observable_Event_output_event_event_actuator_msg_out_data {
    Observable_Event_output_event_event_actuator_msg_out_pong pong;
}

typedef Observable_Event_output_event_event_controller_msg_in_data {
    Observable_Event_output_event_event_controller_msg_in_input_none input_none;
    Observable_Event_output_event_event_controller_msg_in_pong pong;
    Observable_Event_output_event_event_controller_msg_in_test test;
}

typedef Observable_Event_output_event_event_controller_msg_out_data {
    Observable_Event_output_event_event_controller_msg_out_ping ping;
}

typedef Observable_Event_output_event_event_environ_msg_out_data {
    Observable_Event_output_event_event_environ_msg_out_test test;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_actuator_msg_in_ping ping;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_data {
    Observable_Event_unhandled_input_event_actuator_msg_out_pong pong;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_data {
    Observable_Event_unhandled_input_event_controller_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_controller_msg_in_pong pong;
    Observable_Event_unhandled_input_event_controller_msg_in_test test;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_data {
    Observable_Event_unhandled_input_event_controller_msg_out_ping ping;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out_data {
    Observable_Event_unhandled_input_event_environ_msg_out_test test;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping ping;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong pong;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong pong;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_test test;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping ping;
}

typedef System_State_actuator_queue_elem_input_event_event_environ_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_environ_msg_out_test test;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping ping;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong pong;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong pong;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_test test;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping ping;
}

typedef System_State_actuator_queue_elem_output_event_event_environ_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_environ_msg_out_test test;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping ping;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong pong;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong pong;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test test;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping ping;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping ping;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong pong;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_pong pong;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test test;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_ping ping;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out_data {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping ping;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong pong;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_pong pong;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test test;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_ping ping;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out_data {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test test;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping ping;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong pong;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong pong;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test test;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping ping;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test test;
}

typedef Actuator_Event_msg_in {
    Actuator_Event_msg_in_data data;
    int selection;
}

typedef Actuator_Event_msg_out {
    Actuator_Event_msg_out_data data;
    int selection;
}

typedef Controller_Event_msg_in {
    Controller_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out {
    Controller_Event_msg_out_data data;
    int selection;
}

typedef Environ_Event_msg_out {
    Environ_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in {
    Events_Ty_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out {
    Events_Ty_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in {
    Events_Ty_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out {
    Events_Ty_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_environ_msg_out {
    Events_Ty_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in {
    Events_Ty_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out {
    Events_Ty_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in {
    Events_Ty_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out {
    Events_Ty_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_environ_msg_out {
    Events_Ty_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_environ_msg_out {
    Events_Ty_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in {
    Function_Event_actuator_msg_in_data data;
    int selection;
}

typedef Function_Event_actuator_msg_out {
    Function_Event_actuator_msg_out_data data;
    int selection;
}

typedef Function_Event_controller_msg_in {
    Function_Event_controller_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out {
    Function_Event_controller_msg_out_data data;
    int selection;
}

typedef Function_Event_environ_msg_out {
    Function_Event_environ_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in {
    Interface_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_out {
    Interface_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_in {
    Interface_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out {
    Interface_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_environ_msg_out {
    Interface_Event_event_environ_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in {
    Named_Function_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_out {
    Named_Function_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_in {
    Named_Function_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out {
    Named_Function_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_environ_msg_out {
    Named_Function_Event_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in {
    Observable_Event_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_out {
    Observable_Event_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_in {
    Observable_Event_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out {
    Observable_Event_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_environ_msg_out {
    Observable_Event_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in {
    Observable_Event_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_out {
    Observable_Event_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_in {
    Observable_Event_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out {
    Observable_Event_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_environ_msg_out {
    Observable_Event_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in {
    Observable_Event_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out {
    Observable_Event_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in {
    Observable_Event_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out {
    Observable_Event_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_environ_msg_out {
    Observable_Event_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_environ_msg_out {
    System_State_actuator_queue_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_environ_msg_out {
    System_State_actuator_queue_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_environ_msg_out {
    System_State_controller_queue_elem_input_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_environ_msg_out {
    System_State_controller_queue_elem_output_event_event_environ_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_data data;
    int selection;
}

typedef Actuator_Event_data {
    Actuator_Event_msg_in msg_in;
    Actuator_Event_msg_out msg_out;
}

typedef Controller_Event_data {
    Controller_Event_msg_in msg_in;
    Controller_Event_msg_out msg_out;
}

typedef Environ_Event_data {
    Environ_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_actuator_data {
    Events_Ty_elem_input_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_input_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_controller_data {
    Events_Ty_elem_input_event_event_controller_msg_in msg_in;
    Events_Ty_elem_input_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_environ_data {
    Events_Ty_elem_input_event_event_environ_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_actuator_data {
    Events_Ty_elem_output_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_output_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_controller_data {
    Events_Ty_elem_output_event_event_controller_msg_in msg_in;
    Events_Ty_elem_output_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_environ_data {
    Events_Ty_elem_output_event_event_environ_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_controller_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_environ_data {
    Events_Ty_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef Function_Event_actuator_data {
    Function_Event_actuator_msg_in msg_in;
    Function_Event_actuator_msg_out msg_out;
}

typedef Function_Event_controller_data {
    Function_Event_controller_msg_in msg_in;
    Function_Event_controller_msg_out msg_out;
}

typedef Function_Event_environ_data {
    Function_Event_environ_msg_out msg_out;
}

typedef Interface_Event_event_actuator_data {
    Interface_Event_event_actuator_msg_in msg_in;
    Interface_Event_event_actuator_msg_out msg_out;
}

typedef Interface_Event_event_controller_data {
    Interface_Event_event_controller_msg_in msg_in;
    Interface_Event_event_controller_msg_out msg_out;
}

typedef Interface_Event_event_environ_data {
    Interface_Event_event_environ_msg_out msg_out;
}

typedef Named_Function_Event_event_actuator_data {
    Named_Function_Event_event_actuator_msg_in msg_in;
    Named_Function_Event_event_actuator_msg_out msg_out;
}

typedef Named_Function_Event_event_controller_data {
    Named_Function_Event_event_controller_msg_in msg_in;
    Named_Function_Event_event_controller_msg_out msg_out;
}

typedef Named_Function_Event_event_environ_data {
    Named_Function_Event_event_environ_msg_out msg_out;
}

typedef Observable_Event_input_event_event_actuator_data {
    Observable_Event_input_event_event_actuator_msg_in msg_in;
    Observable_Event_input_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_input_event_event_controller_data {
    Observable_Event_input_event_event_controller_msg_in msg_in;
    Observable_Event_input_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_input_event_event_environ_data {
    Observable_Event_input_event_event_environ_msg_out msg_out;
}

typedef Observable_Event_output_event_event_actuator_data {
    Observable_Event_output_event_event_actuator_msg_in msg_in;
    Observable_Event_output_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_output_event_event_controller_data {
    Observable_Event_output_event_event_controller_msg_in msg_in;
    Observable_Event_output_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_output_event_event_environ_data {
    Observable_Event_output_event_event_environ_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_actuator_data {
    Observable_Event_unhandled_input_event_actuator_msg_in msg_in;
    Observable_Event_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_controller_data {
    Observable_Event_unhandled_input_event_controller_msg_in msg_in;
    Observable_Event_unhandled_input_event_controller_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_environ_data {
    Observable_Event_unhandled_input_event_environ_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_environ_data {
    System_State_actuator_queue_elem_input_event_event_environ_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_environ_data {
    System_State_actuator_queue_elem_output_event_event_environ_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_environ_data {
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_controller_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_environ_data {
    System_State_controller_queue_elem_input_event_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_controller_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_environ_data {
    System_State_controller_queue_elem_output_event_event_environ_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ_data {
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out msg_out;
}

typedef Actuator_Event {
    Actuator_Event_data data;
    int selection;
}

typedef Controller_Event {
    Controller_Event_data data;
    int selection;
}

typedef Environ_Event {
    Environ_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator {
    Events_Ty_elem_input_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller {
    Events_Ty_elem_input_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_environ {
    Events_Ty_elem_input_event_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator {
    Events_Ty_elem_output_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller {
    Events_Ty_elem_output_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_environ {
    Events_Ty_elem_output_event_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator {
    Events_Ty_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller {
    Events_Ty_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_environ {
    Events_Ty_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef Function_Event_actuator {
    Function_Event_actuator_data data;
    int selection;
}

typedef Function_Event_controller {
    Function_Event_controller_data data;
    int selection;
}

typedef Function_Event_environ {
    Function_Event_environ_data data;
    int selection;
}

typedef Interface_Event_event_actuator {
    Interface_Event_event_actuator_data data;
    int selection;
}

typedef Interface_Event_event_controller {
    Interface_Event_event_controller_data data;
    int selection;
}

typedef Interface_Event_event_environ {
    Interface_Event_event_environ_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator {
    Named_Function_Event_event_actuator_data data;
    int selection;
}

typedef Named_Function_Event_event_controller {
    Named_Function_Event_event_controller_data data;
    int selection;
}

typedef Named_Function_Event_event_environ {
    Named_Function_Event_event_environ_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator {
    Observable_Event_input_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller {
    Observable_Event_input_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_input_event_event_environ {
    Observable_Event_input_event_event_environ_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator {
    Observable_Event_output_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller {
    Observable_Event_output_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_output_event_event_environ {
    Observable_Event_output_event_event_environ_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator {
    Observable_Event_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller {
    Observable_Event_unhandled_input_event_controller_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_environ {
    Observable_Event_unhandled_input_event_environ_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator {
    System_State_actuator_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller {
    System_State_actuator_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_environ {
    System_State_actuator_queue_elem_input_event_event_environ_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator {
    System_State_actuator_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller {
    System_State_actuator_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_environ {
    System_State_actuator_queue_elem_output_event_event_environ_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller {
    System_State_actuator_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_environ {
    System_State_actuator_queue_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator {
    System_State_controller_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller {
    System_State_controller_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_environ {
    System_State_controller_queue_elem_input_event_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator {
    System_State_controller_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller {
    System_State_controller_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_environ {
    System_State_controller_queue_elem_output_event_event_environ_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator {
    System_State_controller_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller {
    System_State_controller_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_environ {
    System_State_controller_queue_elem_unhandled_input_event_environ_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_actuator actuator;
    Events_Ty_elem_input_event_event_controller controller;
    Events_Ty_elem_input_event_event_environ environ;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_actuator actuator;
    Events_Ty_elem_output_event_event_controller controller;
    Events_Ty_elem_output_event_event_environ environ;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_actuator actuator;
    Events_Ty_elem_unhandled_input_event_controller controller;
    Events_Ty_elem_unhandled_input_event_environ environ;
}

typedef Function_Event_data {
    Function_Event_actuator actuator;
    Function_Event_controller controller;
    Function_Event_environ environ;
}

typedef Interface_Event_event_data {
    Interface_Event_event_actuator actuator;
    Interface_Event_event_controller controller;
    Interface_Event_event_environ environ;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_actuator actuator;
    Named_Function_Event_event_controller controller;
    Named_Function_Event_event_environ environ;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_actuator actuator;
    Observable_Event_input_event_event_controller controller;
    Observable_Event_input_event_event_environ environ;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_actuator actuator;
    Observable_Event_output_event_event_controller controller;
    Observable_Event_output_event_event_environ environ;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_actuator actuator;
    Observable_Event_unhandled_input_event_controller controller;
    Observable_Event_unhandled_input_event_environ environ;
}

typedef System_State_actuator_queue_elem_input_event_event_data {
    System_State_actuator_queue_elem_input_event_event_actuator actuator;
    System_State_actuator_queue_elem_input_event_event_controller controller;
    System_State_actuator_queue_elem_input_event_event_environ environ;
}

typedef System_State_actuator_queue_elem_output_event_event_data {
    System_State_actuator_queue_elem_output_event_event_actuator actuator;
    System_State_actuator_queue_elem_output_event_event_controller controller;
    System_State_actuator_queue_elem_output_event_event_environ environ;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator actuator;
    System_State_actuator_queue_elem_unhandled_input_event_controller controller;
    System_State_actuator_queue_elem_unhandled_input_event_environ environ;
}

typedef System_State_controller_queue_elem_input_event_event_data {
    System_State_controller_queue_elem_input_event_event_actuator actuator;
    System_State_controller_queue_elem_input_event_event_controller controller;
    System_State_controller_queue_elem_input_event_event_environ environ;
}

typedef System_State_controller_queue_elem_output_event_event_data {
    System_State_controller_queue_elem_output_event_event_actuator actuator;
    System_State_controller_queue_elem_output_event_event_controller controller;
    System_State_controller_queue_elem_output_event_event_environ environ;
}

typedef System_State_controller_queue_elem_unhandled_input_event_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator actuator;
    System_State_controller_queue_elem_unhandled_input_event_controller controller;
    System_State_controller_queue_elem_unhandled_input_event_environ environ;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event {
    System_State_actuator_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event {
    System_State_actuator_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event {
    System_State_actuator_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event {
    System_State_controller_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event {
    System_State_controller_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event {
    System_State_controller_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_actuator_queue_elem_input_event {
    System_State_actuator_queue_elem_input_event_source source;
    System_State_actuator_queue_elem_input_event_dest dest;
    System_State_actuator_queue_elem_input_event_event event;
}

typedef System_State_actuator_queue_elem_output_event {
    System_State_actuator_queue_elem_output_event_source source;
    System_State_actuator_queue_elem_output_event_dest dest;
    System_State_actuator_queue_elem_output_event_event event;
}

typedef System_State_actuator_queue_elem_unhandled_input {
    System_State_actuator_queue_elem_unhandled_input_source source;
    System_State_actuator_queue_elem_unhandled_input_dest dest;
    System_State_actuator_queue_elem_unhandled_input_event event;
}

typedef System_State_controller_queue_elem_input_event {
    System_State_controller_queue_elem_input_event_source source;
    System_State_controller_queue_elem_input_event_dest dest;
    System_State_controller_queue_elem_input_event_event event;
}

typedef System_State_controller_queue_elem_output_event {
    System_State_controller_queue_elem_output_event_source source;
    System_State_controller_queue_elem_output_event_dest dest;
    System_State_controller_queue_elem_output_event_event event;
}

typedef System_State_controller_queue_elem_unhandled_input {
    System_State_controller_queue_elem_unhandled_input_source source;
    System_State_controller_queue_elem_unhandled_input_dest dest;
    System_State_controller_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_actuator_queue_elem_data {
    System_State_actuator_queue_elem_no_event no_event;
    System_State_actuator_queue_elem_system_startup system_startup;
    System_State_actuator_queue_elem_input_event input_event;
    System_State_actuator_queue_elem_output_event output_event;
    System_State_actuator_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_controller_queue_elem_data {
    System_State_controller_queue_elem_no_event no_event;
    System_State_controller_queue_elem_system_startup system_startup;
    System_State_controller_queue_elem_input_event input_event;
    System_State_controller_queue_elem_output_event output_event;
    System_State_controller_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem {
    System_State_actuator_queue_elem_data data;
    int selection;
}

typedef System_State_controller_queue_elem {
    System_State_controller_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_actuator_queue {
    System_State_actuator_queue_elem data[2];
    int length;
}

typedef System_State_controller_queue {
    System_State_controller_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_actuator_queue actuator_queue;
    System_State_controller_queue controller_queue;
    System_State_actuator actuator;
    System_State_controller controller;
}

Observable_Event nothing;
inline Observer_States_assign_value(dst, src)
{
    dst = src;
    Observer_States_range_check(dst);
}
inline Observer_States_range_check(Observer_States_vc)
{
    assert(((Observer_States_vc == Observer_States_ign) || (Observer_States_vc == Observer_States_wait)));
}
inline Observer_Context_state_assign_value(dst, src)
{
    dst = src;
    Observer_Context_state_range_check(dst);
}
inline Observer_Context_state_range_check(Observer_Context_state_vc)
{
    assert(((Observer_Context_state_vc == Observer_Context_state_ign) || (Observer_Context_state_vc == Observer_Context_state_wait)));
}
inline Observer_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Observer_Context_init_done_range_check(dst);
}
inline Observer_Context_init_done_range_check(Observer_Context_init_done_vc)
{
    assert(true);
}
inline Observer_Context_assign_value(dst, src)
{
    Observer_Context_state_assign_value(dst.state, src.state);
    Observer_Context_init_done_assign_value(dst.init_done, src.init_done);
}
inline Observer_Actuator_Event_Msg_In_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Actuator_Event_Msg_In_Selection_range_check(dst);
}
inline Observer_Actuator_Event_Msg_In_Selection_range_check(Observer_Actuator_Event_Msg_In_Selection_vc)
{
    assert(((Observer_Actuator_Event_Msg_In_Selection_vc == Observer_Actuator_Event_Msg_In_Selection_input_none_present) || (Observer_Actuator_Event_Msg_In_Selection_vc == Observer_Actuator_Event_Msg_In_Selection_ping_present)));
}
inline Observer_Actuator_Event_Msg_Out_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Actuator_Event_Msg_Out_Selection_range_check(dst);
}
inline Observer_Actuator_Event_Msg_Out_Selection_range_check(Observer_Actuator_Event_Msg_Out_Selection_vc)
{
    assert((Observer_Actuator_Event_Msg_Out_Selection_vc == Observer_Actuator_Event_Msg_Out_Selection_pong_present));
}
inline Observer_Actuator_Event_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Actuator_Event_Selection_range_check(dst);
}
inline Observer_Actuator_Event_Selection_range_check(Observer_Actuator_Event_Selection_vc)
{
    assert(((Observer_Actuator_Event_Selection_vc == Observer_Actuator_Event_Selection_msg_in_present) || (Observer_Actuator_Event_Selection_vc == Observer_Actuator_Event_Selection_msg_out_present)));
}
inline Observer_Controller_Event_Msg_In_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Controller_Event_Msg_In_Selection_range_check(dst);
}
inline Observer_Controller_Event_Msg_In_Selection_range_check(Observer_Controller_Event_Msg_In_Selection_vc)
{
    assert((((Observer_Controller_Event_Msg_In_Selection_vc == Observer_Controller_Event_Msg_In_Selection_input_none_present) || (Observer_Controller_Event_Msg_In_Selection_vc == Observer_Controller_Event_Msg_In_Selection_pong_present)) || (Observer_Controller_Event_Msg_In_Selection_vc == Observer_Controller_Event_Msg_In_Selection_test_present)));
}
inline Observer_Controller_Event_Msg_Out_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Controller_Event_Msg_Out_Selection_range_check(dst);
}
inline Observer_Controller_Event_Msg_Out_Selection_range_check(Observer_Controller_Event_Msg_Out_Selection_vc)
{
    assert((Observer_Controller_Event_Msg_Out_Selection_vc == Observer_Controller_Event_Msg_Out_Selection_ping_present));
}
inline Observer_Controller_Event_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Controller_Event_Selection_range_check(dst);
}
inline Observer_Controller_Event_Selection_range_check(Observer_Controller_Event_Selection_vc)
{
    assert(((Observer_Controller_Event_Selection_vc == Observer_Controller_Event_Selection_msg_in_present) || (Observer_Controller_Event_Selection_vc == Observer_Controller_Event_Selection_msg_out_present)));
}
inline Observer_Environ_Event_Msg_Out_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Environ_Event_Msg_Out_Selection_range_check(dst);
}
inline Observer_Environ_Event_Msg_Out_Selection_range_check(Observer_Environ_Event_Msg_Out_Selection_vc)
{
    assert((Observer_Environ_Event_Msg_Out_Selection_vc == Observer_Environ_Event_Msg_Out_Selection_test_present));
}
inline Observer_Environ_Event_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Environ_Event_Selection_range_check(dst);
}
inline Observer_Environ_Event_Selection_range_check(Observer_Environ_Event_Selection_vc)
{
    assert((Observer_Environ_Event_Selection_vc == Observer_Environ_Event_Selection_msg_out_present));
}
inline Observer_Function_Event_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Function_Event_Selection_range_check(dst);
}
inline Observer_Function_Event_Selection_range_check(Observer_Function_Event_Selection_vc)
{
    assert((((Observer_Function_Event_Selection_vc == Observer_Function_Event_Selection_actuator_present) || (Observer_Function_Event_Selection_vc == Observer_Function_Event_Selection_controller_present)) || (Observer_Function_Event_Selection_vc == Observer_Function_Event_Selection_environ_present)));
}
inline Observer_Observable_Event_Selection_assign_value(dst, src)
{
    dst = src;
    Observer_Observable_Event_Selection_range_check(dst);
}
inline Observer_Observable_Event_Selection_range_check(Observer_Observable_Event_Selection_vc)
{
    assert((((((Observer_Observable_Event_Selection_vc == Observer_Observable_Event_Selection_no_event_present) || (Observer_Observable_Event_Selection_vc == Observer_Observable_Event_Selection_system_startup_present)) || (Observer_Observable_Event_Selection_vc == Observer_Observable_Event_Selection_input_event_present)) || (Observer_Observable_Event_Selection_vc == Observer_Observable_Event_Selection_output_event_present)) || (Observer_Observable_Event_Selection_vc == Observer_Observable_Event_Selection_unhandled_input_present)));
}
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert((Actuator_States_vc == Actuator_States_wait));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert((Actuator_Context_state_vc == Actuator_Context_state_wait));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_param_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_param_range_check(dst);
}
inline Actuator_Context_param_range_check(Actuator_Context_param_vc)
{
    assert(((Actuator_Context_param_vc >= 0) && (Actuator_Context_param_vc <= 10000)));
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_param_assign_value(dst.param, src.param);
}
inline Controller_States_assign_value(dst, src)
{
    dst = src;
    Controller_States_range_check(dst);
}
inline Controller_States_range_check(Controller_States_vc)
{
    assert(((Controller_States_vc == Controller_States_wait) || (Controller_States_vc == Controller_States_operation)));
}
inline Controller_Context_state_assign_value(dst, src)
{
    dst = src;
    Controller_Context_state_range_check(dst);
}
inline Controller_Context_state_range_check(Controller_Context_state_vc)
{
    assert(((Controller_Context_state_vc == Controller_Context_state_wait) || (Controller_Context_state_vc == Controller_Context_state_operation)));
}
inline Controller_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Controller_Context_init_done_range_check(dst);
}
inline Controller_Context_init_done_range_check(Controller_Context_init_done_vc)
{
    assert(true);
}
inline Controller_Context_test_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_test_param_range_check(dst);
}
inline Controller_Context_test_param_range_check(Controller_Context_test_param_vc)
{
    assert(((Controller_Context_test_param_vc >= 0) && (Controller_Context_test_param_vc <= 8)));
}
inline Controller_Context_ping_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_ping_param_range_check(dst);
}
inline Controller_Context_ping_param_range_check(Controller_Context_ping_param_vc)
{
    assert(((Controller_Context_ping_param_vc >= 0) && (Controller_Context_ping_param_vc <= 10000)));
}
inline Controller_Context_pong_param_assign_value(dst, src)
{
    dst = src;
    Controller_Context_pong_param_range_check(dst);
}
inline Controller_Context_pong_param_range_check(Controller_Context_pong_param_vc)
{
    assert(((Controller_Context_pong_param_vc >= 0) && (Controller_Context_pong_param_vc <= 10000)));
}
inline Controller_Context_assign_value(dst, src)
{
    Controller_Context_state_assign_value(dst.state, src.state);
    Controller_Context_init_done_assign_value(dst.init_done, src.init_done);
    Controller_Context_test_param_assign_value(dst.test_param, src.test_param);
    Controller_Context_ping_param_assign_value(dst.ping_param, src.ping_param);
    Controller_Context_pong_param_assign_value(dst.pong_param, src.pong_param);
}
inline MyInteger_assign_value(dst, src)
{
    dst = src;
    MyInteger_range_check(dst);
}
inline MyInteger_range_check(MyInteger_vc)
{
    assert(((MyInteger_vc >= 0) && (MyInteger_vc <= 10000)));
}
inline MyTestInteger_assign_value(dst, src)
{
    dst = src;
    MyTestInteger_range_check(dst);
}
inline MyTestInteger_range_check(MyTestInteger_vc)
{
    assert(((MyTestInteger_vc >= 0) && (MyTestInteger_vc <= 8)));
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline Environ_test_p1_assign_value(dst, src)
{
    dst = src;
    Environ_test_p1_range_check(dst);
}
inline Environ_test_p1_range_check(Environ_test_p1_vc)
{
    assert(((Environ_test_p1_vc >= 0) && (Environ_test_p1_vc <= 8)));
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert(((((PID_vc == PID_env) || (PID_vc == PID_actuator)) || (PID_vc == PID_controller)) || (PID_vc == PID_environ)));
}
inline Actuator_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_ping_p1_range_check(dst);
}
inline Actuator_Event_msg_in_ping_p1_range_check(Actuator_Event_msg_in_ping_p1_vc)
{
    assert(((Actuator_Event_msg_in_ping_p1_vc >= 0) && (Actuator_Event_msg_in_ping_p1_vc <= 10000)));
}
inline Actuator_Event_msg_in_ping_assign_value(dst, src)
{
    Actuator_Event_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_input_none_PRESENT);
        Actuator_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Actuator_Event_msg_in_ping_PRESENT);
        Actuator_Event_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_pong_p1_range_check(dst);
}
inline Actuator_Event_msg_out_pong_p1_range_check(Actuator_Event_msg_out_pong_p1_vc)
{
    assert(((Actuator_Event_msg_out_pong_p1_vc >= 0) && (Actuator_Event_msg_out_pong_p1_vc <= 10000)));
}
inline Actuator_Event_msg_out_pong_assign_value(dst, src)
{
    Actuator_Event_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_out_pong_PRESENT);
        Actuator_Event_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_PRESENT);
        Actuator_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Actuator_Event_msg_out_PRESENT);
        Actuator_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_pong_p1_range_check(dst);
}
inline Controller_Event_msg_in_pong_p1_range_check(Controller_Event_msg_in_pong_p1_vc)
{
    assert(((Controller_Event_msg_in_pong_p1_vc >= 0) && (Controller_Event_msg_in_pong_p1_vc <= 10000)));
}
inline Controller_Event_msg_in_pong_assign_value(dst, src)
{
    Controller_Event_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_test_p1_range_check(dst);
}
inline Controller_Event_msg_in_test_p1_range_check(Controller_Event_msg_in_test_p1_vc)
{
    assert(((Controller_Event_msg_in_test_p1_vc >= 0) && (Controller_Event_msg_in_test_p1_vc <= 8)));
}
inline Controller_Event_msg_in_test_assign_value(dst, src)
{
    Controller_Event_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_input_none_PRESENT);
        Controller_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Controller_Event_msg_in_pong_PRESENT);
        Controller_Event_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Controller_Event_msg_in_test_PRESENT);
        Controller_Event_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_ping_p1_range_check(dst);
}
inline Controller_Event_msg_out_ping_p1_range_check(Controller_Event_msg_out_ping_p1_vc)
{
    assert(((Controller_Event_msg_out_ping_p1_vc >= 0) && (Controller_Event_msg_out_ping_p1_vc <= 10000)));
}
inline Controller_Event_msg_out_ping_assign_value(dst, src)
{
    Controller_Event_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_ping_PRESENT);
        Controller_Event_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_PRESENT);
        Controller_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Controller_Event_msg_out_PRESENT);
        Controller_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Controller_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Environ_Event_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Environ_Event_msg_out_test_p1_range_check(dst);
}
inline Environ_Event_msg_out_test_p1_range_check(Environ_Event_msg_out_test_p1_vc)
{
    assert(((Environ_Event_msg_out_test_p1_vc >= 0) && (Environ_Event_msg_out_test_p1_vc <= 8)));
}
inline Environ_Event_msg_out_test_assign_value(dst, src)
{
    Environ_Event_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Environ_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Environ_Event_msg_out_test_PRESENT);
        Environ_Event_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Environ_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Environ_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Environ_Event_msg_out_PRESENT);
        Environ_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Environ_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Function_Event_actuator_msg_in_ping_p1_range_check(Function_Event_actuator_msg_in_ping_p1_vc)
{
    assert(((Function_Event_actuator_msg_in_ping_p1_vc >= 0) && (Function_Event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_ping_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_input_none_PRESENT);
        Function_Event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_actuator_msg_in_ping_PRESENT);
        Function_Event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Function_Event_actuator_msg_out_pong_p1_range_check(Function_Event_actuator_msg_out_pong_p1_vc)
{
    assert(((Function_Event_actuator_msg_out_pong_p1_vc >= 0) && (Function_Event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Function_Event_actuator_msg_out_pong_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_out_pong_PRESENT);
        Function_Event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_PRESENT);
        Function_Event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_actuator_msg_out_PRESENT);
        Function_Event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_pong_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_pong_p1_range_check(Function_Event_controller_msg_in_pong_p1_vc)
{
    assert(((Function_Event_controller_msg_in_pong_p1_vc >= 0) && (Function_Event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_in_pong_assign_value(dst, src)
{
    Function_Event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_test_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_test_p1_range_check(Function_Event_controller_msg_in_test_p1_vc)
{
    assert(((Function_Event_controller_msg_in_test_p1_vc >= 0) && (Function_Event_controller_msg_in_test_p1_vc <= 8)));
}
inline Function_Event_controller_msg_in_test_assign_value(dst, src)
{
    Function_Event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_input_none_PRESENT);
        Function_Event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_controller_msg_in_pong_PRESENT);
        Function_Event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Function_Event_controller_msg_in_test_PRESENT);
        Function_Event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_ping_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_ping_p1_range_check(Function_Event_controller_msg_out_ping_p1_vc)
{
    assert(((Function_Event_controller_msg_out_ping_p1_vc >= 0) && (Function_Event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_out_ping_assign_value(dst, src)
{
    Function_Event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_ping_PRESENT);
        Function_Event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_PRESENT);
        Function_Event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_controller_msg_out_PRESENT);
        Function_Event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_environ_msg_out_test_p1_range_check(dst);
}
inline Function_Event_environ_msg_out_test_p1_range_check(Function_Event_environ_msg_out_test_p1_vc)
{
    assert(((Function_Event_environ_msg_out_test_p1_vc >= 0) && (Function_Event_environ_msg_out_test_p1_vc <= 8)));
}
inline Function_Event_environ_msg_out_test_assign_value(dst, src)
{
    Function_Event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_environ_msg_out_test_PRESENT);
        Function_Event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Function_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_environ_msg_out_PRESENT);
        Function_Event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_PRESENT);
        Function_Event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Function_Event_controller_PRESENT);
        Function_Event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Function_Event_environ_PRESENT);
        Function_Event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i;
    for(i : 0 .. 79)
    {
        dst.data[i] = src.data[i];
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_ping_p1_range_check(Named_Function_Event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_ping_p1_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_input_none_PRESENT);
        Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_ping_PRESENT);
        Named_Function_Event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_pong_p1_range_check(Named_Function_Event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_out_pong_p1_vc >= 0) && (Named_Function_Event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_pong_PRESENT);
        Named_Function_Event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_PRESENT);
        Named_Function_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_PRESENT);
        Named_Function_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_pong_p1_range_check(Named_Function_Event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_pong_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_test_p1_range_check(Named_Function_Event_event_controller_msg_in_test_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_test_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Named_Function_Event_event_controller_msg_in_test_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_input_none_PRESENT);
        Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_pong_PRESENT);
        Named_Function_Event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_test_PRESENT);
        Named_Function_Event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_ping_p1_range_check(Named_Function_Event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_ping_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_ping_PRESENT);
        Named_Function_Event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_PRESENT);
        Named_Function_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_PRESENT);
        Named_Function_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Named_Function_Event_event_environ_msg_out_test_p1_range_check(Named_Function_Event_event_environ_msg_out_test_p1_vc)
{
    assert(((Named_Function_Event_event_environ_msg_out_test_p1_vc >= 0) && (Named_Function_Event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Named_Function_Event_event_environ_msg_out_test_assign_value(dst, src)
{
    Named_Function_Event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_environ_msg_out_test_PRESENT);
        Named_Function_Event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_environ_msg_out_PRESENT);
        Named_Function_Event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_PRESENT);
        Named_Function_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Named_Function_Event_event_controller_PRESENT);
        Named_Function_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Named_Function_Event_event_environ_PRESENT);
        Named_Function_Event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert(((((Interface_Event_source_vc == Interface_Event_source_env) || (Interface_Event_source_vc == Interface_Event_source_actuator)) || (Interface_Event_source_vc == Interface_Event_source_controller)) || (Interface_Event_source_vc == Interface_Event_source_environ)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert(((((Interface_Event_dest_vc == Interface_Event_dest_env) || (Interface_Event_dest_vc == Interface_Event_dest_actuator)) || (Interface_Event_dest_vc == Interface_Event_dest_controller)) || (Interface_Event_dest_vc == Interface_Event_dest_environ)));
}
inline Interface_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_ping_p1_range_check(Interface_Event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_ping_p1_vc >= 0) && (Interface_Event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_input_none_PRESENT);
        Interface_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_ping_PRESENT);
        Interface_Event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_pong_p1_range_check(Interface_Event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_out_pong_p1_vc >= 0) && (Interface_Event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_pong_PRESENT);
        Interface_Event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_PRESENT);
        Interface_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_PRESENT);
        Interface_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_pong_p1_range_check(Interface_Event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_pong_p1_vc >= 0) && (Interface_Event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_test_p1_range_check(Interface_Event_event_controller_msg_in_test_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_test_p1_vc >= 0) && (Interface_Event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Interface_Event_event_controller_msg_in_test_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_input_none_PRESENT);
        Interface_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_pong_PRESENT);
        Interface_Event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_test_PRESENT);
        Interface_Event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_ping_p1_range_check(Interface_Event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_ping_p1_vc >= 0) && (Interface_Event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_ping_PRESENT);
        Interface_Event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_PRESENT);
        Interface_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_PRESENT);
        Interface_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Interface_Event_event_environ_msg_out_test_p1_range_check(Interface_Event_event_environ_msg_out_test_p1_vc)
{
    assert(((Interface_Event_event_environ_msg_out_test_p1_vc >= 0) && (Interface_Event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Interface_Event_event_environ_msg_out_test_assign_value(dst, src)
{
    Interface_Event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_environ_msg_out_test_PRESENT);
        Interface_Event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_environ_msg_out_PRESENT);
        Interface_Event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_PRESENT);
        Interface_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Interface_Event_event_controller_PRESENT);
        Interface_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Interface_Event_event_environ_PRESENT);
        Interface_Event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert(((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_controller)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_environ)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert(((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_controller)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_environ)));
}
inline Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_ping_p1_range_check(Observable_Event_input_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_ping_p1_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_ping_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_pong_p1_range_check(Observable_Event_input_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_out_pong_p1_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_pong_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_pong_p1_range_check(Observable_Event_input_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_pong_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_test_p1_range_check(Observable_Event_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_test_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Observable_Event_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_pong_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_test_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_ping_p1_range_check(Observable_Event_input_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_ping_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_ping_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_input_event_event_environ_msg_out_test_p1_range_check(Observable_Event_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_input_event_event_environ_msg_out_test_p1_vc >= 0) && (Observable_Event_input_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Observable_Event_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_environ_msg_out_test_PRESENT);
        Observable_Event_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_environ_msg_out_PRESENT);
        Observable_Event_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_PRESENT);
        Observable_Event_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_input_event_event_controller_PRESENT);
        Observable_Event_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_input_event_event_environ_PRESENT);
        Observable_Event_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert(((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_controller)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_environ)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert(((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_controller)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_environ)));
}
inline Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_ping_p1_range_check(Observable_Event_output_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_ping_p1_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_ping_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_pong_p1_range_check(Observable_Event_output_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_out_pong_p1_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_pong_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_pong_p1_range_check(Observable_Event_output_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_pong_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_test_p1_range_check(Observable_Event_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_test_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Observable_Event_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_pong_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_test_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_ping_p1_range_check(Observable_Event_output_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_ping_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_ping_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_output_event_event_environ_msg_out_test_p1_range_check(Observable_Event_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_output_event_event_environ_msg_out_test_p1_vc >= 0) && (Observable_Event_output_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Observable_Event_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_environ_msg_out_test_PRESENT);
        Observable_Event_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_environ_msg_out_PRESENT);
        Observable_Event_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_PRESENT);
        Observable_Event_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_output_event_event_controller_PRESENT);
        Observable_Event_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_output_event_event_environ_PRESENT);
        Observable_Event_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert(((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_controller)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_environ)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert(((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_controller)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_environ)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_ping_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_pong_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_pong_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_pong_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_test_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_ping_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_ping_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_p1_range_check(Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc >= 0) && (Observable_Event_unhandled_input_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Observable_Event_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_msg_out_test_PRESENT);
        Observable_Event_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_PRESENT);
        Observable_Event_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_PRESENT);
        Observable_Event_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Observable_Event_unhandled_input_event_environ_PRESENT);
        Observable_Event_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert(((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_controller)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_environ)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert(((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_controller)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_environ)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_ping_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_pong_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_pong_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_ping_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc >= 0) && (Events_Ty_elem_input_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Events_Ty_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_PRESENT);
        Events_Ty_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_PRESENT);
        Events_Ty_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_input_event_event_environ_PRESENT);
        Events_Ty_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert(((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_controller)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_environ)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert(((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_controller)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_environ)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_ping_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_pong_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_pong_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_ping_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc >= 0) && (Events_Ty_elem_output_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Events_Ty_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_PRESENT);
        Events_Ty_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_PRESENT);
        Events_Ty_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_output_event_event_environ_PRESENT);
        Events_Ty_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert(((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_controller)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_environ)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert(((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_controller)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_environ)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 8)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 8)));
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_environ_PRESENT);
        Events_Ty_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_Ty_elem_init_value(dst)
{
    skip;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        Events_Ty_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 9)
    {
        Events_Ty_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_actuator_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_source_range_check(System_State_actuator_queue_elem_input_event_source_vc)
{
    assert(((((System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_env) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_actuator)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_controller)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_environ)));
}
inline System_State_actuator_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_dest_range_check(System_State_actuator_queue_elem_input_event_dest_vc)
{
    assert(((((System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_env) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_actuator)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_controller)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_environ)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_PRESENT);
        System_State_actuator_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_environ_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_environ_PRESENT);
        System_State_actuator_queue_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_source_range_check(System_State_actuator_queue_elem_output_event_source_vc)
{
    assert(((((System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_env) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_actuator)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_controller)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_environ)));
}
inline System_State_actuator_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_dest_range_check(System_State_actuator_queue_elem_output_event_dest_vc)
{
    assert(((((System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_env) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_actuator)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_controller)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_environ)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_PRESENT);
        System_State_actuator_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_environ_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_environ_PRESENT);
        System_State_actuator_queue_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_source_range_check(System_State_actuator_queue_elem_unhandled_input_source_vc)
{
    assert(((((System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_env) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_actuator)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_controller)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_environ)));
}
inline System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_dest_range_check(System_State_actuator_queue_elem_unhandled_input_dest_vc)
{
    assert(((((System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_env) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_actuator)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_controller)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_environ)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_environ_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_no_event_PRESENT);
        System_State_actuator_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_actuator_queue_elem_system_startup_PRESENT);
        System_State_actuator_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_PRESENT);
        System_State_actuator_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_PRESENT);
        System_State_actuator_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_actuator_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_actuator_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_actuator_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_size_check(System_State_actuator_queue_sc)
{
    assert(((System_State_actuator_queue_sc >= 0) && (System_State_actuator_queue_sc <= 2)));
}
inline System_State_controller_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_source_range_check(System_State_controller_queue_elem_input_event_source_vc)
{
    assert(((((System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_env) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_actuator)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_controller)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_environ)));
}
inline System_State_controller_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_dest_range_check(System_State_controller_queue_elem_input_event_dest_vc)
{
    assert(((((System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_env) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_actuator)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_controller)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_environ)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_environ_PRESENT);
        System_State_controller_queue_elem_input_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_source_range_check(System_State_controller_queue_elem_output_event_source_vc)
{
    assert(((((System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_env) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_actuator)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_controller)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_environ)));
}
inline System_State_controller_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_dest_range_check(System_State_controller_queue_elem_output_event_dest_vc)
{
    assert(((((System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_env) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_actuator)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_controller)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_environ)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_environ_PRESENT);
        System_State_controller_queue_elem_output_event_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_source_range_check(System_State_controller_queue_elem_unhandled_input_source_vc)
{
    assert(((((System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_env) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_actuator)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_controller)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_environ)));
}
inline System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_dest_range_check(System_State_controller_queue_elem_unhandled_input_dest_vc)
{
    assert(((((System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_env) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_actuator)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_controller)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_environ)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_pong_assign_value(dst.data.pong, src.data.pong);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_pong_assign_value(dst.data.pong, src.data.pong);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_ping_assign_value(dst.data.ping, src.data.ping);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_vc <= 8)));
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_test_assign_value(dst.data.test, src.data.test);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_environ_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_environ_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_environ_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_environ_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_environ_assign_value(dst.data.environ, src.data.environ);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_no_event_PRESENT);
        System_State_controller_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_controller_queue_elem_system_startup_PRESENT);
        System_State_controller_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_PRESENT);
        System_State_controller_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_PRESENT);
        System_State_controller_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_PRESENT);
        System_State_controller_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_controller_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_controller_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_controller_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_size_check(System_State_controller_queue_sc)
{
    assert(((System_State_controller_queue_sc >= 0) && (System_State_controller_queue_sc <= 2)));
}
inline System_State_actuator_state_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_state_range_check(dst);
}
inline System_State_actuator_state_range_check(System_State_actuator_state_vc)
{
    assert((System_State_actuator_state_vc == System_State_actuator_state_wait));
}
inline System_State_actuator_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_init_done_range_check(dst);
}
inline System_State_actuator_init_done_range_check(System_State_actuator_init_done_vc)
{
    assert(true);
}
inline System_State_actuator_param_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_param_range_check(dst);
}
inline System_State_actuator_param_range_check(System_State_actuator_param_vc)
{
    assert(((System_State_actuator_param_vc >= 0) && (System_State_actuator_param_vc <= 10000)));
}
inline System_State_actuator_assign_value(dst, src)
{
    System_State_actuator_state_assign_value(dst.state, src.state);
    System_State_actuator_init_done_assign_value(dst.init_done, src.init_done);
    System_State_actuator_param_assign_value(dst.param, src.param);
}
inline System_State_controller_state_assign_value(dst, src)
{
    dst = src;
    System_State_controller_state_range_check(dst);
}
inline System_State_controller_state_range_check(System_State_controller_state_vc)
{
    assert(((System_State_controller_state_vc == System_State_controller_state_wait) || (System_State_controller_state_vc == System_State_controller_state_operation)));
}
inline System_State_controller_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_controller_init_done_range_check(dst);
}
inline System_State_controller_init_done_range_check(System_State_controller_init_done_vc)
{
    assert(true);
}
inline System_State_controller_test_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_test_param_range_check(dst);
}
inline System_State_controller_test_param_range_check(System_State_controller_test_param_vc)
{
    assert(((System_State_controller_test_param_vc >= 0) && (System_State_controller_test_param_vc <= 8)));
}
inline System_State_controller_ping_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_ping_param_range_check(dst);
}
inline System_State_controller_ping_param_range_check(System_State_controller_ping_param_vc)
{
    assert(((System_State_controller_ping_param_vc >= 0) && (System_State_controller_ping_param_vc <= 10000)));
}
inline System_State_controller_pong_param_assign_value(dst, src)
{
    dst = src;
    System_State_controller_pong_param_range_check(dst);
}
inline System_State_controller_pong_param_range_check(System_State_controller_pong_param_vc)
{
    assert(((System_State_controller_pong_param_vc >= 0) && (System_State_controller_pong_param_vc <= 10000)));
}
inline System_State_controller_assign_value(dst, src)
{
    System_State_controller_state_assign_value(dst.state, src.state);
    System_State_controller_init_done_assign_value(dst.init_done, src.init_done);
    System_State_controller_test_param_assign_value(dst.test_param, src.test_param);
    System_State_controller_ping_param_assign_value(dst.ping_param, src.ping_param);
    System_State_controller_pong_param_assign_value(dst.pong_param, src.pong_param);
}
inline System_State_assign_value(dst, src)
{
    System_State_actuator_queue_assign_value(dst.actuator_queue, src.actuator_queue);
    System_State_controller_queue_assign_value(dst.controller_queue, src.controller_queue);
    System_State_actuator_assign_value(dst.actuator, src.actuator);
    System_State_controller_assign_value(dst.controller, src.controller);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
inline global_dataview_init()
{
    d_step {
        nothing_init();
    }
}
