#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_sender int
#define Actuator_Context_boolean_result bool
#define Actuator_Context_boolean_binary_oper int
#define Actuator_Context_boolean_binary_left bool
#define Actuator_Context_boolean_binary_right bool
#define Actuator_Context_boolean_unary_expr bool
#define Controller_States int
#define Controller_Context_state int
#define Controller_Context_init_done bool
#define Controller_Context_sender int
#define Controller_Context_boolean_result bool
#define Controller_Context_binary_boolean_oper int
#define Controller_Context_binary_boolean_left bool
#define Controller_Context_binary_boolean_right bool
#define Controller_Context_unary_boolean_expr bool
#define Controller_Context_error int
#define Controller_Context_finished int
#define MyInteger int
#define MyBooleanResult bool
#define BinaryBooleanTestParam_oper int
#define BinaryBooleanTestParam_left bool
#define BinaryBooleanTestParam_right bool
#define UnaryBooleanTestParam_expr bool
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define PID_Range int
#define PID int
#define Actuator_Event_msg_in_check_binary_p1_oper int
#define Actuator_Event_msg_in_check_binary_p1_left bool
#define Actuator_Event_msg_in_check_binary_p1_right bool
#define Actuator_Event_msg_in_check_unary_p1_expr bool
#define Actuator_Event_msg_out_result_p1 bool
#define Controller_Event_msg_in_result_p1 bool
#define Controller_Event_msg_out_check_binary_p1_oper int
#define Controller_Event_msg_out_check_binary_p1_left bool
#define Controller_Event_msg_out_check_binary_p1_right bool
#define Controller_Event_msg_out_check_unary_p1_expr bool
#define Observer_State_Kind int
#define Function_Event_actuator_msg_in_check_binary_p1_oper int
#define Function_Event_actuator_msg_in_check_binary_p1_left bool
#define Function_Event_actuator_msg_in_check_binary_p1_right bool
#define Function_Event_actuator_msg_in_check_unary_p1_expr bool
#define Function_Event_actuator_msg_out_result_p1 bool
#define Function_Event_controller_msg_in_result_p1 bool
#define Function_Event_controller_msg_out_check_binary_p1_oper int
#define Function_Event_controller_msg_out_check_binary_p1_left bool
#define Function_Event_controller_msg_out_check_binary_p1_right bool
#define Function_Event_controller_msg_out_check_unary_p1_expr bool
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper int
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_left bool
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_right bool
#define Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr bool
#define Named_Function_Event_event_actuator_msg_out_result_p1 bool
#define Named_Function_Event_event_controller_msg_in_result_p1 bool
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_oper int
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_left bool
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_right bool
#define Named_Function_Event_event_controller_msg_out_check_unary_p1_expr bool
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_actuator_msg_in_check_binary_p1_oper int
#define Interface_Event_event_actuator_msg_in_check_binary_p1_left bool
#define Interface_Event_event_actuator_msg_in_check_binary_p1_right bool
#define Interface_Event_event_actuator_msg_in_check_unary_p1_expr bool
#define Interface_Event_event_actuator_msg_out_result_p1 bool
#define Interface_Event_event_controller_msg_in_result_p1 bool
#define Interface_Event_event_controller_msg_out_check_binary_p1_oper int
#define Interface_Event_event_controller_msg_out_check_binary_p1_left bool
#define Interface_Event_event_controller_msg_out_check_binary_p1_right bool
#define Interface_Event_event_controller_msg_out_check_unary_p1_expr bool
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper int
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left bool
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right bool
#define Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr bool
#define Observable_Event_input_event_event_actuator_msg_out_result_p1 bool
#define Observable_Event_input_event_event_controller_msg_in_result_p1 bool
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper int
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left bool
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right bool
#define Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr bool
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper int
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left bool
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right bool
#define Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr bool
#define Observable_Event_output_event_event_actuator_msg_out_result_p1 bool
#define Observable_Event_output_event_event_controller_msg_in_result_p1 bool
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper int
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left bool
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right bool
#define Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr bool
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper int
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left bool
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right bool
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr bool
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_p1 bool
#define Observable_Event_unhandled_input_event_controller_msg_in_result_p1 bool
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper int
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left bool
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right bool
#define Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr bool
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper int
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left bool
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right bool
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr bool
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_input_event_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper int
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left bool
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right bool
#define Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr bool
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper int
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left bool
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right bool
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr bool
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_output_event_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper int
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left bool
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right bool
#define Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr bool
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left bool
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right bool
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr bool
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left bool
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right bool
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_input_event_source int
#define System_State_actuator_queue_elem_input_event_dest int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left bool
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right bool
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_output_event_source int
#define System_State_actuator_queue_elem_output_event_dest int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left bool
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right bool
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_unhandled_input_source int
#define System_State_actuator_queue_elem_unhandled_input_dest int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left bool
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right bool
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_controller_queue_elem_input_event_source int
#define System_State_controller_queue_elem_input_event_dest int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left bool
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right bool
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_controller_queue_elem_output_event_source int
#define System_State_controller_queue_elem_output_event_dest int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left bool
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right bool
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_controller_queue_elem_unhandled_input_source int
#define System_State_controller_queue_elem_unhandled_input_dest int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left bool
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right bool
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr bool
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left bool
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right bool
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr bool
#define System_State_actuator_state int
#define System_State_actuator_init_done bool
#define System_State_actuator_sender int
#define System_State_actuator_boolean_result bool
#define System_State_actuator_boolean_binary_oper int
#define System_State_actuator_boolean_binary_left bool
#define System_State_actuator_boolean_binary_right bool
#define System_State_actuator_boolean_unary_expr bool
#define System_State_controller_state int
#define System_State_controller_init_done bool
#define System_State_controller_sender int
#define System_State_controller_boolean_result bool
#define System_State_controller_binary_boolean_oper int
#define System_State_controller_binary_boolean_left bool
#define System_State_controller_binary_boolean_right bool
#define System_State_controller_unary_boolean_expr bool
#define System_State_controller_error int
#define System_State_controller_finished int
#define TimerData_timer_enabled bool
#define TimerData_interval int
#define Actuator_States_wait 0
#define Actuator_Context_state_wait 0
#define Actuator_Context_sender_actuator 0
#define Actuator_Context_sender_controller 1
#define Actuator_Context_sender_env 2
#define Actuator_Context_boolean_binary_oper_o_and 0
#define Actuator_Context_boolean_binary_oper_o_or 1
#define Actuator_Context_boolean_binary_oper_o_xor 2
#define Actuator_Context_boolean_binary_oper_o_implies 3
#define Controller_States_checkor4 0
#define Controller_States_checkor3 1
#define Controller_States_checkand1 2
#define Controller_States_checkimplies1 3
#define Controller_States_checknot2 4
#define Controller_States_checkand3 5
#define Controller_States_checkimplies3 6
#define Controller_States_checkor1 7
#define Controller_States_checkor2 8
#define Controller_States_checkand2 9
#define Controller_States_checknot1 10
#define Controller_States_checkand4 11
#define Controller_States_checkxor1 12
#define Controller_States_error 13
#define Controller_States_checkimplies2 14
#define Controller_States_checkimplies4 15
#define Controller_States_checkxor2 16
#define Controller_States_checkxor4 17
#define Controller_States_checkxor3 18
#define Controller_Context_state_checkor4 0
#define Controller_Context_state_checkor3 1
#define Controller_Context_state_checkand1 2
#define Controller_Context_state_checkimplies1 3
#define Controller_Context_state_checknot2 4
#define Controller_Context_state_checkand3 5
#define Controller_Context_state_checkimplies3 6
#define Controller_Context_state_checkor1 7
#define Controller_Context_state_checkor2 8
#define Controller_Context_state_checkand2 9
#define Controller_Context_state_checknot1 10
#define Controller_Context_state_checkand4 11
#define Controller_Context_state_checkxor1 12
#define Controller_Context_state_error 13
#define Controller_Context_state_checkimplies2 14
#define Controller_Context_state_checkimplies4 15
#define Controller_Context_state_checkxor2 16
#define Controller_Context_state_checkxor4 17
#define Controller_Context_state_checkxor3 18
#define Controller_Context_sender_actuator 0
#define Controller_Context_sender_controller 1
#define Controller_Context_sender_env 2
#define Controller_Context_binary_boolean_oper_o_and 0
#define Controller_Context_binary_boolean_oper_o_or 1
#define Controller_Context_binary_boolean_oper_o_xor 2
#define Controller_Context_binary_boolean_oper_o_implies 3
#define BinaryBooleanTestParam_oper_o_and 0
#define BinaryBooleanTestParam_oper_o_or 1
#define BinaryBooleanTestParam_oper_o_xor 2
#define BinaryBooleanTestParam_oper_o_implies 3
#define PID_actuator 0
#define PID_controller 1
#define PID_env 2
#define Actuator_Event_NONE 0
#define Actuator_Event_msg_in_NONE 0
#define Actuator_Event_msg_in_input_none_PRESENT 1
#define Actuator_event_msg_in_selection_input_none_PRESENT 1
#define Actuator_Event_msg_in_check_binary_p1_oper_o_and 0
#define Actuator_Event_msg_in_check_binary_p1_oper_o_or 1
#define Actuator_Event_msg_in_check_binary_p1_oper_o_xor 2
#define Actuator_Event_msg_in_check_binary_p1_oper_o_implies 3
#define Actuator_Event_msg_in_check_binary_PRESENT 2
#define Actuator_event_msg_in_selection_check_binary_PRESENT 2
#define Actuator_Event_msg_in_check_unary_PRESENT 3
#define Actuator_event_msg_in_selection_check_unary_PRESENT 3
#define Actuator_Event_msg_in_PRESENT 1
#define Actuator_event_selection_msg_in_PRESENT 1
#define Actuator_Event_msg_out_NONE 0
#define Actuator_Event_msg_out_result_PRESENT 1
#define Actuator_event_msg_out_selection_result_PRESENT 1
#define Actuator_Event_msg_out_PRESENT 2
#define Actuator_event_selection_msg_out_PRESENT 2
#define Controller_Event_NONE 0
#define Controller_Event_msg_in_NONE 0
#define Controller_Event_msg_in_input_none_PRESENT 1
#define Controller_event_msg_in_selection_input_none_PRESENT 1
#define Controller_Event_msg_in_result_PRESENT 2
#define Controller_event_msg_in_selection_result_PRESENT 2
#define Controller_Event_msg_in_PRESENT 1
#define Controller_event_selection_msg_in_PRESENT 1
#define Controller_Event_msg_out_NONE 0
#define Controller_Event_msg_out_check_binary_p1_oper_o_and 0
#define Controller_Event_msg_out_check_binary_p1_oper_o_or 1
#define Controller_Event_msg_out_check_binary_p1_oper_o_xor 2
#define Controller_Event_msg_out_check_binary_p1_oper_o_implies 3
#define Controller_Event_msg_out_check_binary_PRESENT 1
#define Controller_event_msg_out_selection_check_binary_PRESENT 1
#define Controller_Event_msg_out_check_unary_PRESENT 2
#define Controller_event_msg_out_selection_check_unary_PRESENT 2
#define Controller_Event_msg_out_PRESENT 2
#define Controller_event_selection_msg_out_PRESENT 2
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_actuator_NONE 0
#define Function_Event_actuator_msg_in_NONE 0
#define Function_Event_actuator_msg_in_input_none_PRESENT 1
#define Function_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Function_Event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Function_Event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Function_Event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Function_Event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Function_Event_actuator_msg_in_check_binary_PRESENT 2
#define Function_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Function_Event_actuator_msg_in_check_unary_PRESENT 3
#define Function_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Function_Event_actuator_msg_in_PRESENT 1
#define Function_event_actuator_selection_msg_in_PRESENT 1
#define Function_Event_actuator_msg_out_NONE 0
#define Function_Event_actuator_msg_out_result_PRESENT 1
#define Function_event_actuator_msg_out_selection_result_PRESENT 1
#define Function_Event_actuator_msg_out_PRESENT 2
#define Function_event_actuator_selection_msg_out_PRESENT 2
#define Function_Event_actuator_PRESENT 1
#define Function_event_selection_actuator_PRESENT 1
#define Function_Event_controller_NONE 0
#define Function_Event_controller_msg_in_NONE 0
#define Function_Event_controller_msg_in_input_none_PRESENT 1
#define Function_event_controller_msg_in_selection_input_none_PRESENT 1
#define Function_Event_controller_msg_in_result_PRESENT 2
#define Function_event_controller_msg_in_selection_result_PRESENT 2
#define Function_Event_controller_msg_in_PRESENT 1
#define Function_event_controller_selection_msg_in_PRESENT 1
#define Function_Event_controller_msg_out_NONE 0
#define Function_Event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Function_Event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Function_Event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Function_Event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Function_Event_controller_msg_out_check_binary_PRESENT 1
#define Function_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Function_Event_controller_msg_out_check_unary_PRESENT 2
#define Function_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Function_Event_controller_msg_out_PRESENT 2
#define Function_event_controller_selection_msg_out_PRESENT 2
#define Function_Event_controller_PRESENT 2
#define Function_event_selection_controller_PRESENT 2
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_actuator_NONE 0
#define Named_Function_Event_event_actuator_msg_in_NONE 0
#define Named_Function_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Named_function_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Named_Function_Event_event_actuator_msg_in_check_binary_PRESENT 2
#define Named_function_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_check_unary_PRESENT 3
#define Named_function_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Named_Function_Event_event_actuator_msg_in_PRESENT 1
#define Named_function_event_event_actuator_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_NONE 0
#define Named_Function_Event_event_actuator_msg_out_result_PRESENT 1
#define Named_function_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_PRESENT 2
#define Named_function_event_event_actuator_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_actuator_PRESENT 1
#define Named_function_event_event_selection_actuator_PRESENT 1
#define Named_Function_Event_event_controller_NONE 0
#define Named_Function_Event_event_controller_msg_in_NONE 0
#define Named_Function_Event_event_controller_msg_in_input_none_PRESENT 1
#define Named_function_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_controller_msg_in_result_PRESENT 2
#define Named_function_event_event_controller_msg_in_selection_result_PRESENT 2
#define Named_Function_Event_event_controller_msg_in_PRESENT 1
#define Named_function_event_event_controller_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_NONE 0
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Named_Function_Event_event_controller_msg_out_check_binary_PRESENT 1
#define Named_function_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_check_unary_PRESENT 2
#define Named_function_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_PRESENT 2
#define Named_function_event_event_controller_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_controller_PRESENT 2
#define Named_function_event_event_selection_controller_PRESENT 2
#define Interface_Event_source_actuator 0
#define Interface_Event_source_controller 1
#define Interface_Event_source_env 2
#define Interface_Event_dest_actuator 0
#define Interface_Event_dest_controller 1
#define Interface_Event_dest_env 2
#define Interface_Event_event_NONE 0
#define Interface_Event_event_actuator_NONE 0
#define Interface_Event_event_actuator_msg_in_NONE 0
#define Interface_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Interface_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Interface_Event_event_actuator_msg_in_check_binary_PRESENT 2
#define Interface_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Interface_Event_event_actuator_msg_in_check_unary_PRESENT 3
#define Interface_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Interface_Event_event_actuator_msg_in_PRESENT 1
#define Interface_event_event_actuator_selection_msg_in_PRESENT 1
#define Interface_Event_event_actuator_msg_out_NONE 0
#define Interface_Event_event_actuator_msg_out_result_PRESENT 1
#define Interface_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Interface_Event_event_actuator_msg_out_PRESENT 2
#define Interface_event_event_actuator_selection_msg_out_PRESENT 2
#define Interface_Event_event_actuator_PRESENT 1
#define Interface_event_event_selection_actuator_PRESENT 1
#define Interface_Event_event_controller_NONE 0
#define Interface_Event_event_controller_msg_in_NONE 0
#define Interface_Event_event_controller_msg_in_input_none_PRESENT 1
#define Interface_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_controller_msg_in_result_PRESENT 2
#define Interface_event_event_controller_msg_in_selection_result_PRESENT 2
#define Interface_Event_event_controller_msg_in_PRESENT 1
#define Interface_event_event_controller_selection_msg_in_PRESENT 1
#define Interface_Event_event_controller_msg_out_NONE 0
#define Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Interface_Event_event_controller_msg_out_check_binary_PRESENT 1
#define Interface_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Interface_Event_event_controller_msg_out_check_unary_PRESENT 2
#define Interface_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Interface_Event_event_controller_msg_out_PRESENT 2
#define Interface_event_event_controller_selection_msg_out_PRESENT 2
#define Interface_Event_event_controller_PRESENT 2
#define Interface_event_event_selection_controller_PRESENT 2
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_actuator 0
#define Observable_Event_input_event_source_controller 1
#define Observable_Event_input_event_source_env 2
#define Observable_Event_input_event_dest_actuator 0
#define Observable_Event_input_event_dest_controller 1
#define Observable_Event_input_event_dest_env 2
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_actuator_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Observable_Event_input_event_event_actuator_msg_in_check_binary_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_check_unary_PRESENT 3
#define Observable_event_input_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Observable_Event_input_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_NONE 0
#define Observable_Event_input_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_actuator_PRESENT 1
#define Observable_event_input_event_event_selection_actuator_PRESENT 1
#define Observable_Event_input_event_event_controller_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_in_PRESENT 1
#define Observable_event_input_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Observable_Event_input_event_event_controller_msg_out_check_binary_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_check_unary_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_PRESENT 2
#define Observable_event_input_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_controller_PRESENT 2
#define Observable_event_input_event_event_selection_controller_PRESENT 2
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_actuator 0
#define Observable_Event_output_event_source_controller 1
#define Observable_Event_output_event_source_env 2
#define Observable_Event_output_event_dest_actuator 0
#define Observable_Event_output_event_dest_controller 1
#define Observable_Event_output_event_dest_env 2
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_actuator_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Observable_Event_output_event_event_actuator_msg_in_check_binary_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_check_unary_PRESENT 3
#define Observable_event_output_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Observable_Event_output_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_NONE 0
#define Observable_Event_output_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_actuator_PRESENT 1
#define Observable_event_output_event_event_selection_actuator_PRESENT 1
#define Observable_Event_output_event_event_controller_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_in_PRESENT 1
#define Observable_event_output_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Observable_Event_output_event_event_controller_msg_out_check_binary_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_check_unary_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_PRESENT 2
#define Observable_event_output_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_controller_PRESENT 2
#define Observable_event_output_event_event_selection_controller_PRESENT 2
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_actuator 0
#define Observable_Event_unhandled_input_source_controller 1
#define Observable_Event_unhandled_input_source_env 2
#define Observable_Event_unhandled_input_dest_actuator 0
#define Observable_Event_unhandled_input_dest_controller 1
#define Observable_Event_unhandled_input_dest_env 2
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_actuator_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_PRESENT 3
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_PRESENT 1
#define Observable_event_unhandled_input_event_selection_actuator_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Observable_Event_unhandled_input_event_controller_msg_out_check_binary_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_check_unary_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_PRESENT 2
#define Observable_event_unhandled_input_event_selection_controller_PRESENT 2
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_actuator 0
#define Events_Ty_elem_input_event_source_controller 1
#define Events_Ty_elem_input_event_source_env 2
#define Events_Ty_elem_input_event_dest_actuator 0
#define Events_Ty_elem_input_event_dest_controller 1
#define Events_Ty_elem_input_event_dest_env 2
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_actuator_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_PRESENT 3
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_PRESENT 1
#define Events_ty_elem_input_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_input_event_event_controller_msg_out_check_binary_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_check_unary_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_PRESENT 2
#define Events_ty_elem_input_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_actuator 0
#define Events_Ty_elem_output_event_source_controller 1
#define Events_Ty_elem_output_event_source_env 2
#define Events_Ty_elem_output_event_dest_actuator 0
#define Events_Ty_elem_output_event_dest_controller 1
#define Events_Ty_elem_output_event_dest_env 2
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_actuator_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_PRESENT 3
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_PRESENT 1
#define Events_ty_elem_output_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_output_event_event_controller_msg_out_check_binary_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_check_unary_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_PRESENT 2
#define Events_ty_elem_output_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_actuator 0
#define Events_Ty_elem_unhandled_input_source_controller 1
#define Events_Ty_elem_unhandled_input_source_env 2
#define Events_Ty_elem_unhandled_input_dest_actuator 0
#define Events_Ty_elem_unhandled_input_dest_controller 1
#define Events_Ty_elem_unhandled_input_dest_env 2
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT 3
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_check_binary_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_check_unary_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_controller_PRESENT 2
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_queue_elem_NONE 0
#define System_State_actuator_queue_elem_no_event_PRESENT 1
#define System_state_actuator_queue_elem_selection_no_event_PRESENT 1
#define System_State_actuator_queue_elem_system_startup_PRESENT 2
#define System_state_actuator_queue_elem_selection_system_startup_PRESENT 2
#define System_State_actuator_queue_elem_input_event_source_actuator 0
#define System_State_actuator_queue_elem_input_event_source_controller 1
#define System_State_actuator_queue_elem_input_event_source_env 2
#define System_State_actuator_queue_elem_input_event_dest_actuator 0
#define System_State_actuator_queue_elem_input_event_dest_controller 1
#define System_State_actuator_queue_elem_input_event_dest_env 2
#define System_State_actuator_queue_elem_input_event_event_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_input_event_PRESENT 3
#define System_state_actuator_queue_elem_selection_input_event_PRESENT 3
#define System_State_actuator_queue_elem_output_event_source_actuator 0
#define System_State_actuator_queue_elem_output_event_source_controller 1
#define System_State_actuator_queue_elem_output_event_source_env 2
#define System_State_actuator_queue_elem_output_event_dest_actuator 0
#define System_State_actuator_queue_elem_output_event_dest_controller 1
#define System_State_actuator_queue_elem_output_event_dest_env 2
#define System_State_actuator_queue_elem_output_event_event_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_output_event_PRESENT 4
#define System_state_actuator_queue_elem_selection_output_event_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_source_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_source_controller 1
#define System_State_actuator_queue_elem_unhandled_input_source_env 2
#define System_State_actuator_queue_elem_unhandled_input_dest_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_dest_controller 1
#define System_State_actuator_queue_elem_unhandled_input_dest_env 2
#define System_State_actuator_queue_elem_unhandled_input_event_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_PRESENT 5
#define System_state_actuator_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_queue_elem_NONE 0
#define System_State_controller_queue_elem_no_event_PRESENT 1
#define System_state_controller_queue_elem_selection_no_event_PRESENT 1
#define System_State_controller_queue_elem_system_startup_PRESENT 2
#define System_state_controller_queue_elem_selection_system_startup_PRESENT 2
#define System_State_controller_queue_elem_input_event_source_actuator 0
#define System_State_controller_queue_elem_input_event_source_controller 1
#define System_State_controller_queue_elem_input_event_source_env 2
#define System_State_controller_queue_elem_input_event_dest_actuator 0
#define System_State_controller_queue_elem_input_event_dest_controller 1
#define System_State_controller_queue_elem_input_event_dest_env 2
#define System_State_controller_queue_elem_input_event_event_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_input_event_PRESENT 3
#define System_state_controller_queue_elem_selection_input_event_PRESENT 3
#define System_State_controller_queue_elem_output_event_source_actuator 0
#define System_State_controller_queue_elem_output_event_source_controller 1
#define System_State_controller_queue_elem_output_event_source_env 2
#define System_State_controller_queue_elem_output_event_dest_actuator 0
#define System_State_controller_queue_elem_output_event_dest_controller 1
#define System_State_controller_queue_elem_output_event_dest_env 2
#define System_State_controller_queue_elem_output_event_event_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_output_event_PRESENT 4
#define System_state_controller_queue_elem_selection_output_event_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_source_actuator 0
#define System_State_controller_queue_elem_unhandled_input_source_controller 1
#define System_State_controller_queue_elem_unhandled_input_source_env 2
#define System_State_controller_queue_elem_unhandled_input_dest_actuator 0
#define System_State_controller_queue_elem_unhandled_input_dest_controller 1
#define System_State_controller_queue_elem_unhandled_input_dest_env 2
#define System_State_controller_queue_elem_unhandled_input_event_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_check_binary_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_check_unary_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_check_binary_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_check_unary_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_PRESENT 5
#define System_state_controller_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_state_wait 0
#define System_State_actuator_sender_actuator 0
#define System_State_actuator_sender_controller 1
#define System_State_actuator_sender_env 2
#define System_State_actuator_boolean_binary_oper_o_and 0
#define System_State_actuator_boolean_binary_oper_o_or 1
#define System_State_actuator_boolean_binary_oper_o_xor 2
#define System_State_actuator_boolean_binary_oper_o_implies 3
#define System_State_controller_state_checkor4 0
#define System_State_controller_state_checkor3 1
#define System_State_controller_state_checkand1 2
#define System_State_controller_state_checkimplies1 3
#define System_State_controller_state_checknot2 4
#define System_State_controller_state_checkand3 5
#define System_State_controller_state_checkimplies3 6
#define System_State_controller_state_checkor1 7
#define System_State_controller_state_checkor2 8
#define System_State_controller_state_checkand2 9
#define System_State_controller_state_checknot1 10
#define System_State_controller_state_checkand4 11
#define System_State_controller_state_checkxor1 12
#define System_State_controller_state_error 13
#define System_State_controller_state_checkimplies2 14
#define System_State_controller_state_checkimplies4 15
#define System_State_controller_state_checkxor2 16
#define System_State_controller_state_checkxor4 17
#define System_State_controller_state_checkxor3 18
#define System_State_controller_sender_actuator 0
#define System_State_controller_sender_controller 1
#define System_State_controller_sender_env 2
#define System_State_controller_binary_boolean_oper_o_and 0
#define System_State_controller_binary_boolean_oper_o_or 1
#define System_State_controller_binary_boolean_oper_o_xor 2
#define System_State_controller_binary_boolean_oper_o_implies 3
typedef Actuator_Context_boolean_binary {
    Actuator_Context_boolean_binary_oper oper;
    Actuator_Context_boolean_binary_left left;
    Actuator_Context_boolean_binary_right right;
}

typedef Actuator_Context_boolean_unary {
    Actuator_Context_boolean_unary_expr expr;
}

typedef Actuator_Event_msg_in_check_binary_p1 {
    Actuator_Event_msg_in_check_binary_p1_oper oper;
    Actuator_Event_msg_in_check_binary_p1_left left;
    Actuator_Event_msg_in_check_binary_p1_right right;
}

typedef Actuator_Event_msg_in_check_unary_p1 {
    Actuator_Event_msg_in_check_unary_p1_expr expr;
}

typedef Actuator_Event_msg_in_input_none {
    bit dummy;
}

typedef Actuator_Event_msg_out_result {
    Actuator_Event_msg_out_result_p1 p1;
}

typedef AggregateTimerData_actuator {
    bit dummy;
}

typedef AggregateTimerData_controller {
    bit dummy;
}

typedef AggregateTimerData_dummy_entry {
    bit dummy;
}

typedef BinaryBooleanTestParam {
    BinaryBooleanTestParam_oper oper;
    BinaryBooleanTestParam_left left;
    BinaryBooleanTestParam_right right;
}

typedef Controller_Context_binary_boolean {
    Controller_Context_binary_boolean_oper oper;
    Controller_Context_binary_boolean_left left;
    Controller_Context_binary_boolean_right right;
}

typedef Controller_Context_unary_boolean {
    Controller_Context_unary_boolean_expr expr;
}

typedef Controller_Event_msg_in_input_none {
    bit dummy;
}

typedef Controller_Event_msg_in_result {
    Controller_Event_msg_in_result_p1 p1;
}

typedef Controller_Event_msg_out_check_binary_p1 {
    Controller_Event_msg_out_check_binary_p1_oper oper;
    Controller_Event_msg_out_check_binary_p1_left left;
    Controller_Event_msg_out_check_binary_p1_right right;
}

typedef Controller_Event_msg_out_check_unary_p1 {
    Controller_Event_msg_out_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper oper;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left left;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_result {
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_result {
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper oper;
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left left;
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper oper;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left left;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_result {
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_result {
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper oper;
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left left;
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper oper;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left left;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_result {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_result {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper oper;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left left;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right right;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Function_Event_actuator_msg_in_check_binary_p1 {
    Function_Event_actuator_msg_in_check_binary_p1_oper oper;
    Function_Event_actuator_msg_in_check_binary_p1_left left;
    Function_Event_actuator_msg_in_check_binary_p1_right right;
}

typedef Function_Event_actuator_msg_in_check_unary_p1 {
    Function_Event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Function_Event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_actuator_msg_out_result {
    Function_Event_actuator_msg_out_result_p1 p1;
}

typedef Function_Event_controller_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_controller_msg_in_result {
    Function_Event_controller_msg_in_result_p1 p1;
}

typedef Function_Event_controller_msg_out_check_binary_p1 {
    Function_Event_controller_msg_out_check_binary_p1_oper oper;
    Function_Event_controller_msg_out_check_binary_p1_left left;
    Function_Event_controller_msg_out_check_binary_p1_right right;
}

typedef Function_Event_controller_msg_out_check_unary_p1 {
    Function_Event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Interface_Event_event_actuator_msg_in_check_binary_p1 {
    Interface_Event_event_actuator_msg_in_check_binary_p1_oper oper;
    Interface_Event_event_actuator_msg_in_check_binary_p1_left left;
    Interface_Event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Interface_Event_event_actuator_msg_in_check_unary_p1 {
    Interface_Event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Interface_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_actuator_msg_out_result {
    Interface_Event_event_actuator_msg_out_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_result {
    Interface_Event_event_controller_msg_in_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_check_binary_p1 {
    Interface_Event_event_controller_msg_out_check_binary_p1_oper oper;
    Interface_Event_event_controller_msg_out_check_binary_p1_left left;
    Interface_Event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Interface_Event_event_controller_msg_out_check_unary_p1 {
    Interface_Event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Named_Function_Event_event_actuator_msg_in_check_binary_p1 {
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper oper;
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_left left;
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Named_Function_Event_event_actuator_msg_in_check_unary_p1 {
    Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Named_Function_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_actuator_msg_out_result {
    Named_Function_Event_event_actuator_msg_out_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_result {
    Named_Function_Event_event_controller_msg_in_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_check_binary_p1 {
    Named_Function_Event_event_controller_msg_out_check_binary_p1_oper oper;
    Named_Function_Event_event_controller_msg_out_check_binary_p1_left left;
    Named_Function_Event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Named_Function_Event_event_controller_msg_out_check_unary_p1 {
    Named_Function_Event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_check_binary_p1 {
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper oper;
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left left;
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Observable_Event_input_event_event_actuator_msg_in_check_unary_p1 {
    Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Observable_Event_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_actuator_msg_out_result {
    Observable_Event_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_result {
    Observable_Event_input_event_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_check_binary_p1 {
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper oper;
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left left;
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Observable_Event_input_event_event_controller_msg_out_check_unary_p1 {
    Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_check_binary_p1 {
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper oper;
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left left;
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Observable_Event_output_event_event_actuator_msg_in_check_unary_p1 {
    Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Observable_Event_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_out_result {
    Observable_Event_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_result {
    Observable_Event_output_event_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_check_binary_p1 {
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper oper;
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left left;
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef Observable_Event_output_event_event_controller_msg_out_check_unary_p1 {
    Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper oper;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left left;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right right;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_result {
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_result {
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper oper;
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left left;
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right right;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_actuator_boolean_binary {
    System_State_actuator_boolean_binary_oper oper;
    System_State_actuator_boolean_binary_left left;
    System_State_actuator_boolean_binary_right right;
}

typedef System_State_actuator_boolean_unary {
    System_State_actuator_boolean_unary_expr expr;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left left;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_result {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left left;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_actuator_queue_elem_no_event {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left left;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_result {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left left;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_actuator_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left left;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left left;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_controller_binary_boolean {
    System_State_controller_binary_boolean_oper oper;
    System_State_controller_binary_boolean_left left;
    System_State_controller_binary_boolean_right right;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left left;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_result {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_result {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left left;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_controller_queue_elem_no_event {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left left;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_result {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_result {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left left;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_controller_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper oper;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left left;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr expr;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper oper;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left left;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right right;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr expr;
}

typedef System_State_controller_unary_boolean {
    System_State_controller_unary_boolean_expr expr;
}

typedef System_State_timers_actuator {
    bit dummy;
}

typedef System_State_timers_controller {
    bit dummy;
}

typedef System_State_timers_dummy_entry {
    bit dummy;
}

typedef T_Null_Record {
    bit dummy;
}

typedef TimerData {
    TimerData_timer_enabled timer_enabled;
    TimerData_interval interval;
}

typedef UnaryBooleanTestParam {
    UnaryBooleanTestParam_expr expr;
}

typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_sender sender;
    Actuator_Context_boolean_result boolean_result;
    Actuator_Context_boolean_binary boolean_binary;
    Actuator_Context_boolean_unary boolean_unary;
}

typedef Actuator_Event_msg_in_check_binary {
    Actuator_Event_msg_in_check_binary_p1 p1;
}

typedef Actuator_Event_msg_in_check_unary {
    Actuator_Event_msg_in_check_unary_p1 p1;
}

typedef Actuator_Event_msg_in_data {
    Actuator_Event_msg_in_input_none input_none;
    Actuator_Event_msg_in_check_binary check_binary;
    Actuator_Event_msg_in_check_unary check_unary;
}

typedef Actuator_Event_msg_out_data {
    Actuator_Event_msg_out_result result;
}

typedef AggregateTimerData {
    AggregateTimerData_actuator actuator;
    AggregateTimerData_controller controller;
    AggregateTimerData_dummy_entry dummy_entry;
}

typedef Controller_Context {
    Controller_Context_state state;
    Controller_Context_init_done init_done;
    Controller_Context_sender sender;
    Controller_Context_boolean_result boolean_result;
    Controller_Context_binary_boolean binary_boolean;
    Controller_Context_unary_boolean unary_boolean;
    Controller_Context_error error;
    Controller_Context_finished finished;
}

typedef Controller_Event_msg_in_data {
    Controller_Event_msg_in_input_none input_none;
    Controller_Event_msg_in_result result;
}

typedef Controller_Event_msg_out_check_binary {
    Controller_Event_msg_out_check_binary_p1 p1;
}

typedef Controller_Event_msg_out_check_unary {
    Controller_Event_msg_out_check_unary_p1 p1;
}

typedef Controller_Event_msg_out_data {
    Controller_Event_msg_out_check_binary check_binary;
    Controller_Event_msg_out_check_unary check_unary;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_check_binary {
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_check_unary {
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary check_binary;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary check_unary;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_data {
    Events_Ty_elem_input_event_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_data {
    Events_Ty_elem_input_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_check_binary {
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_check_unary {
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_data {
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary check_binary;
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary check_unary;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_check_binary {
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_check_unary {
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary check_binary;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary check_unary;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_data {
    Events_Ty_elem_output_event_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_data {
    Events_Ty_elem_output_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_check_binary {
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_check_unary {
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_data {
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary check_binary;
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary check_unary;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary check_binary;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary check_unary;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary check_binary;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary check_unary;
}

typedef Function_Event_actuator_msg_in_check_binary {
    Function_Event_actuator_msg_in_check_binary_p1 p1;
}

typedef Function_Event_actuator_msg_in_check_unary {
    Function_Event_actuator_msg_in_check_unary_p1 p1;
}

typedef Function_Event_actuator_msg_in_data {
    Function_Event_actuator_msg_in_input_none input_none;
    Function_Event_actuator_msg_in_check_binary check_binary;
    Function_Event_actuator_msg_in_check_unary check_unary;
}

typedef Function_Event_actuator_msg_out_data {
    Function_Event_actuator_msg_out_result result;
}

typedef Function_Event_controller_msg_in_data {
    Function_Event_controller_msg_in_input_none input_none;
    Function_Event_controller_msg_in_result result;
}

typedef Function_Event_controller_msg_out_check_binary {
    Function_Event_controller_msg_out_check_binary_p1 p1;
}

typedef Function_Event_controller_msg_out_check_unary {
    Function_Event_controller_msg_out_check_unary_p1 p1;
}

typedef Function_Event_controller_msg_out_data {
    Function_Event_controller_msg_out_check_binary check_binary;
    Function_Event_controller_msg_out_check_unary check_unary;
}

typedef Interface_Event_event_actuator_msg_in_check_binary {
    Interface_Event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_check_unary {
    Interface_Event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_data {
    Interface_Event_event_actuator_msg_in_input_none input_none;
    Interface_Event_event_actuator_msg_in_check_binary check_binary;
    Interface_Event_event_actuator_msg_in_check_unary check_unary;
}

typedef Interface_Event_event_actuator_msg_out_data {
    Interface_Event_event_actuator_msg_out_result result;
}

typedef Interface_Event_event_controller_msg_in_data {
    Interface_Event_event_controller_msg_in_input_none input_none;
    Interface_Event_event_controller_msg_in_result result;
}

typedef Interface_Event_event_controller_msg_out_check_binary {
    Interface_Event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_check_unary {
    Interface_Event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_data {
    Interface_Event_event_controller_msg_out_check_binary check_binary;
    Interface_Event_event_controller_msg_out_check_unary check_unary;
}

typedef Named_Function_Event_event_actuator_msg_in_check_binary {
    Named_Function_Event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_check_unary {
    Named_Function_Event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_data {
    Named_Function_Event_event_actuator_msg_in_input_none input_none;
    Named_Function_Event_event_actuator_msg_in_check_binary check_binary;
    Named_Function_Event_event_actuator_msg_in_check_unary check_unary;
}

typedef Named_Function_Event_event_actuator_msg_out_data {
    Named_Function_Event_event_actuator_msg_out_result result;
}

typedef Named_Function_Event_event_controller_msg_in_data {
    Named_Function_Event_event_controller_msg_in_input_none input_none;
    Named_Function_Event_event_controller_msg_in_result result;
}

typedef Named_Function_Event_event_controller_msg_out_check_binary {
    Named_Function_Event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_check_unary {
    Named_Function_Event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_data {
    Named_Function_Event_event_controller_msg_out_check_binary check_binary;
    Named_Function_Event_event_controller_msg_out_check_unary check_unary;
}

typedef Observable_Event_input_event_event_actuator_msg_in_check_binary {
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_check_unary {
    Observable_Event_input_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_data {
    Observable_Event_input_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_input_event_event_actuator_msg_in_check_binary check_binary;
    Observable_Event_input_event_event_actuator_msg_in_check_unary check_unary;
}

typedef Observable_Event_input_event_event_actuator_msg_out_data {
    Observable_Event_input_event_event_actuator_msg_out_result result;
}

typedef Observable_Event_input_event_event_controller_msg_in_data {
    Observable_Event_input_event_event_controller_msg_in_input_none input_none;
    Observable_Event_input_event_event_controller_msg_in_result result;
}

typedef Observable_Event_input_event_event_controller_msg_out_check_binary {
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_check_unary {
    Observable_Event_input_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_data {
    Observable_Event_input_event_event_controller_msg_out_check_binary check_binary;
    Observable_Event_input_event_event_controller_msg_out_check_unary check_unary;
}

typedef Observable_Event_output_event_event_actuator_msg_in_check_binary {
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_check_unary {
    Observable_Event_output_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_data {
    Observable_Event_output_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_output_event_event_actuator_msg_in_check_binary check_binary;
    Observable_Event_output_event_event_actuator_msg_in_check_unary check_unary;
}

typedef Observable_Event_output_event_event_actuator_msg_out_data {
    Observable_Event_output_event_event_actuator_msg_out_result result;
}

typedef Observable_Event_output_event_event_controller_msg_in_data {
    Observable_Event_output_event_event_controller_msg_in_input_none input_none;
    Observable_Event_output_event_event_controller_msg_in_result result;
}

typedef Observable_Event_output_event_event_controller_msg_out_check_binary {
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_check_unary {
    Observable_Event_output_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_data {
    Observable_Event_output_event_event_controller_msg_out_check_binary check_binary;
    Observable_Event_output_event_event_controller_msg_out_check_unary check_unary;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_check_binary {
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_check_unary {
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary check_binary;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary check_unary;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_data {
    Observable_Event_unhandled_input_event_actuator_msg_out_result result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_data {
    Observable_Event_unhandled_input_event_controller_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_controller_msg_in_result result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_check_binary {
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_check_unary {
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_data {
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary check_binary;
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_actuator {
    System_State_actuator_state state;
    System_State_actuator_init_done init_done;
    System_State_actuator_sender sender;
    System_State_actuator_boolean_result boolean_result;
    System_State_actuator_boolean_binary boolean_binary;
    System_State_actuator_boolean_unary boolean_unary;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary check_binary;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary check_binary;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary check_binary;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary check_binary;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary check_binary;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary check_binary;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_controller {
    System_State_controller_state state;
    System_State_controller_init_done init_done;
    System_State_controller_sender sender;
    System_State_controller_boolean_result boolean_result;
    System_State_controller_binary_boolean binary_boolean;
    System_State_controller_unary_boolean unary_boolean;
    System_State_controller_error error;
    System_State_controller_finished finished;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary check_binary;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary check_binary;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary check_binary;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary check_binary;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary check_binary;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary check_unary;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary check_binary;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary check_unary;
}

typedef System_State_timers {
    System_State_timers_actuator actuator;
    System_State_timers_controller controller;
    System_State_timers_dummy_entry dummy_entry;
}

typedef Actuator_Event_msg_in {
    Actuator_Event_msg_in_data data;
    int selection;
}

typedef Actuator_Event_msg_out {
    Actuator_Event_msg_out_data data;
    int selection;
}

typedef Controller_Event_msg_in {
    Controller_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out {
    Controller_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in {
    Events_Ty_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out {
    Events_Ty_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in {
    Events_Ty_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out {
    Events_Ty_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in {
    Events_Ty_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out {
    Events_Ty_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in {
    Events_Ty_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out {
    Events_Ty_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in {
    Function_Event_actuator_msg_in_data data;
    int selection;
}

typedef Function_Event_actuator_msg_out {
    Function_Event_actuator_msg_out_data data;
    int selection;
}

typedef Function_Event_controller_msg_in {
    Function_Event_controller_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out {
    Function_Event_controller_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in {
    Interface_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_out {
    Interface_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_in {
    Interface_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out {
    Interface_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in {
    Named_Function_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_out {
    Named_Function_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_in {
    Named_Function_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out {
    Named_Function_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in {
    Observable_Event_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_out {
    Observable_Event_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_in {
    Observable_Event_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out {
    Observable_Event_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in {
    Observable_Event_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_out {
    Observable_Event_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_in {
    Observable_Event_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out {
    Observable_Event_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in {
    Observable_Event_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out {
    Observable_Event_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in {
    Observable_Event_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out {
    Observable_Event_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Actuator_Event_data {
    Actuator_Event_msg_in msg_in;
    Actuator_Event_msg_out msg_out;
}

typedef Controller_Event_data {
    Controller_Event_msg_in msg_in;
    Controller_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_actuator_data {
    Events_Ty_elem_input_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_input_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_controller_data {
    Events_Ty_elem_input_event_event_controller_msg_in msg_in;
    Events_Ty_elem_input_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_actuator_data {
    Events_Ty_elem_output_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_output_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_controller_data {
    Events_Ty_elem_output_event_event_controller_msg_in msg_in;
    Events_Ty_elem_output_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_controller_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Function_Event_actuator_data {
    Function_Event_actuator_msg_in msg_in;
    Function_Event_actuator_msg_out msg_out;
}

typedef Function_Event_controller_data {
    Function_Event_controller_msg_in msg_in;
    Function_Event_controller_msg_out msg_out;
}

typedef Interface_Event_event_actuator_data {
    Interface_Event_event_actuator_msg_in msg_in;
    Interface_Event_event_actuator_msg_out msg_out;
}

typedef Interface_Event_event_controller_data {
    Interface_Event_event_controller_msg_in msg_in;
    Interface_Event_event_controller_msg_out msg_out;
}

typedef Named_Function_Event_event_actuator_data {
    Named_Function_Event_event_actuator_msg_in msg_in;
    Named_Function_Event_event_actuator_msg_out msg_out;
}

typedef Named_Function_Event_event_controller_data {
    Named_Function_Event_event_controller_msg_in msg_in;
    Named_Function_Event_event_controller_msg_out msg_out;
}

typedef Observable_Event_input_event_event_actuator_data {
    Observable_Event_input_event_event_actuator_msg_in msg_in;
    Observable_Event_input_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_input_event_event_controller_data {
    Observable_Event_input_event_event_controller_msg_in msg_in;
    Observable_Event_input_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_output_event_event_actuator_data {
    Observable_Event_output_event_event_actuator_msg_in msg_in;
    Observable_Event_output_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_output_event_event_controller_data {
    Observable_Event_output_event_event_controller_msg_in msg_in;
    Observable_Event_output_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_actuator_data {
    Observable_Event_unhandled_input_event_actuator_msg_in msg_in;
    Observable_Event_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_controller_data {
    Observable_Event_unhandled_input_event_controller_msg_in msg_in;
    Observable_Event_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_controller_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_controller_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Actuator_Event {
    Actuator_Event_data data;
    int selection;
}

typedef Controller_Event {
    Controller_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator {
    Events_Ty_elem_input_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller {
    Events_Ty_elem_input_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_actuator actuator;
    Events_Ty_elem_input_event_event_controller controller;
}

typedef Events_Ty_elem_output_event_event_actuator {
    Events_Ty_elem_output_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller {
    Events_Ty_elem_output_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_actuator actuator;
    Events_Ty_elem_output_event_event_controller controller;
}

typedef Events_Ty_elem_unhandled_input_event_actuator {
    Events_Ty_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller {
    Events_Ty_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_actuator actuator;
    Events_Ty_elem_unhandled_input_event_controller controller;
}

typedef Function_Event_actuator {
    Function_Event_actuator_data data;
    int selection;
}

typedef Function_Event_controller {
    Function_Event_controller_data data;
    int selection;
}

typedef Function_Event_data {
    Function_Event_actuator actuator;
    Function_Event_controller controller;
}

typedef Interface_Event_event_actuator {
    Interface_Event_event_actuator_data data;
    int selection;
}

typedef Interface_Event_event_controller {
    Interface_Event_event_controller_data data;
    int selection;
}

typedef Interface_Event_event_data {
    Interface_Event_event_actuator actuator;
    Interface_Event_event_controller controller;
}

typedef Named_Function_Event_event_actuator {
    Named_Function_Event_event_actuator_data data;
    int selection;
}

typedef Named_Function_Event_event_controller {
    Named_Function_Event_event_controller_data data;
    int selection;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_actuator actuator;
    Named_Function_Event_event_controller controller;
}

typedef Observable_Event_input_event_event_actuator {
    Observable_Event_input_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller {
    Observable_Event_input_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_actuator actuator;
    Observable_Event_input_event_event_controller controller;
}

typedef Observable_Event_output_event_event_actuator {
    Observable_Event_output_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller {
    Observable_Event_output_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_actuator actuator;
    Observable_Event_output_event_event_controller controller;
}

typedef Observable_Event_unhandled_input_event_actuator {
    Observable_Event_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller {
    Observable_Event_unhandled_input_event_controller_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_actuator actuator;
    Observable_Event_unhandled_input_event_controller controller;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator {
    System_State_actuator_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller {
    System_State_actuator_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_data {
    System_State_actuator_queue_elem_input_event_event_actuator actuator;
    System_State_actuator_queue_elem_input_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator {
    System_State_actuator_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller {
    System_State_actuator_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_data {
    System_State_actuator_queue_elem_output_event_event_actuator actuator;
    System_State_actuator_queue_elem_output_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller {
    System_State_actuator_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator actuator;
    System_State_actuator_queue_elem_unhandled_input_event_controller controller;
}

typedef System_State_controller_queue_elem_input_event_event_actuator {
    System_State_controller_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller {
    System_State_controller_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_data {
    System_State_controller_queue_elem_input_event_event_actuator actuator;
    System_State_controller_queue_elem_input_event_event_controller controller;
}

typedef System_State_controller_queue_elem_output_event_event_actuator {
    System_State_controller_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller {
    System_State_controller_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_data {
    System_State_controller_queue_elem_output_event_event_actuator actuator;
    System_State_controller_queue_elem_output_event_event_controller controller;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator {
    System_State_controller_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller {
    System_State_controller_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator actuator;
    System_State_controller_queue_elem_unhandled_input_event_controller controller;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event {
    System_State_actuator_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event {
    System_State_actuator_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event {
    System_State_actuator_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event {
    System_State_controller_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event {
    System_State_controller_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event {
    System_State_controller_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_actuator_queue_elem_input_event {
    System_State_actuator_queue_elem_input_event_source source;
    System_State_actuator_queue_elem_input_event_dest dest;
    System_State_actuator_queue_elem_input_event_event event;
}

typedef System_State_actuator_queue_elem_output_event {
    System_State_actuator_queue_elem_output_event_source source;
    System_State_actuator_queue_elem_output_event_dest dest;
    System_State_actuator_queue_elem_output_event_event event;
}

typedef System_State_actuator_queue_elem_unhandled_input {
    System_State_actuator_queue_elem_unhandled_input_source source;
    System_State_actuator_queue_elem_unhandled_input_dest dest;
    System_State_actuator_queue_elem_unhandled_input_event event;
}

typedef System_State_controller_queue_elem_input_event {
    System_State_controller_queue_elem_input_event_source source;
    System_State_controller_queue_elem_input_event_dest dest;
    System_State_controller_queue_elem_input_event_event event;
}

typedef System_State_controller_queue_elem_output_event {
    System_State_controller_queue_elem_output_event_source source;
    System_State_controller_queue_elem_output_event_dest dest;
    System_State_controller_queue_elem_output_event_event event;
}

typedef System_State_controller_queue_elem_unhandled_input {
    System_State_controller_queue_elem_unhandled_input_source source;
    System_State_controller_queue_elem_unhandled_input_dest dest;
    System_State_controller_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_actuator_queue_elem_data {
    System_State_actuator_queue_elem_no_event no_event;
    System_State_actuator_queue_elem_system_startup system_startup;
    System_State_actuator_queue_elem_input_event input_event;
    System_State_actuator_queue_elem_output_event output_event;
    System_State_actuator_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_controller_queue_elem_data {
    System_State_controller_queue_elem_no_event no_event;
    System_State_controller_queue_elem_system_startup system_startup;
    System_State_controller_queue_elem_input_event input_event;
    System_State_controller_queue_elem_output_event output_event;
    System_State_controller_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem {
    System_State_actuator_queue_elem_data data;
    int selection;
}

typedef System_State_controller_queue_elem {
    System_State_controller_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_actuator_queue {
    System_State_actuator_queue_elem data[2];
    int length;
}

typedef System_State_controller_queue {
    System_State_controller_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_timers timers;
    System_State_actuator_queue actuator_queue;
    System_State_controller_queue controller_queue;
    System_State_actuator actuator;
    System_State_controller controller;
}

Observable_Event nothing;
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert((Actuator_States_vc == Actuator_States_wait));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert((Actuator_Context_state_vc == Actuator_Context_state_wait));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_sender_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_sender_range_check(dst);
}
inline Actuator_Context_sender_range_check(Actuator_Context_sender_vc)
{
    assert((((Actuator_Context_sender_vc == Actuator_Context_sender_actuator) || (Actuator_Context_sender_vc == Actuator_Context_sender_controller)) || (Actuator_Context_sender_vc == Actuator_Context_sender_env)));
}
inline Actuator_Context_boolean_result_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_boolean_result_range_check(dst);
}
inline Actuator_Context_boolean_result_range_check(Actuator_Context_boolean_result_vc)
{
    assert(true);
}
inline Actuator_Context_boolean_binary_oper_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_boolean_binary_oper_range_check(dst);
}
inline Actuator_Context_boolean_binary_oper_range_check(Actuator_Context_boolean_binary_oper_vc)
{
    assert(((((Actuator_Context_boolean_binary_oper_vc == Actuator_Context_boolean_binary_oper_o_and) || (Actuator_Context_boolean_binary_oper_vc == Actuator_Context_boolean_binary_oper_o_or)) || (Actuator_Context_boolean_binary_oper_vc == Actuator_Context_boolean_binary_oper_o_xor)) || (Actuator_Context_boolean_binary_oper_vc == Actuator_Context_boolean_binary_oper_o_implies)));
}
inline Actuator_Context_boolean_binary_left_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_boolean_binary_left_range_check(dst);
}
inline Actuator_Context_boolean_binary_left_range_check(Actuator_Context_boolean_binary_left_vc)
{
    assert(true);
}
inline Actuator_Context_boolean_binary_right_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_boolean_binary_right_range_check(dst);
}
inline Actuator_Context_boolean_binary_right_range_check(Actuator_Context_boolean_binary_right_vc)
{
    assert(true);
}
inline Actuator_Context_boolean_binary_assign_value(dst, src)
{
    Actuator_Context_boolean_binary_oper_assign_value(dst.oper, src.oper);
    Actuator_Context_boolean_binary_left_assign_value(dst.left, src.left);
    Actuator_Context_boolean_binary_right_assign_value(dst.right, src.right);
}
inline Actuator_Context_boolean_unary_expr_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_boolean_unary_expr_range_check(dst);
}
inline Actuator_Context_boolean_unary_expr_range_check(Actuator_Context_boolean_unary_expr_vc)
{
    assert(true);
}
inline Actuator_Context_boolean_unary_assign_value(dst, src)
{
    Actuator_Context_boolean_unary_expr_assign_value(dst.expr, src.expr);
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_sender_assign_value(dst.sender, src.sender);
    Actuator_Context_boolean_result_assign_value(dst.boolean_result, src.boolean_result);
    Actuator_Context_boolean_binary_assign_value(dst.boolean_binary, src.boolean_binary);
    Actuator_Context_boolean_unary_assign_value(dst.boolean_unary, src.boolean_unary);
}
inline Controller_States_assign_value(dst, src)
{
    dst = src;
    Controller_States_range_check(dst);
}
inline Controller_States_range_check(Controller_States_vc)
{
    assert((((((((((((((((((((Controller_States_vc == Controller_States_checkor4) || (Controller_States_vc == Controller_States_checkor3)) || (Controller_States_vc == Controller_States_checkand1)) || (Controller_States_vc == Controller_States_checkimplies1)) || (Controller_States_vc == Controller_States_checknot2)) || (Controller_States_vc == Controller_States_checkand3)) || (Controller_States_vc == Controller_States_checkimplies3)) || (Controller_States_vc == Controller_States_checkor1)) || (Controller_States_vc == Controller_States_checkor2)) || (Controller_States_vc == Controller_States_checkand2)) || (Controller_States_vc == Controller_States_checknot1)) || (Controller_States_vc == Controller_States_checkand4)) || (Controller_States_vc == Controller_States_checkxor1)) || (Controller_States_vc == Controller_States_error)) || (Controller_States_vc == Controller_States_checkimplies2)) || (Controller_States_vc == Controller_States_checkimplies4)) || (Controller_States_vc == Controller_States_checkxor2)) || (Controller_States_vc == Controller_States_checkxor4)) || (Controller_States_vc == Controller_States_checkxor3)));
}
inline Controller_Context_state_assign_value(dst, src)
{
    dst = src;
    Controller_Context_state_range_check(dst);
}
inline Controller_Context_state_range_check(Controller_Context_state_vc)
{
    assert((((((((((((((((((((Controller_Context_state_vc == Controller_Context_state_checkor4) || (Controller_Context_state_vc == Controller_Context_state_checkor3)) || (Controller_Context_state_vc == Controller_Context_state_checkand1)) || (Controller_Context_state_vc == Controller_Context_state_checkimplies1)) || (Controller_Context_state_vc == Controller_Context_state_checknot2)) || (Controller_Context_state_vc == Controller_Context_state_checkand3)) || (Controller_Context_state_vc == Controller_Context_state_checkimplies3)) || (Controller_Context_state_vc == Controller_Context_state_checkor1)) || (Controller_Context_state_vc == Controller_Context_state_checkor2)) || (Controller_Context_state_vc == Controller_Context_state_checkand2)) || (Controller_Context_state_vc == Controller_Context_state_checknot1)) || (Controller_Context_state_vc == Controller_Context_state_checkand4)) || (Controller_Context_state_vc == Controller_Context_state_checkxor1)) || (Controller_Context_state_vc == Controller_Context_state_error)) || (Controller_Context_state_vc == Controller_Context_state_checkimplies2)) || (Controller_Context_state_vc == Controller_Context_state_checkimplies4)) || (Controller_Context_state_vc == Controller_Context_state_checkxor2)) || (Controller_Context_state_vc == Controller_Context_state_checkxor4)) || (Controller_Context_state_vc == Controller_Context_state_checkxor3)));
}
inline Controller_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Controller_Context_init_done_range_check(dst);
}
inline Controller_Context_init_done_range_check(Controller_Context_init_done_vc)
{
    assert(true);
}
inline Controller_Context_sender_assign_value(dst, src)
{
    dst = src;
    Controller_Context_sender_range_check(dst);
}
inline Controller_Context_sender_range_check(Controller_Context_sender_vc)
{
    assert((((Controller_Context_sender_vc == Controller_Context_sender_actuator) || (Controller_Context_sender_vc == Controller_Context_sender_controller)) || (Controller_Context_sender_vc == Controller_Context_sender_env)));
}
inline Controller_Context_boolean_result_assign_value(dst, src)
{
    dst = src;
    Controller_Context_boolean_result_range_check(dst);
}
inline Controller_Context_boolean_result_range_check(Controller_Context_boolean_result_vc)
{
    assert(true);
}
inline Controller_Context_binary_boolean_oper_assign_value(dst, src)
{
    dst = src;
    Controller_Context_binary_boolean_oper_range_check(dst);
}
inline Controller_Context_binary_boolean_oper_range_check(Controller_Context_binary_boolean_oper_vc)
{
    assert(((((Controller_Context_binary_boolean_oper_vc == Controller_Context_binary_boolean_oper_o_and) || (Controller_Context_binary_boolean_oper_vc == Controller_Context_binary_boolean_oper_o_or)) || (Controller_Context_binary_boolean_oper_vc == Controller_Context_binary_boolean_oper_o_xor)) || (Controller_Context_binary_boolean_oper_vc == Controller_Context_binary_boolean_oper_o_implies)));
}
inline Controller_Context_binary_boolean_left_assign_value(dst, src)
{
    dst = src;
    Controller_Context_binary_boolean_left_range_check(dst);
}
inline Controller_Context_binary_boolean_left_range_check(Controller_Context_binary_boolean_left_vc)
{
    assert(true);
}
inline Controller_Context_binary_boolean_right_assign_value(dst, src)
{
    dst = src;
    Controller_Context_binary_boolean_right_range_check(dst);
}
inline Controller_Context_binary_boolean_right_range_check(Controller_Context_binary_boolean_right_vc)
{
    assert(true);
}
inline Controller_Context_binary_boolean_assign_value(dst, src)
{
    Controller_Context_binary_boolean_oper_assign_value(dst.oper, src.oper);
    Controller_Context_binary_boolean_left_assign_value(dst.left, src.left);
    Controller_Context_binary_boolean_right_assign_value(dst.right, src.right);
}
inline Controller_Context_unary_boolean_expr_assign_value(dst, src)
{
    dst = src;
    Controller_Context_unary_boolean_expr_range_check(dst);
}
inline Controller_Context_unary_boolean_expr_range_check(Controller_Context_unary_boolean_expr_vc)
{
    assert(true);
}
inline Controller_Context_unary_boolean_assign_value(dst, src)
{
    Controller_Context_unary_boolean_expr_assign_value(dst.expr, src.expr);
}
inline Controller_Context_error_assign_value(dst, src)
{
    dst = src;
    Controller_Context_error_range_check(dst);
}
inline Controller_Context_error_range_check(Controller_Context_error_vc)
{
    assert(((Controller_Context_error_vc >= -1024) && (Controller_Context_error_vc <= 1024)));
}
inline Controller_Context_finished_assign_value(dst, src)
{
    dst = src;
    Controller_Context_finished_range_check(dst);
}
inline Controller_Context_finished_range_check(Controller_Context_finished_vc)
{
    assert(((Controller_Context_finished_vc >= -1024) && (Controller_Context_finished_vc <= 1024)));
}
inline Controller_Context_assign_value(dst, src)
{
    Controller_Context_state_assign_value(dst.state, src.state);
    Controller_Context_init_done_assign_value(dst.init_done, src.init_done);
    Controller_Context_sender_assign_value(dst.sender, src.sender);
    Controller_Context_boolean_result_assign_value(dst.boolean_result, src.boolean_result);
    Controller_Context_binary_boolean_assign_value(dst.binary_boolean, src.binary_boolean);
    Controller_Context_unary_boolean_assign_value(dst.unary_boolean, src.unary_boolean);
    Controller_Context_error_assign_value(dst.error, src.error);
    Controller_Context_finished_assign_value(dst.finished, src.finished);
}
inline MyInteger_assign_value(dst, src)
{
    dst = src;
    MyInteger_range_check(dst);
}
inline MyInteger_range_check(MyInteger_vc)
{
    assert(((MyInteger_vc >= -1024) && (MyInteger_vc <= 1024)));
}
inline MyBooleanResult_assign_value(dst, src)
{
    dst = src;
    MyBooleanResult_range_check(dst);
}
inline MyBooleanResult_range_check(MyBooleanResult_vc)
{
    assert(true);
}
inline BinaryBooleanTestParam_oper_assign_value(dst, src)
{
    dst = src;
    BinaryBooleanTestParam_oper_range_check(dst);
}
inline BinaryBooleanTestParam_oper_range_check(BinaryBooleanTestParam_oper_vc)
{
    assert(((((BinaryBooleanTestParam_oper_vc == BinaryBooleanTestParam_oper_o_and) || (BinaryBooleanTestParam_oper_vc == BinaryBooleanTestParam_oper_o_or)) || (BinaryBooleanTestParam_oper_vc == BinaryBooleanTestParam_oper_o_xor)) || (BinaryBooleanTestParam_oper_vc == BinaryBooleanTestParam_oper_o_implies)));
}
inline BinaryBooleanTestParam_left_assign_value(dst, src)
{
    dst = src;
    BinaryBooleanTestParam_left_range_check(dst);
}
inline BinaryBooleanTestParam_left_range_check(BinaryBooleanTestParam_left_vc)
{
    assert(true);
}
inline BinaryBooleanTestParam_right_assign_value(dst, src)
{
    dst = src;
    BinaryBooleanTestParam_right_range_check(dst);
}
inline BinaryBooleanTestParam_right_range_check(BinaryBooleanTestParam_right_vc)
{
    assert(true);
}
inline BinaryBooleanTestParam_assign_value(dst, src)
{
    BinaryBooleanTestParam_oper_assign_value(dst.oper, src.oper);
    BinaryBooleanTestParam_left_assign_value(dst.left, src.left);
    BinaryBooleanTestParam_right_assign_value(dst.right, src.right);
}
inline UnaryBooleanTestParam_expr_assign_value(dst, src)
{
    dst = src;
    UnaryBooleanTestParam_expr_range_check(dst);
}
inline UnaryBooleanTestParam_expr_range_check(UnaryBooleanTestParam_expr_vc)
{
    assert(true);
}
inline UnaryBooleanTestParam_assign_value(dst, src)
{
    UnaryBooleanTestParam_expr_assign_value(dst.expr, src.expr);
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline PID_Range_assign_value(dst, src)
{
    dst = src;
    PID_Range_range_check(dst);
}
inline PID_Range_range_check(PID_Range_vc)
{
    assert(((PID_Range_vc >= 0) && (PID_Range_vc <= 2)));
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert((((PID_vc == PID_actuator) || (PID_vc == PID_controller)) || (PID_vc == PID_env)));
}
inline Actuator_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Actuator_Event_msg_in_check_binary_p1_oper_range_check(Actuator_Event_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Actuator_Event_msg_in_check_binary_p1_oper_vc == Actuator_Event_msg_in_check_binary_p1_oper_o_and) || (Actuator_Event_msg_in_check_binary_p1_oper_vc == Actuator_Event_msg_in_check_binary_p1_oper_o_or)) || (Actuator_Event_msg_in_check_binary_p1_oper_vc == Actuator_Event_msg_in_check_binary_p1_oper_o_xor)) || (Actuator_Event_msg_in_check_binary_p1_oper_vc == Actuator_Event_msg_in_check_binary_p1_oper_o_implies)));
}
inline Actuator_Event_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_check_binary_p1_left_range_check(dst);
}
inline Actuator_Event_msg_in_check_binary_p1_left_range_check(Actuator_Event_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Actuator_Event_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_check_binary_p1_right_range_check(dst);
}
inline Actuator_Event_msg_in_check_binary_p1_right_range_check(Actuator_Event_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Actuator_Event_msg_in_check_binary_p1_assign_value(dst, src)
{
    Actuator_Event_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Actuator_Event_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Actuator_Event_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Actuator_Event_msg_in_check_binary_assign_value(dst, src)
{
    Actuator_Event_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Actuator_Event_msg_in_check_unary_p1_expr_range_check(Actuator_Event_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Actuator_Event_msg_in_check_unary_p1_assign_value(dst, src)
{
    Actuator_Event_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Actuator_Event_msg_in_check_unary_assign_value(dst, src)
{
    Actuator_Event_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_input_none_PRESENT);
        Actuator_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Actuator_Event_msg_in_check_binary_PRESENT);
        Actuator_Event_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Actuator_Event_msg_in_check_unary_PRESENT);
        Actuator_Event_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_result_p1_range_check(dst);
}
inline Actuator_Event_msg_out_result_p1_range_check(Actuator_Event_msg_out_result_p1_vc)
{
    assert(true);
}
inline Actuator_Event_msg_out_result_assign_value(dst, src)
{
    Actuator_Event_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_out_result_PRESENT);
        Actuator_Event_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_PRESENT);
        Actuator_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Actuator_Event_msg_out_PRESENT);
        Actuator_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_result_p1_range_check(dst);
}
inline Controller_Event_msg_in_result_p1_range_check(Controller_Event_msg_in_result_p1_vc)
{
    assert(true);
}
inline Controller_Event_msg_in_result_assign_value(dst, src)
{
    Controller_Event_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_input_none_PRESENT);
        Controller_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Controller_Event_msg_in_result_PRESENT);
        Controller_Event_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Controller_Event_msg_out_check_binary_p1_oper_range_check(Controller_Event_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Controller_Event_msg_out_check_binary_p1_oper_vc == Controller_Event_msg_out_check_binary_p1_oper_o_and) || (Controller_Event_msg_out_check_binary_p1_oper_vc == Controller_Event_msg_out_check_binary_p1_oper_o_or)) || (Controller_Event_msg_out_check_binary_p1_oper_vc == Controller_Event_msg_out_check_binary_p1_oper_o_xor)) || (Controller_Event_msg_out_check_binary_p1_oper_vc == Controller_Event_msg_out_check_binary_p1_oper_o_implies)));
}
inline Controller_Event_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_check_binary_p1_left_range_check(dst);
}
inline Controller_Event_msg_out_check_binary_p1_left_range_check(Controller_Event_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Controller_Event_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_check_binary_p1_right_range_check(dst);
}
inline Controller_Event_msg_out_check_binary_p1_right_range_check(Controller_Event_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Controller_Event_msg_out_check_binary_p1_assign_value(dst, src)
{
    Controller_Event_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Controller_Event_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Controller_Event_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Controller_Event_msg_out_check_binary_assign_value(dst, src)
{
    Controller_Event_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Controller_Event_msg_out_check_unary_p1_expr_range_check(Controller_Event_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Controller_Event_msg_out_check_unary_p1_assign_value(dst, src)
{
    Controller_Event_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Controller_Event_msg_out_check_unary_assign_value(dst, src)
{
    Controller_Event_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_check_binary_PRESENT);
        Controller_Event_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Controller_Event_msg_out_check_unary_PRESENT);
        Controller_Event_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_PRESENT);
        Controller_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Controller_Event_msg_out_PRESENT);
        Controller_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Controller_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Function_Event_actuator_msg_in_check_binary_p1_oper_range_check(Function_Event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Function_Event_actuator_msg_in_check_binary_p1_oper_vc == Function_Event_actuator_msg_in_check_binary_p1_oper_o_and) || (Function_Event_actuator_msg_in_check_binary_p1_oper_vc == Function_Event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Function_Event_actuator_msg_in_check_binary_p1_oper_vc == Function_Event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Function_Event_actuator_msg_in_check_binary_p1_oper_vc == Function_Event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Function_Event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Function_Event_actuator_msg_in_check_binary_p1_left_range_check(Function_Event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Function_Event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Function_Event_actuator_msg_in_check_binary_p1_right_range_check(Function_Event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Function_Event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Function_Event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Function_Event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Function_Event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Function_Event_actuator_msg_in_check_unary_p1_expr_range_check(Function_Event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Function_Event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Function_Event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_input_none_PRESENT);
        Function_Event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_actuator_msg_in_check_binary_PRESENT);
        Function_Event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Function_Event_actuator_msg_in_check_unary_PRESENT);
        Function_Event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_result_p1_range_check(dst);
}
inline Function_Event_actuator_msg_out_result_p1_range_check(Function_Event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Function_Event_actuator_msg_out_result_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_out_result_PRESENT);
        Function_Event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_PRESENT);
        Function_Event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_actuator_msg_out_PRESENT);
        Function_Event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_result_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_result_p1_range_check(Function_Event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Function_Event_controller_msg_in_result_assign_value(dst, src)
{
    Function_Event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_input_none_PRESENT);
        Function_Event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_controller_msg_in_result_PRESENT);
        Function_Event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Function_Event_controller_msg_out_check_binary_p1_oper_range_check(Function_Event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Function_Event_controller_msg_out_check_binary_p1_oper_vc == Function_Event_controller_msg_out_check_binary_p1_oper_o_and) || (Function_Event_controller_msg_out_check_binary_p1_oper_vc == Function_Event_controller_msg_out_check_binary_p1_oper_o_or)) || (Function_Event_controller_msg_out_check_binary_p1_oper_vc == Function_Event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Function_Event_controller_msg_out_check_binary_p1_oper_vc == Function_Event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Function_Event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Function_Event_controller_msg_out_check_binary_p1_left_range_check(Function_Event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Function_Event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Function_Event_controller_msg_out_check_binary_p1_right_range_check(Function_Event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Function_Event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Function_Event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Function_Event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Function_Event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Function_Event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Function_Event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Function_Event_controller_msg_out_check_unary_p1_expr_range_check(Function_Event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Function_Event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Function_Event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Function_Event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Function_Event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_check_binary_PRESENT);
        Function_Event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Function_Event_controller_msg_out_check_unary_PRESENT);
        Function_Event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_PRESENT);
        Function_Event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_controller_msg_out_PRESENT);
        Function_Event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_PRESENT);
        Function_Event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Function_Event_controller_PRESENT);
        Function_Event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i;
    for(i : 0 .. (src.length - 1))
    {
        dst.data[i] = src.data[i];
    }
    for(i : src.length .. 79)
    {
        dst.data[i] = 0;
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_range_check(Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_left_range_check(Named_Function_Event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_right_range_check(Named_Function_Event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Named_Function_Event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr_range_check(Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Named_Function_Event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Named_Function_Event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_input_none_PRESENT);
        Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_check_binary_PRESENT);
        Named_Function_Event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_check_unary_PRESENT);
        Named_Function_Event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_result_p1_range_check(Named_Function_Event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Named_Function_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_result_PRESENT);
        Named_Function_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_PRESENT);
        Named_Function_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_PRESENT);
        Named_Function_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_result_p1_range_check(Named_Function_Event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Named_Function_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_input_none_PRESENT);
        Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_result_PRESENT);
        Named_Function_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_range_check(Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_vc == Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_vc == Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_vc == Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_vc == Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_left_range_check(Named_Function_Event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_right_range_check(Named_Function_Event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Named_Function_Event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Named_Function_Event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Named_Function_Event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_check_unary_p1_expr_range_check(Named_Function_Event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Named_Function_Event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Named_Function_Event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_check_binary_PRESENT);
        Named_Function_Event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_check_unary_PRESENT);
        Named_Function_Event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_PRESENT);
        Named_Function_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_PRESENT);
        Named_Function_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_PRESENT);
        Named_Function_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Named_Function_Event_event_controller_PRESENT);
        Named_Function_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert((((Interface_Event_source_vc == Interface_Event_source_actuator) || (Interface_Event_source_vc == Interface_Event_source_controller)) || (Interface_Event_source_vc == Interface_Event_source_env)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert((((Interface_Event_dest_vc == Interface_Event_dest_actuator) || (Interface_Event_dest_vc == Interface_Event_dest_controller)) || (Interface_Event_dest_vc == Interface_Event_dest_env)));
}
inline Interface_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_oper_range_check(Interface_Event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Interface_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Interface_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Interface_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Interface_Event_event_actuator_msg_in_check_binary_p1_oper_vc == Interface_Event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_left_range_check(Interface_Event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_right_range_check(Interface_Event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Interface_Event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Interface_Event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Interface_Event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Interface_Event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_check_unary_p1_expr_range_check(Interface_Event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Interface_Event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Interface_Event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_input_none_PRESENT);
        Interface_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_check_binary_PRESENT);
        Interface_Event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_check_unary_PRESENT);
        Interface_Event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_result_p1_range_check(Interface_Event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Interface_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_result_PRESENT);
        Interface_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_PRESENT);
        Interface_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_PRESENT);
        Interface_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_result_p1_range_check(Interface_Event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Interface_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_input_none_PRESENT);
        Interface_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_result_PRESENT);
        Interface_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_oper_range_check(Interface_Event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Interface_Event_event_controller_msg_out_check_binary_p1_oper_vc == Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Interface_Event_event_controller_msg_out_check_binary_p1_oper_vc == Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Interface_Event_event_controller_msg_out_check_binary_p1_oper_vc == Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Interface_Event_event_controller_msg_out_check_binary_p1_oper_vc == Interface_Event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_left_range_check(Interface_Event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_right_range_check(Interface_Event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Interface_Event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Interface_Event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Interface_Event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Interface_Event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_check_unary_p1_expr_range_check(Interface_Event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Interface_Event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Interface_Event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_check_binary_PRESENT);
        Interface_Event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_check_unary_PRESENT);
        Interface_Event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_PRESENT);
        Interface_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_PRESENT);
        Interface_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_PRESENT);
        Interface_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Interface_Event_event_controller_PRESENT);
        Interface_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_controller)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_controller)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env)));
}
inline Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_input_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_check_binary_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_check_unary_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_p1_range_check(Observable_Event_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_result_p1_range_check(Observable_Event_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left_range_check(Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right_range_check(Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_input_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_input_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_check_binary_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_check_unary_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_PRESENT);
        Observable_Event_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_input_event_event_controller_PRESENT);
        Observable_Event_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_controller)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_controller)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env)));
}
inline Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_output_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_check_binary_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_check_unary_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_p1_range_check(Observable_Event_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_result_p1_range_check(Observable_Event_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left_range_check(Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right_range_check(Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_output_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_output_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_check_binary_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_check_unary_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_PRESENT);
        Observable_Event_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_output_event_event_controller_PRESENT);
        Observable_Event_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_controller)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_controller)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and) || (Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_check_binary_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_check_unary_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_PRESENT);
        Observable_Event_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_PRESENT);
        Observable_Event_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_controller)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_controller)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_check_binary_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_check_unary_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_PRESENT);
        Events_Ty_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_PRESENT);
        Events_Ty_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_controller)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_controller)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_check_binary_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_check_unary_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_PRESENT);
        Events_Ty_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_PRESENT);
        Events_Ty_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_controller)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_controller)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and) || (Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and) || (Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or)) || (Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_Ty_elem_init_value(dst)
{
    skip;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        Events_Ty_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 9)
    {
        Events_Ty_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_timers_actuator_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_controller_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_assign_value(dst, src)
{
    System_State_timers_actuator_assign_value(dst.actuator, src.actuator);
    System_State_timers_controller_assign_value(dst.controller, src.controller);
    System_State_timers_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline System_State_actuator_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_source_range_check(System_State_actuator_queue_elem_input_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_actuator) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_controller)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_env)));
}
inline System_State_actuator_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_dest_range_check(System_State_actuator_queue_elem_input_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_actuator) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_controller)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_env)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_source_range_check(System_State_actuator_queue_elem_output_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_actuator) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_controller)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_env)));
}
inline System_State_actuator_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_dest_range_check(System_State_actuator_queue_elem_output_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_actuator) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_controller)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_env)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_source_range_check(System_State_actuator_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_actuator) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_controller)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_dest_range_check(System_State_actuator_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_actuator) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_controller)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_no_event_PRESENT);
        System_State_actuator_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_actuator_queue_elem_system_startup_PRESENT);
        System_State_actuator_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_PRESENT);
        System_State_actuator_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_PRESENT);
        System_State_actuator_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_actuator_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_actuator_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_actuator_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_size_check(System_State_actuator_queue_sc)
{
    assert(((System_State_actuator_queue_sc >= 0) && (System_State_actuator_queue_sc <= 2)));
}
inline System_State_controller_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_source_range_check(System_State_controller_queue_elem_input_event_source_vc)
{
    assert((((System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_actuator) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_controller)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_env)));
}
inline System_State_controller_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_dest_range_check(System_State_controller_queue_elem_input_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_actuator) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_controller)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_env)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_source_range_check(System_State_controller_queue_elem_output_event_source_vc)
{
    assert((((System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_actuator) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_controller)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_env)));
}
inline System_State_controller_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_dest_range_check(System_State_controller_queue_elem_output_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_actuator) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_controller)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_env)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_source_range_check(System_State_controller_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_actuator) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_controller)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_env)));
}
inline System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_dest_range_check(System_State_controller_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_actuator) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_controller)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_env)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc)
{
    assert(((((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_and) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_or)) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_xor)) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_o_implies)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_oper_assign_value(dst.oper, src.oper);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_left_assign_value(dst.left, src.left);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_right_assign_value(dst.right, src.right);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_binary_assign_value(dst.data.check_binary, src.data.check_binary);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_check_unary_assign_value(dst.data.check_unary, src.data.check_unary);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_no_event_PRESENT);
        System_State_controller_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_controller_queue_elem_system_startup_PRESENT);
        System_State_controller_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_PRESENT);
        System_State_controller_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_PRESENT);
        System_State_controller_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_PRESENT);
        System_State_controller_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_controller_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_controller_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    for(i : src.length .. 1)
    {
        System_State_controller_queue_elem_init_value(dst.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_size_check(System_State_controller_queue_sc)
{
    assert(((System_State_controller_queue_sc >= 0) && (System_State_controller_queue_sc <= 2)));
}
inline System_State_actuator_state_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_state_range_check(dst);
}
inline System_State_actuator_state_range_check(System_State_actuator_state_vc)
{
    assert((System_State_actuator_state_vc == System_State_actuator_state_wait));
}
inline System_State_actuator_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_init_done_range_check(dst);
}
inline System_State_actuator_init_done_range_check(System_State_actuator_init_done_vc)
{
    assert(true);
}
inline System_State_actuator_sender_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_sender_range_check(dst);
}
inline System_State_actuator_sender_range_check(System_State_actuator_sender_vc)
{
    assert((((System_State_actuator_sender_vc == System_State_actuator_sender_actuator) || (System_State_actuator_sender_vc == System_State_actuator_sender_controller)) || (System_State_actuator_sender_vc == System_State_actuator_sender_env)));
}
inline System_State_actuator_boolean_result_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_boolean_result_range_check(dst);
}
inline System_State_actuator_boolean_result_range_check(System_State_actuator_boolean_result_vc)
{
    assert(true);
}
inline System_State_actuator_boolean_binary_oper_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_boolean_binary_oper_range_check(dst);
}
inline System_State_actuator_boolean_binary_oper_range_check(System_State_actuator_boolean_binary_oper_vc)
{
    assert(((((System_State_actuator_boolean_binary_oper_vc == System_State_actuator_boolean_binary_oper_o_and) || (System_State_actuator_boolean_binary_oper_vc == System_State_actuator_boolean_binary_oper_o_or)) || (System_State_actuator_boolean_binary_oper_vc == System_State_actuator_boolean_binary_oper_o_xor)) || (System_State_actuator_boolean_binary_oper_vc == System_State_actuator_boolean_binary_oper_o_implies)));
}
inline System_State_actuator_boolean_binary_left_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_boolean_binary_left_range_check(dst);
}
inline System_State_actuator_boolean_binary_left_range_check(System_State_actuator_boolean_binary_left_vc)
{
    assert(true);
}
inline System_State_actuator_boolean_binary_right_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_boolean_binary_right_range_check(dst);
}
inline System_State_actuator_boolean_binary_right_range_check(System_State_actuator_boolean_binary_right_vc)
{
    assert(true);
}
inline System_State_actuator_boolean_binary_assign_value(dst, src)
{
    System_State_actuator_boolean_binary_oper_assign_value(dst.oper, src.oper);
    System_State_actuator_boolean_binary_left_assign_value(dst.left, src.left);
    System_State_actuator_boolean_binary_right_assign_value(dst.right, src.right);
}
inline System_State_actuator_boolean_unary_expr_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_boolean_unary_expr_range_check(dst);
}
inline System_State_actuator_boolean_unary_expr_range_check(System_State_actuator_boolean_unary_expr_vc)
{
    assert(true);
}
inline System_State_actuator_boolean_unary_assign_value(dst, src)
{
    System_State_actuator_boolean_unary_expr_assign_value(dst.expr, src.expr);
}
inline System_State_actuator_assign_value(dst, src)
{
    System_State_actuator_state_assign_value(dst.state, src.state);
    System_State_actuator_init_done_assign_value(dst.init_done, src.init_done);
    System_State_actuator_sender_assign_value(dst.sender, src.sender);
    System_State_actuator_boolean_result_assign_value(dst.boolean_result, src.boolean_result);
    System_State_actuator_boolean_binary_assign_value(dst.boolean_binary, src.boolean_binary);
    System_State_actuator_boolean_unary_assign_value(dst.boolean_unary, src.boolean_unary);
}
inline System_State_controller_state_assign_value(dst, src)
{
    dst = src;
    System_State_controller_state_range_check(dst);
}
inline System_State_controller_state_range_check(System_State_controller_state_vc)
{
    assert((((((((((((((((((((System_State_controller_state_vc == System_State_controller_state_checkor4) || (System_State_controller_state_vc == System_State_controller_state_checkor3)) || (System_State_controller_state_vc == System_State_controller_state_checkand1)) || (System_State_controller_state_vc == System_State_controller_state_checkimplies1)) || (System_State_controller_state_vc == System_State_controller_state_checknot2)) || (System_State_controller_state_vc == System_State_controller_state_checkand3)) || (System_State_controller_state_vc == System_State_controller_state_checkimplies3)) || (System_State_controller_state_vc == System_State_controller_state_checkor1)) || (System_State_controller_state_vc == System_State_controller_state_checkor2)) || (System_State_controller_state_vc == System_State_controller_state_checkand2)) || (System_State_controller_state_vc == System_State_controller_state_checknot1)) || (System_State_controller_state_vc == System_State_controller_state_checkand4)) || (System_State_controller_state_vc == System_State_controller_state_checkxor1)) || (System_State_controller_state_vc == System_State_controller_state_error)) || (System_State_controller_state_vc == System_State_controller_state_checkimplies2)) || (System_State_controller_state_vc == System_State_controller_state_checkimplies4)) || (System_State_controller_state_vc == System_State_controller_state_checkxor2)) || (System_State_controller_state_vc == System_State_controller_state_checkxor4)) || (System_State_controller_state_vc == System_State_controller_state_checkxor3)));
}
inline System_State_controller_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_controller_init_done_range_check(dst);
}
inline System_State_controller_init_done_range_check(System_State_controller_init_done_vc)
{
    assert(true);
}
inline System_State_controller_sender_assign_value(dst, src)
{
    dst = src;
    System_State_controller_sender_range_check(dst);
}
inline System_State_controller_sender_range_check(System_State_controller_sender_vc)
{
    assert((((System_State_controller_sender_vc == System_State_controller_sender_actuator) || (System_State_controller_sender_vc == System_State_controller_sender_controller)) || (System_State_controller_sender_vc == System_State_controller_sender_env)));
}
inline System_State_controller_boolean_result_assign_value(dst, src)
{
    dst = src;
    System_State_controller_boolean_result_range_check(dst);
}
inline System_State_controller_boolean_result_range_check(System_State_controller_boolean_result_vc)
{
    assert(true);
}
inline System_State_controller_binary_boolean_oper_assign_value(dst, src)
{
    dst = src;
    System_State_controller_binary_boolean_oper_range_check(dst);
}
inline System_State_controller_binary_boolean_oper_range_check(System_State_controller_binary_boolean_oper_vc)
{
    assert(((((System_State_controller_binary_boolean_oper_vc == System_State_controller_binary_boolean_oper_o_and) || (System_State_controller_binary_boolean_oper_vc == System_State_controller_binary_boolean_oper_o_or)) || (System_State_controller_binary_boolean_oper_vc == System_State_controller_binary_boolean_oper_o_xor)) || (System_State_controller_binary_boolean_oper_vc == System_State_controller_binary_boolean_oper_o_implies)));
}
inline System_State_controller_binary_boolean_left_assign_value(dst, src)
{
    dst = src;
    System_State_controller_binary_boolean_left_range_check(dst);
}
inline System_State_controller_binary_boolean_left_range_check(System_State_controller_binary_boolean_left_vc)
{
    assert(true);
}
inline System_State_controller_binary_boolean_right_assign_value(dst, src)
{
    dst = src;
    System_State_controller_binary_boolean_right_range_check(dst);
}
inline System_State_controller_binary_boolean_right_range_check(System_State_controller_binary_boolean_right_vc)
{
    assert(true);
}
inline System_State_controller_binary_boolean_assign_value(dst, src)
{
    System_State_controller_binary_boolean_oper_assign_value(dst.oper, src.oper);
    System_State_controller_binary_boolean_left_assign_value(dst.left, src.left);
    System_State_controller_binary_boolean_right_assign_value(dst.right, src.right);
}
inline System_State_controller_unary_boolean_expr_assign_value(dst, src)
{
    dst = src;
    System_State_controller_unary_boolean_expr_range_check(dst);
}
inline System_State_controller_unary_boolean_expr_range_check(System_State_controller_unary_boolean_expr_vc)
{
    assert(true);
}
inline System_State_controller_unary_boolean_assign_value(dst, src)
{
    System_State_controller_unary_boolean_expr_assign_value(dst.expr, src.expr);
}
inline System_State_controller_error_assign_value(dst, src)
{
    dst = src;
    System_State_controller_error_range_check(dst);
}
inline System_State_controller_error_range_check(System_State_controller_error_vc)
{
    assert(((System_State_controller_error_vc >= -1024) && (System_State_controller_error_vc <= 1024)));
}
inline System_State_controller_finished_assign_value(dst, src)
{
    dst = src;
    System_State_controller_finished_range_check(dst);
}
inline System_State_controller_finished_range_check(System_State_controller_finished_vc)
{
    assert(((System_State_controller_finished_vc >= -1024) && (System_State_controller_finished_vc <= 1024)));
}
inline System_State_controller_assign_value(dst, src)
{
    System_State_controller_state_assign_value(dst.state, src.state);
    System_State_controller_init_done_assign_value(dst.init_done, src.init_done);
    System_State_controller_sender_assign_value(dst.sender, src.sender);
    System_State_controller_boolean_result_assign_value(dst.boolean_result, src.boolean_result);
    System_State_controller_binary_boolean_assign_value(dst.binary_boolean, src.binary_boolean);
    System_State_controller_unary_boolean_assign_value(dst.unary_boolean, src.unary_boolean);
    System_State_controller_error_assign_value(dst.error, src.error);
    System_State_controller_finished_assign_value(dst.finished, src.finished);
}
inline System_State_assign_value(dst, src)
{
    System_State_timers_assign_value(dst.timers, src.timers);
    System_State_actuator_queue_assign_value(dst.actuator_queue, src.actuator_queue);
    System_State_controller_queue_assign_value(dst.controller_queue, src.controller_queue);
    System_State_actuator_assign_value(dst.actuator, src.actuator);
    System_State_controller_assign_value(dst.controller, src.controller);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
inline TimerData_timer_enabled_assign_value(dst, src)
{
    dst = src;
    TimerData_timer_enabled_range_check(dst);
}
inline TimerData_timer_enabled_range_check(TimerData_timer_enabled_vc)
{
    assert(true);
}
inline TimerData_interval_assign_value(dst, src)
{
    dst = src;
    TimerData_interval_range_check(dst);
}
inline TimerData_interval_range_check(TimerData_interval_vc)
{
    assert(((TimerData_interval_vc >= 0) && (TimerData_interval_vc <= 50000)));
}
inline TimerData_assign_value(dst, src)
{
    TimerData_timer_enabled_assign_value(dst.timer_enabled, src.timer_enabled);
    TimerData_interval_assign_value(dst.interval, src.interval);
}
inline AggregateTimerData_actuator_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_controller_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_assign_value(dst, src)
{
    AggregateTimerData_actuator_assign_value(dst.actuator, src.actuator);
    AggregateTimerData_controller_assign_value(dst.controller, src.controller);
    AggregateTimerData_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline global_dataview_init()
{
    d_step {
        nothing_init();
    }
}
