/* CIF PROCESS (250, 150), (150, 75) */
process Actuator;
    /* CIF TEXT (1512, 90), (290, 140) */
    -- Text area for declarations and comments
    
    dcl boolean_result MyBooleanResult;
    
    dcl boolean_binary BinaryBooleanTestParam;
    dcl boolean_unary UnaryBooleanTestParam;
    /* CIF ENDTEXT */
    /* CIF START (327, 15), (70, 35) */
    START;
        /* CIF NEXTSTATE (327, 65), (70, 35) */
        NEXTSTATE Wait;
    /* CIF state (1075, 39), (70, 35) */
    state Wait;
        /* CIF input (1004, 94), (192, 35) */
        input check_unary(boolean_unary);
            /* CIF task (966, 149), (269, 35) */
            task boolean_result := not boolean_unary.expr;
            /* CIF output (1023, 204), (154, 35) */
            output result(boolean_result);
            /* CIF NEXTSTATE (1066, 254), (70, 35) */
            NEXTSTATE Wait;
    endstate;
    /* CIF state (1358, 252), (70, 35) */
    state Wait;
        /* CIF input (1284, 307), (199, 35) */
        input check_binary(boolean_binary);
            /* CIF decision (1311, 362), (145, 50) */
            decision boolean_binary.oper;
                /* CIF ANSWER (919, 432), (70, 23) */
                (o_or):
                    /* CIF task (761, 475), (385, 35) */
                    task boolean_result := boolean_binary.left or boolean_binary.right;
                /* CIF ANSWER (1325, 432), (70, 23) */
                (o_xor):
                    /* CIF task (1164, 475), (391, 35) */
                    task boolean_result := boolean_binary.left xor boolean_binary.right;
                /* CIF ANSWER (1719, 432), (79, 23) */
                (o_implies):
                    /* CIF task (1565, 475), (387, 35) */
                    task boolean_result := boolean_binary.left => boolean_binary.right;
                /* CIF ANSWER (513, 432), (70, 23) */
                (o_and):
                    /* CIF task (350, 475), (394, 35) */
                    task boolean_result := boolean_binary.left and boolean_binary.right;
            enddecision;
            /* CIF output (1307, 526), (154, 35) */
            output result(boolean_result);
            /* CIF NEXTSTATE (1349, 576), (70, 35) */
            NEXTSTATE Wait;
    endstate;
endprocess Actuator;