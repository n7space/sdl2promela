#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_my_union_speed int
#define Actuator_Context_my_union_accel int
#define Actuator_Context_my_union_det int
#define Actuator_Context_my_bool bool
#define Actuator_Context_my_array_elem int
#define Actuator_Context_my_derived_array_elem int
#define Actuator_Context_my_int int
#define Actuator_Context_my_struct_mass int
#define Actuator_Context_my_struct_charge int
#define Actuator_Context_my_enum int
#define Actuator_Context_my_fixed_elem int
#define Actuator_Context_my_derived_fixed_elem int
#define Actuator_Myunion_Selection int
#define Controller_States int
#define Controller_Context_state int
#define Controller_Context_init_done bool
#define Controller_Context_error int
#define Controller_Context_reached int
#define Controller_Context_my_union_speed int
#define Controller_Context_my_union_accel int
#define Controller_Context_my_bool bool
#define Controller_Context_my_arr_elem int
#define Controller_Context_my_int int
#define Controller_Context_my_struct_mass int
#define Controller_Context_my_struct_charge int
#define Controller_Context_my_enum int
#define Controller_Context_my_fixed_elem int
#define Controller_Context_my_derived_array_elem int
#define Controller_Context_my_derived_fixed_elem int
#define Controller_Myunion_Selection int
#define MyInteger int
#define MyBoolean bool
#define MyArray_elem int
#define MyDerivedArray_elem int
#define MyUnion_speed int
#define MyUnion_accel int
#define MyEnum int
#define MyStruct_mass int
#define MyStruct_charge int
#define MyFixed_elem int
#define MyDerivedFixed_elem int
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define PID int
#define Actuator_Event_msg_in_test_derived_length_p1_elem int
#define Actuator_Event_msg_in_test_exist_p1_mass int
#define Actuator_Event_msg_in_test_exist_p1_charge int
#define Actuator_Event_msg_in_test_length_p1_elem int
#define Actuator_Event_msg_in_test_length_derived_fixed_p1_elem int
#define Actuator_Event_msg_in_test_length_fixed_p1_elem int
#define Actuator_Event_msg_in_test_num_p1 int
#define Actuator_Event_msg_in_test_present_p1_speed int
#define Actuator_Event_msg_in_test_present_p1_accel int
#define Actuator_Event_msg_in_test_to_enum_p1_speed int
#define Actuator_Event_msg_in_test_to_enum_p1_accel int
#define Actuator_Event_msg_in_test_to_selector_p1 int
#define Actuator_Event_msg_in_test_val_p1 int
#define Actuator_Event_msg_out_result_p1 bool
#define Actuator_Event_msg_out_result_enum_p1 int
#define Actuator_Event_msg_out_result_int_p1 int
#define Controller_Event_msg_in_result_p1 bool
#define Controller_Event_msg_in_result_enum_p1 int
#define Controller_Event_msg_in_result_int_p1 int
#define Controller_Event_msg_out_test_derived_length_p1_elem int
#define Controller_Event_msg_out_test_exist_p1_mass int
#define Controller_Event_msg_out_test_exist_p1_charge int
#define Controller_Event_msg_out_test_length_p1_elem int
#define Controller_Event_msg_out_test_length_derived_fixed_p1_elem int
#define Controller_Event_msg_out_test_length_fixed_p1_elem int
#define Controller_Event_msg_out_test_num_p1 int
#define Controller_Event_msg_out_test_present_p1_speed int
#define Controller_Event_msg_out_test_present_p1_accel int
#define Controller_Event_msg_out_test_to_enum_p1_speed int
#define Controller_Event_msg_out_test_to_enum_p1_accel int
#define Controller_Event_msg_out_test_to_selector_p1 int
#define Controller_Event_msg_out_test_val_p1 int
#define Observer_State_Kind int
#define Function_Event_actuator_msg_in_test_derived_length_p1_elem int
#define Function_Event_actuator_msg_in_test_exist_p1_mass int
#define Function_Event_actuator_msg_in_test_exist_p1_charge int
#define Function_Event_actuator_msg_in_test_length_p1_elem int
#define Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Function_Event_actuator_msg_in_test_length_fixed_p1_elem int
#define Function_Event_actuator_msg_in_test_num_p1 int
#define Function_Event_actuator_msg_in_test_present_p1_speed int
#define Function_Event_actuator_msg_in_test_present_p1_accel int
#define Function_Event_actuator_msg_in_test_to_enum_p1_speed int
#define Function_Event_actuator_msg_in_test_to_enum_p1_accel int
#define Function_Event_actuator_msg_in_test_to_selector_p1 int
#define Function_Event_actuator_msg_in_test_val_p1 int
#define Function_Event_actuator_msg_out_result_p1 bool
#define Function_Event_actuator_msg_out_result_enum_p1 int
#define Function_Event_actuator_msg_out_result_int_p1 int
#define Function_Event_controller_msg_in_result_p1 bool
#define Function_Event_controller_msg_in_result_enum_p1 int
#define Function_Event_controller_msg_in_result_int_p1 int
#define Function_Event_controller_msg_out_test_derived_length_p1_elem int
#define Function_Event_controller_msg_out_test_exist_p1_mass int
#define Function_Event_controller_msg_out_test_exist_p1_charge int
#define Function_Event_controller_msg_out_test_length_p1_elem int
#define Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Function_Event_controller_msg_out_test_length_fixed_p1_elem int
#define Function_Event_controller_msg_out_test_num_p1 int
#define Function_Event_controller_msg_out_test_present_p1_speed int
#define Function_Event_controller_msg_out_test_present_p1_accel int
#define Function_Event_controller_msg_out_test_to_enum_p1_speed int
#define Function_Event_controller_msg_out_test_to_enum_p1_accel int
#define Function_Event_controller_msg_out_test_to_selector_p1 int
#define Function_Event_controller_msg_out_test_val_p1 int
#define Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass int
#define Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge int
#define Named_Function_Event_event_actuator_msg_in_test_length_p1_elem int
#define Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Named_Function_Event_event_actuator_msg_in_test_num_p1 int
#define Named_Function_Event_event_actuator_msg_in_test_present_p1_speed int
#define Named_Function_Event_event_actuator_msg_in_test_present_p1_accel int
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Named_Function_Event_event_actuator_msg_in_test_to_selector_p1 int
#define Named_Function_Event_event_actuator_msg_in_test_val_p1 int
#define Named_Function_Event_event_actuator_msg_out_result_p1 bool
#define Named_Function_Event_event_actuator_msg_out_result_enum_p1 int
#define Named_Function_Event_event_actuator_msg_out_result_int_p1 int
#define Named_Function_Event_event_controller_msg_in_result_p1 bool
#define Named_Function_Event_event_controller_msg_in_result_enum_p1 int
#define Named_Function_Event_event_controller_msg_in_result_int_p1 int
#define Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem int
#define Named_Function_Event_event_controller_msg_out_test_exist_p1_mass int
#define Named_Function_Event_event_controller_msg_out_test_exist_p1_charge int
#define Named_Function_Event_event_controller_msg_out_test_length_p1_elem int
#define Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Named_Function_Event_event_controller_msg_out_test_num_p1 int
#define Named_Function_Event_event_controller_msg_out_test_present_p1_speed int
#define Named_Function_Event_event_controller_msg_out_test_present_p1_accel int
#define Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed int
#define Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel int
#define Named_Function_Event_event_controller_msg_out_test_to_selector_p1 int
#define Named_Function_Event_event_controller_msg_out_test_val_p1 int
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Interface_Event_event_actuator_msg_in_test_exist_p1_mass int
#define Interface_Event_event_actuator_msg_in_test_exist_p1_charge int
#define Interface_Event_event_actuator_msg_in_test_length_p1_elem int
#define Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Interface_Event_event_actuator_msg_in_test_num_p1 int
#define Interface_Event_event_actuator_msg_in_test_present_p1_speed int
#define Interface_Event_event_actuator_msg_in_test_present_p1_accel int
#define Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Interface_Event_event_actuator_msg_in_test_to_selector_p1 int
#define Interface_Event_event_actuator_msg_in_test_val_p1 int
#define Interface_Event_event_actuator_msg_out_result_p1 bool
#define Interface_Event_event_actuator_msg_out_result_enum_p1 int
#define Interface_Event_event_actuator_msg_out_result_int_p1 int
#define Interface_Event_event_controller_msg_in_result_p1 bool
#define Interface_Event_event_controller_msg_in_result_enum_p1 int
#define Interface_Event_event_controller_msg_in_result_int_p1 int
#define Interface_Event_event_controller_msg_out_test_derived_length_p1_elem int
#define Interface_Event_event_controller_msg_out_test_exist_p1_mass int
#define Interface_Event_event_controller_msg_out_test_exist_p1_charge int
#define Interface_Event_event_controller_msg_out_test_length_p1_elem int
#define Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Interface_Event_event_controller_msg_out_test_num_p1 int
#define Interface_Event_event_controller_msg_out_test_present_p1_speed int
#define Interface_Event_event_controller_msg_out_test_present_p1_accel int
#define Interface_Event_event_controller_msg_out_test_to_enum_p1_speed int
#define Interface_Event_event_controller_msg_out_test_to_enum_p1_accel int
#define Interface_Event_event_controller_msg_out_test_to_selector_p1 int
#define Interface_Event_event_controller_msg_out_test_val_p1 int
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass int
#define Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge int
#define Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem int
#define Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Observable_Event_input_event_event_actuator_msg_in_test_num_p1 int
#define Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed int
#define Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel int
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1 int
#define Observable_Event_input_event_event_actuator_msg_in_test_val_p1 int
#define Observable_Event_input_event_event_actuator_msg_out_result_p1 bool
#define Observable_Event_input_event_event_actuator_msg_out_result_enum_p1 int
#define Observable_Event_input_event_event_actuator_msg_out_result_int_p1 int
#define Observable_Event_input_event_event_controller_msg_in_result_p1 bool
#define Observable_Event_input_event_event_controller_msg_in_result_enum_p1 int
#define Observable_Event_input_event_event_controller_msg_in_result_int_p1 int
#define Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass int
#define Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge int
#define Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_num_p1 int
#define Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed int
#define Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel int
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed int
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel int
#define Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1 int
#define Observable_Event_input_event_event_controller_msg_out_test_val_p1 int
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass int
#define Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge int
#define Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem int
#define Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Observable_Event_output_event_event_actuator_msg_in_test_num_p1 int
#define Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed int
#define Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel int
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1 int
#define Observable_Event_output_event_event_actuator_msg_in_test_val_p1 int
#define Observable_Event_output_event_event_actuator_msg_out_result_p1 bool
#define Observable_Event_output_event_event_actuator_msg_out_result_enum_p1 int
#define Observable_Event_output_event_event_actuator_msg_out_result_int_p1 int
#define Observable_Event_output_event_event_controller_msg_in_result_p1 bool
#define Observable_Event_output_event_event_controller_msg_in_result_enum_p1 int
#define Observable_Event_output_event_event_controller_msg_in_result_int_p1 int
#define Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass int
#define Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge int
#define Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_num_p1 int
#define Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed int
#define Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel int
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed int
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel int
#define Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1 int
#define Observable_Event_output_event_event_controller_msg_out_test_val_p1 int
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_p1 bool
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_result_p1 bool
#define Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1 int
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1 int
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1 int
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1 int
#define System_State_actuator_queue_elem_input_event_source int
#define System_State_actuator_queue_elem_input_event_dest int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1 int
#define System_State_actuator_queue_elem_output_event_source int
#define System_State_actuator_queue_elem_output_event_dest int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1 int
#define System_State_actuator_queue_elem_unhandled_input_source int
#define System_State_actuator_queue_elem_unhandled_input_dest int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1 int
#define System_State_controller_queue_elem_input_event_source int
#define System_State_controller_queue_elem_input_event_dest int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1 int
#define System_State_controller_queue_elem_output_event_source int
#define System_State_controller_queue_elem_output_event_dest int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1 int
#define System_State_controller_queue_elem_unhandled_input_source int
#define System_State_controller_queue_elem_unhandled_input_dest int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 bool
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1 bool
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1 int
#define System_State_actuator_state int
#define System_State_actuator_init_done bool
#define System_State_actuator_my_union_speed int
#define System_State_actuator_my_union_accel int
#define System_State_actuator_my_union_det int
#define System_State_actuator_my_bool bool
#define System_State_actuator_my_array_elem int
#define System_State_actuator_my_derived_array_elem int
#define System_State_actuator_my_int int
#define System_State_actuator_my_struct_mass int
#define System_State_actuator_my_struct_charge int
#define System_State_actuator_my_enum int
#define System_State_actuator_my_fixed_elem int
#define System_State_actuator_my_derived_fixed_elem int
#define System_State_controller_state int
#define System_State_controller_init_done bool
#define System_State_controller_error int
#define System_State_controller_reached int
#define System_State_controller_my_union_speed int
#define System_State_controller_my_union_accel int
#define System_State_controller_my_bool bool
#define System_State_controller_my_arr_elem int
#define System_State_controller_my_int int
#define System_State_controller_my_struct_mass int
#define System_State_controller_my_struct_charge int
#define System_State_controller_my_enum int
#define System_State_controller_my_fixed_elem int
#define System_State_controller_my_derived_array_elem int
#define System_State_controller_my_derived_fixed_elem int
#define Actuator_States_wait 0
#define Actuator_Context_state_wait 0
#define Actuator_Context_my_union_NONE 0
#define Actuator_Context_my_union_speed_PRESENT 1
#define Actuator_context_my_union_selection_speed_PRESENT 1
#define Actuator_Context_my_union_accel_PRESENT 2
#define Actuator_context_my_union_selection_accel_PRESENT 2
#define Actuator_Context_my_union_det_speed_present 1
#define Actuator_Context_my_union_det_accel_present 2
#define Actuator_Context_my_enum_speed 0
#define Actuator_Context_my_enum_accel 1
#define Actuator_Myunion_Selection_speed_present 1
#define Actuator_Myunion_Selection_accel_present 2
#define Controller_States_checklengthb 0
#define Controller_States_checkvalb 1
#define Controller_States_checkpresentb 2
#define Controller_States_checklengthderivedarray 3
#define Controller_States_checklengthderivedfixed 4
#define Controller_States_checktoenuma 5
#define Controller_States_reached 6
#define Controller_States_checktoselectora 7
#define Controller_States_checkpresenta 8
#define Controller_States_checktoselectorb 9
#define Controller_States_checkexistb 10
#define Controller_States_error 11
#define Controller_States_checkvala 12
#define Controller_States_checklengthfixed 13
#define Controller_States_checknumb 14
#define Controller_States_checklengtha 15
#define Controller_States_checktoenumb 16
#define Controller_States_checknuma 17
#define Controller_States_checkexista 18
#define Controller_Context_state_checklengthb 0
#define Controller_Context_state_checkvalb 1
#define Controller_Context_state_checkpresentb 2
#define Controller_Context_state_checklengthderivedarray 3
#define Controller_Context_state_checklengthderivedfixed 4
#define Controller_Context_state_checktoenuma 5
#define Controller_Context_state_reached 6
#define Controller_Context_state_checktoselectora 7
#define Controller_Context_state_checkpresenta 8
#define Controller_Context_state_checktoselectorb 9
#define Controller_Context_state_checkexistb 10
#define Controller_Context_state_error 11
#define Controller_Context_state_checkvala 12
#define Controller_Context_state_checklengthfixed 13
#define Controller_Context_state_checknumb 14
#define Controller_Context_state_checklengtha 15
#define Controller_Context_state_checktoenumb 16
#define Controller_Context_state_checknuma 17
#define Controller_Context_state_checkexista 18
#define Controller_Context_my_union_NONE 0
#define Controller_Context_my_union_speed_PRESENT 1
#define Controller_context_my_union_selection_speed_PRESENT 1
#define Controller_Context_my_union_accel_PRESENT 2
#define Controller_context_my_union_selection_accel_PRESENT 2
#define Controller_Context_my_enum_speed 0
#define Controller_Context_my_enum_accel 1
#define Controller_Myunion_Selection_speed_present 1
#define Controller_Myunion_Selection_accel_present 2
#define MyUnion_NONE 0
#define MyUnion_speed_PRESENT 1
#define Myunion_selection_speed_PRESENT 1
#define MyUnion_accel_PRESENT 2
#define Myunion_selection_accel_PRESENT 2
#define MyEnum_speed 0
#define MyEnum_accel 1
#define PID_env 0
#define PID_actuator 1
#define PID_controller 2
#define Actuator_Event_NONE 0
#define Actuator_Event_msg_in_NONE 0
#define Actuator_Event_msg_in_input_none_PRESENT 1
#define Actuator_event_msg_in_selection_input_none_PRESENT 1
#define Actuator_Event_msg_in_test_derived_length_PRESENT 2
#define Actuator_event_msg_in_selection_test_derived_length_PRESENT 2
#define Actuator_Event_msg_in_test_exist_PRESENT 3
#define Actuator_event_msg_in_selection_test_exist_PRESENT 3
#define Actuator_Event_msg_in_test_length_PRESENT 4
#define Actuator_event_msg_in_selection_test_length_PRESENT 4
#define Actuator_Event_msg_in_test_length_derived_fixed_PRESENT 5
#define Actuator_event_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Actuator_Event_msg_in_test_length_fixed_PRESENT 6
#define Actuator_event_msg_in_selection_test_length_fixed_PRESENT 6
#define Actuator_Event_msg_in_test_num_p1_speed 0
#define Actuator_Event_msg_in_test_num_p1_accel 1
#define Actuator_Event_msg_in_test_num_PRESENT 7
#define Actuator_event_msg_in_selection_test_num_PRESENT 7
#define Actuator_Event_msg_in_test_present_p1_NONE 0
#define Actuator_Event_msg_in_test_present_p1_speed_PRESENT 1
#define Actuator_event_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Actuator_Event_msg_in_test_present_p1_accel_PRESENT 2
#define Actuator_event_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Actuator_Event_msg_in_test_present_PRESENT 8
#define Actuator_event_msg_in_selection_test_present_PRESENT 8
#define Actuator_Event_msg_in_test_to_enum_p1_NONE 0
#define Actuator_Event_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Actuator_event_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Actuator_Event_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Actuator_event_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Actuator_Event_msg_in_test_to_enum_PRESENT 9
#define Actuator_event_msg_in_selection_test_to_enum_PRESENT 9
#define Actuator_Event_msg_in_test_to_selector_p1_speed 0
#define Actuator_Event_msg_in_test_to_selector_p1_accel 1
#define Actuator_Event_msg_in_test_to_selector_PRESENT 10
#define Actuator_event_msg_in_selection_test_to_selector_PRESENT 10
#define Actuator_Event_msg_in_test_val_PRESENT 11
#define Actuator_event_msg_in_selection_test_val_PRESENT 11
#define Actuator_Event_msg_in_PRESENT 1
#define Actuator_event_selection_msg_in_PRESENT 1
#define Actuator_Event_msg_out_NONE 0
#define Actuator_Event_msg_out_result_PRESENT 1
#define Actuator_event_msg_out_selection_result_PRESENT 1
#define Actuator_Event_msg_out_result_enum_p1_speed 0
#define Actuator_Event_msg_out_result_enum_p1_accel 1
#define Actuator_Event_msg_out_result_enum_PRESENT 2
#define Actuator_event_msg_out_selection_result_enum_PRESENT 2
#define Actuator_Event_msg_out_result_int_PRESENT 3
#define Actuator_event_msg_out_selection_result_int_PRESENT 3
#define Actuator_Event_msg_out_PRESENT 2
#define Actuator_event_selection_msg_out_PRESENT 2
#define Controller_Event_NONE 0
#define Controller_Event_msg_in_NONE 0
#define Controller_Event_msg_in_input_none_PRESENT 1
#define Controller_event_msg_in_selection_input_none_PRESENT 1
#define Controller_Event_msg_in_result_PRESENT 2
#define Controller_event_msg_in_selection_result_PRESENT 2
#define Controller_Event_msg_in_result_enum_p1_speed 0
#define Controller_Event_msg_in_result_enum_p1_accel 1
#define Controller_Event_msg_in_result_enum_PRESENT 3
#define Controller_event_msg_in_selection_result_enum_PRESENT 3
#define Controller_Event_msg_in_result_int_PRESENT 4
#define Controller_event_msg_in_selection_result_int_PRESENT 4
#define Controller_Event_msg_in_PRESENT 1
#define Controller_event_selection_msg_in_PRESENT 1
#define Controller_Event_msg_out_NONE 0
#define Controller_Event_msg_out_test_derived_length_PRESENT 1
#define Controller_event_msg_out_selection_test_derived_length_PRESENT 1
#define Controller_Event_msg_out_test_exist_PRESENT 2
#define Controller_event_msg_out_selection_test_exist_PRESENT 2
#define Controller_Event_msg_out_test_length_PRESENT 3
#define Controller_event_msg_out_selection_test_length_PRESENT 3
#define Controller_Event_msg_out_test_length_derived_fixed_PRESENT 4
#define Controller_event_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Controller_Event_msg_out_test_length_fixed_PRESENT 5
#define Controller_event_msg_out_selection_test_length_fixed_PRESENT 5
#define Controller_Event_msg_out_test_num_p1_speed 0
#define Controller_Event_msg_out_test_num_p1_accel 1
#define Controller_Event_msg_out_test_num_PRESENT 6
#define Controller_event_msg_out_selection_test_num_PRESENT 6
#define Controller_Event_msg_out_test_present_p1_NONE 0
#define Controller_Event_msg_out_test_present_p1_speed_PRESENT 1
#define Controller_event_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Controller_Event_msg_out_test_present_p1_accel_PRESENT 2
#define Controller_event_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Controller_Event_msg_out_test_present_PRESENT 7
#define Controller_event_msg_out_selection_test_present_PRESENT 7
#define Controller_Event_msg_out_test_to_enum_p1_NONE 0
#define Controller_Event_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Controller_event_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Controller_Event_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Controller_event_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Controller_Event_msg_out_test_to_enum_PRESENT 8
#define Controller_event_msg_out_selection_test_to_enum_PRESENT 8
#define Controller_Event_msg_out_test_to_selector_p1_speed 0
#define Controller_Event_msg_out_test_to_selector_p1_accel 1
#define Controller_Event_msg_out_test_to_selector_PRESENT 9
#define Controller_event_msg_out_selection_test_to_selector_PRESENT 9
#define Controller_Event_msg_out_test_val_PRESENT 10
#define Controller_event_msg_out_selection_test_val_PRESENT 10
#define Controller_Event_msg_out_PRESENT 2
#define Controller_event_selection_msg_out_PRESENT 2
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_actuator_NONE 0
#define Function_Event_actuator_msg_in_NONE 0
#define Function_Event_actuator_msg_in_input_none_PRESENT 1
#define Function_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Function_Event_actuator_msg_in_test_derived_length_PRESENT 2
#define Function_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Function_Event_actuator_msg_in_test_exist_PRESENT 3
#define Function_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Function_Event_actuator_msg_in_test_length_PRESENT 4
#define Function_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Function_Event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Function_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Function_Event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Function_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Function_Event_actuator_msg_in_test_num_p1_speed 0
#define Function_Event_actuator_msg_in_test_num_p1_accel 1
#define Function_Event_actuator_msg_in_test_num_PRESENT 7
#define Function_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Function_Event_actuator_msg_in_test_present_p1_NONE 0
#define Function_Event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Function_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Function_Event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Function_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Function_Event_actuator_msg_in_test_present_PRESENT 8
#define Function_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Function_Event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Function_Event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Function_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Function_Event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Function_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Function_Event_actuator_msg_in_test_to_enum_PRESENT 9
#define Function_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Function_Event_actuator_msg_in_test_to_selector_p1_speed 0
#define Function_Event_actuator_msg_in_test_to_selector_p1_accel 1
#define Function_Event_actuator_msg_in_test_to_selector_PRESENT 10
#define Function_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Function_Event_actuator_msg_in_test_val_PRESENT 11
#define Function_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Function_Event_actuator_msg_in_PRESENT 1
#define Function_event_actuator_selection_msg_in_PRESENT 1
#define Function_Event_actuator_msg_out_NONE 0
#define Function_Event_actuator_msg_out_result_PRESENT 1
#define Function_event_actuator_msg_out_selection_result_PRESENT 1
#define Function_Event_actuator_msg_out_result_enum_p1_speed 0
#define Function_Event_actuator_msg_out_result_enum_p1_accel 1
#define Function_Event_actuator_msg_out_result_enum_PRESENT 2
#define Function_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Function_Event_actuator_msg_out_result_int_PRESENT 3
#define Function_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Function_Event_actuator_msg_out_PRESENT 2
#define Function_event_actuator_selection_msg_out_PRESENT 2
#define Function_Event_actuator_PRESENT 1
#define Function_event_selection_actuator_PRESENT 1
#define Function_Event_controller_NONE 0
#define Function_Event_controller_msg_in_NONE 0
#define Function_Event_controller_msg_in_input_none_PRESENT 1
#define Function_event_controller_msg_in_selection_input_none_PRESENT 1
#define Function_Event_controller_msg_in_result_PRESENT 2
#define Function_event_controller_msg_in_selection_result_PRESENT 2
#define Function_Event_controller_msg_in_result_enum_p1_speed 0
#define Function_Event_controller_msg_in_result_enum_p1_accel 1
#define Function_Event_controller_msg_in_result_enum_PRESENT 3
#define Function_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Function_Event_controller_msg_in_result_int_PRESENT 4
#define Function_event_controller_msg_in_selection_result_int_PRESENT 4
#define Function_Event_controller_msg_in_PRESENT 1
#define Function_event_controller_selection_msg_in_PRESENT 1
#define Function_Event_controller_msg_out_NONE 0
#define Function_Event_controller_msg_out_test_derived_length_PRESENT 1
#define Function_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Function_Event_controller_msg_out_test_exist_PRESENT 2
#define Function_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Function_Event_controller_msg_out_test_length_PRESENT 3
#define Function_event_controller_msg_out_selection_test_length_PRESENT 3
#define Function_Event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Function_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Function_Event_controller_msg_out_test_length_fixed_PRESENT 5
#define Function_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Function_Event_controller_msg_out_test_num_p1_speed 0
#define Function_Event_controller_msg_out_test_num_p1_accel 1
#define Function_Event_controller_msg_out_test_num_PRESENT 6
#define Function_event_controller_msg_out_selection_test_num_PRESENT 6
#define Function_Event_controller_msg_out_test_present_p1_NONE 0
#define Function_Event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Function_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Function_Event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Function_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Function_Event_controller_msg_out_test_present_PRESENT 7
#define Function_event_controller_msg_out_selection_test_present_PRESENT 7
#define Function_Event_controller_msg_out_test_to_enum_p1_NONE 0
#define Function_Event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Function_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Function_Event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Function_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Function_Event_controller_msg_out_test_to_enum_PRESENT 8
#define Function_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Function_Event_controller_msg_out_test_to_selector_p1_speed 0
#define Function_Event_controller_msg_out_test_to_selector_p1_accel 1
#define Function_Event_controller_msg_out_test_to_selector_PRESENT 9
#define Function_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Function_Event_controller_msg_out_test_val_PRESENT 10
#define Function_event_controller_msg_out_selection_test_val_PRESENT 10
#define Function_Event_controller_msg_out_PRESENT 2
#define Function_event_controller_selection_msg_out_PRESENT 2
#define Function_Event_controller_PRESENT 2
#define Function_event_selection_controller_PRESENT 2
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_actuator_NONE 0
#define Named_Function_Event_event_actuator_msg_in_NONE 0
#define Named_Function_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Named_function_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Named_function_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_test_exist_PRESENT 3
#define Named_function_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Named_Function_Event_event_actuator_msg_in_test_length_PRESENT 4
#define Named_function_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Named_function_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Named_Function_Event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Named_function_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Named_Function_Event_event_actuator_msg_in_test_num_p1_speed 0
#define Named_Function_Event_event_actuator_msg_in_test_num_p1_accel 1
#define Named_Function_Event_event_actuator_msg_in_test_num_PRESENT 7
#define Named_function_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Named_Function_Event_event_actuator_msg_in_test_present_p1_NONE 0
#define Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Named_function_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Named_function_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_test_present_PRESENT 8
#define Named_function_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Named_function_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Named_function_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Named_function_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Named_Function_Event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Named_function_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Named_Function_Event_event_actuator_msg_in_test_val_PRESENT 11
#define Named_function_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Named_Function_Event_event_actuator_msg_in_PRESENT 1
#define Named_function_event_event_actuator_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_NONE 0
#define Named_Function_Event_event_actuator_msg_out_result_PRESENT 1
#define Named_function_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_result_enum_p1_speed 0
#define Named_Function_Event_event_actuator_msg_out_result_enum_p1_accel 1
#define Named_Function_Event_event_actuator_msg_out_result_enum_PRESENT 2
#define Named_function_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Named_Function_Event_event_actuator_msg_out_result_int_PRESENT 3
#define Named_function_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Named_Function_Event_event_actuator_msg_out_PRESENT 2
#define Named_function_event_event_actuator_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_actuator_PRESENT 1
#define Named_function_event_event_selection_actuator_PRESENT 1
#define Named_Function_Event_event_controller_NONE 0
#define Named_Function_Event_event_controller_msg_in_NONE 0
#define Named_Function_Event_event_controller_msg_in_input_none_PRESENT 1
#define Named_function_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_controller_msg_in_result_PRESENT 2
#define Named_function_event_event_controller_msg_in_selection_result_PRESENT 2
#define Named_Function_Event_event_controller_msg_in_result_enum_p1_speed 0
#define Named_Function_Event_event_controller_msg_in_result_enum_p1_accel 1
#define Named_Function_Event_event_controller_msg_in_result_enum_PRESENT 3
#define Named_function_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Named_Function_Event_event_controller_msg_in_result_int_PRESENT 4
#define Named_function_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Named_Function_Event_event_controller_msg_in_PRESENT 1
#define Named_function_event_event_controller_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_NONE 0
#define Named_Function_Event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Named_function_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_test_exist_PRESENT 2
#define Named_function_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_test_length_PRESENT 3
#define Named_function_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Named_function_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Named_Function_Event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Named_function_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Named_Function_Event_event_controller_msg_out_test_num_p1_speed 0
#define Named_Function_Event_event_controller_msg_out_test_num_p1_accel 1
#define Named_Function_Event_event_controller_msg_out_test_num_PRESENT 6
#define Named_function_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Named_Function_Event_event_controller_msg_out_test_present_p1_NONE 0
#define Named_Function_Event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Named_function_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Named_function_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_test_present_PRESENT 7
#define Named_function_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Named_Function_Event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Named_function_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Named_function_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Named_function_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Named_Function_Event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Named_Function_Event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Named_Function_Event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Named_function_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Named_Function_Event_event_controller_msg_out_test_val_PRESENT 10
#define Named_function_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Named_Function_Event_event_controller_msg_out_PRESENT 2
#define Named_function_event_event_controller_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_controller_PRESENT 2
#define Named_function_event_event_selection_controller_PRESENT 2
#define Interface_Event_source_env 0
#define Interface_Event_source_actuator 1
#define Interface_Event_source_controller 2
#define Interface_Event_dest_env 0
#define Interface_Event_dest_actuator 1
#define Interface_Event_dest_controller 2
#define Interface_Event_event_NONE 0
#define Interface_Event_event_actuator_NONE 0
#define Interface_Event_event_actuator_msg_in_NONE 0
#define Interface_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Interface_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Interface_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Interface_Event_event_actuator_msg_in_test_exist_PRESENT 3
#define Interface_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Interface_Event_event_actuator_msg_in_test_length_PRESENT 4
#define Interface_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Interface_Event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Interface_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Interface_Event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Interface_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Interface_Event_event_actuator_msg_in_test_num_p1_speed 0
#define Interface_Event_event_actuator_msg_in_test_num_p1_accel 1
#define Interface_Event_event_actuator_msg_in_test_num_PRESENT 7
#define Interface_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Interface_Event_event_actuator_msg_in_test_present_p1_NONE 0
#define Interface_Event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Interface_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Interface_Event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Interface_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Interface_Event_event_actuator_msg_in_test_present_PRESENT 8
#define Interface_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Interface_Event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Interface_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Interface_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Interface_Event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Interface_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Interface_Event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Interface_Event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Interface_Event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Interface_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Interface_Event_event_actuator_msg_in_test_val_PRESENT 11
#define Interface_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Interface_Event_event_actuator_msg_in_PRESENT 1
#define Interface_event_event_actuator_selection_msg_in_PRESENT 1
#define Interface_Event_event_actuator_msg_out_NONE 0
#define Interface_Event_event_actuator_msg_out_result_PRESENT 1
#define Interface_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Interface_Event_event_actuator_msg_out_result_enum_p1_speed 0
#define Interface_Event_event_actuator_msg_out_result_enum_p1_accel 1
#define Interface_Event_event_actuator_msg_out_result_enum_PRESENT 2
#define Interface_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Interface_Event_event_actuator_msg_out_result_int_PRESENT 3
#define Interface_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Interface_Event_event_actuator_msg_out_PRESENT 2
#define Interface_event_event_actuator_selection_msg_out_PRESENT 2
#define Interface_Event_event_actuator_PRESENT 1
#define Interface_event_event_selection_actuator_PRESENT 1
#define Interface_Event_event_controller_NONE 0
#define Interface_Event_event_controller_msg_in_NONE 0
#define Interface_Event_event_controller_msg_in_input_none_PRESENT 1
#define Interface_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_controller_msg_in_result_PRESENT 2
#define Interface_event_event_controller_msg_in_selection_result_PRESENT 2
#define Interface_Event_event_controller_msg_in_result_enum_p1_speed 0
#define Interface_Event_event_controller_msg_in_result_enum_p1_accel 1
#define Interface_Event_event_controller_msg_in_result_enum_PRESENT 3
#define Interface_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Interface_Event_event_controller_msg_in_result_int_PRESENT 4
#define Interface_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Interface_Event_event_controller_msg_in_PRESENT 1
#define Interface_event_event_controller_selection_msg_in_PRESENT 1
#define Interface_Event_event_controller_msg_out_NONE 0
#define Interface_Event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Interface_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Interface_Event_event_controller_msg_out_test_exist_PRESENT 2
#define Interface_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Interface_Event_event_controller_msg_out_test_length_PRESENT 3
#define Interface_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Interface_Event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Interface_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Interface_Event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Interface_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Interface_Event_event_controller_msg_out_test_num_p1_speed 0
#define Interface_Event_event_controller_msg_out_test_num_p1_accel 1
#define Interface_Event_event_controller_msg_out_test_num_PRESENT 6
#define Interface_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Interface_Event_event_controller_msg_out_test_present_p1_NONE 0
#define Interface_Event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Interface_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Interface_Event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Interface_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Interface_Event_event_controller_msg_out_test_present_PRESENT 7
#define Interface_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Interface_Event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Interface_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Interface_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Interface_Event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Interface_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Interface_Event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Interface_Event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Interface_Event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Interface_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Interface_Event_event_controller_msg_out_test_val_PRESENT 10
#define Interface_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Interface_Event_event_controller_msg_out_PRESENT 2
#define Interface_event_event_controller_selection_msg_out_PRESENT 2
#define Interface_Event_event_controller_PRESENT 2
#define Interface_event_event_selection_controller_PRESENT 2
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_env 0
#define Observable_Event_input_event_source_actuator 1
#define Observable_Event_input_event_source_controller 2
#define Observable_Event_input_event_dest_env 0
#define Observable_Event_input_event_dest_actuator 1
#define Observable_Event_input_event_dest_controller 2
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_actuator_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_test_exist_PRESENT 3
#define Observable_event_input_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Observable_Event_input_event_event_actuator_msg_in_test_length_PRESENT 4
#define Observable_event_input_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Observable_event_input_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Observable_event_input_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Observable_Event_input_event_event_actuator_msg_in_test_num_p1_speed 0
#define Observable_Event_input_event_event_actuator_msg_in_test_num_p1_accel 1
#define Observable_Event_input_event_event_actuator_msg_in_test_num_PRESENT 7
#define Observable_event_input_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Observable_Event_input_event_event_actuator_msg_in_test_present_p1_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_test_present_PRESENT 8
#define Observable_event_input_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Observable_event_input_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Observable_Event_input_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Observable_event_input_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Observable_Event_input_event_event_actuator_msg_in_test_val_PRESENT 11
#define Observable_event_input_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Observable_Event_input_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_NONE 0
#define Observable_Event_input_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_speed 0
#define Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_accel 1
#define Observable_Event_input_event_event_actuator_msg_out_result_enum_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_out_result_int_PRESENT 3
#define Observable_event_input_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Observable_Event_input_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_actuator_PRESENT 1
#define Observable_event_input_event_event_selection_actuator_PRESENT 1
#define Observable_Event_input_event_event_controller_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_in_result_enum_p1_speed 0
#define Observable_Event_input_event_event_controller_msg_in_result_enum_p1_accel 1
#define Observable_Event_input_event_event_controller_msg_in_result_enum_PRESENT 3
#define Observable_event_input_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Observable_Event_input_event_event_controller_msg_in_result_int_PRESENT 4
#define Observable_event_input_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Observable_Event_input_event_event_controller_msg_in_PRESENT 1
#define Observable_event_input_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_test_exist_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_test_length_PRESENT 3
#define Observable_event_input_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Observable_event_input_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Observable_Event_input_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Observable_event_input_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Observable_Event_input_event_event_controller_msg_out_test_num_p1_speed 0
#define Observable_Event_input_event_event_controller_msg_out_test_num_p1_accel 1
#define Observable_Event_input_event_event_controller_msg_out_test_num_PRESENT 6
#define Observable_event_input_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Observable_Event_input_event_event_controller_msg_out_test_present_p1_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_test_present_PRESENT 7
#define Observable_event_input_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Observable_event_input_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Observable_Event_input_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Observable_event_input_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Observable_Event_input_event_event_controller_msg_out_test_val_PRESENT 10
#define Observable_event_input_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Observable_Event_input_event_event_controller_msg_out_PRESENT 2
#define Observable_event_input_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_controller_PRESENT 2
#define Observable_event_input_event_event_selection_controller_PRESENT 2
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_env 0
#define Observable_Event_output_event_source_actuator 1
#define Observable_Event_output_event_source_controller 2
#define Observable_Event_output_event_dest_env 0
#define Observable_Event_output_event_dest_actuator 1
#define Observable_Event_output_event_dest_controller 2
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_actuator_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_test_exist_PRESENT 3
#define Observable_event_output_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Observable_Event_output_event_event_actuator_msg_in_test_length_PRESENT 4
#define Observable_event_output_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Observable_event_output_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Observable_event_output_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Observable_Event_output_event_event_actuator_msg_in_test_num_p1_speed 0
#define Observable_Event_output_event_event_actuator_msg_in_test_num_p1_accel 1
#define Observable_Event_output_event_event_actuator_msg_in_test_num_PRESENT 7
#define Observable_event_output_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Observable_Event_output_event_event_actuator_msg_in_test_present_p1_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_test_present_PRESENT 8
#define Observable_event_output_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Observable_event_output_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Observable_Event_output_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Observable_event_output_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Observable_Event_output_event_event_actuator_msg_in_test_val_PRESENT 11
#define Observable_event_output_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Observable_Event_output_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_NONE 0
#define Observable_Event_output_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_speed 0
#define Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_accel 1
#define Observable_Event_output_event_event_actuator_msg_out_result_enum_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_out_result_int_PRESENT 3
#define Observable_event_output_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Observable_Event_output_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_actuator_PRESENT 1
#define Observable_event_output_event_event_selection_actuator_PRESENT 1
#define Observable_Event_output_event_event_controller_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_in_result_enum_p1_speed 0
#define Observable_Event_output_event_event_controller_msg_in_result_enum_p1_accel 1
#define Observable_Event_output_event_event_controller_msg_in_result_enum_PRESENT 3
#define Observable_event_output_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Observable_Event_output_event_event_controller_msg_in_result_int_PRESENT 4
#define Observable_event_output_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Observable_Event_output_event_event_controller_msg_in_PRESENT 1
#define Observable_event_output_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_test_exist_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_test_length_PRESENT 3
#define Observable_event_output_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Observable_event_output_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Observable_Event_output_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Observable_event_output_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Observable_Event_output_event_event_controller_msg_out_test_num_p1_speed 0
#define Observable_Event_output_event_event_controller_msg_out_test_num_p1_accel 1
#define Observable_Event_output_event_event_controller_msg_out_test_num_PRESENT 6
#define Observable_event_output_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Observable_Event_output_event_event_controller_msg_out_test_present_p1_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_test_present_PRESENT 7
#define Observable_event_output_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Observable_event_output_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Observable_Event_output_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Observable_event_output_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Observable_Event_output_event_event_controller_msg_out_test_val_PRESENT 10
#define Observable_event_output_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Observable_Event_output_event_event_controller_msg_out_PRESENT 2
#define Observable_event_output_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_controller_PRESENT 2
#define Observable_event_output_event_event_selection_controller_PRESENT 2
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_env 0
#define Observable_Event_unhandled_input_source_actuator 1
#define Observable_Event_unhandled_input_source_controller 2
#define Observable_Event_unhandled_input_dest_env 0
#define Observable_Event_unhandled_input_dest_actuator 1
#define Observable_Event_unhandled_input_dest_controller 2
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_actuator_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_PRESENT 3
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_PRESENT 4
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_speed 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_accel 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_num_PRESENT 7
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_present_PRESENT 8
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_val_PRESENT 11
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_speed 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_accel 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_int_PRESENT 3
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_PRESENT 1
#define Observable_event_unhandled_input_event_selection_actuator_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_speed 0
#define Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_accel 1
#define Observable_Event_unhandled_input_event_controller_msg_in_result_enum_PRESENT 3
#define Observable_event_unhandled_input_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Observable_Event_unhandled_input_event_controller_msg_in_result_int_PRESENT 4
#define Observable_event_unhandled_input_event_controller_msg_in_selection_result_int_PRESENT 4
#define Observable_Event_unhandled_input_event_controller_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_exist_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_PRESENT 3
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_length_PRESENT 3
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_speed 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_accel 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_num_PRESENT 6
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_num_PRESENT 6
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_test_present_PRESENT 7
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_present_PRESENT 7
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT 8
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT 9
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Observable_Event_unhandled_input_event_controller_msg_out_test_val_PRESENT 10
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_val_PRESENT 10
#define Observable_Event_unhandled_input_event_controller_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_PRESENT 2
#define Observable_event_unhandled_input_event_selection_controller_PRESENT 2
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_env 0
#define Events_Ty_elem_input_event_source_actuator 1
#define Events_Ty_elem_input_event_source_controller 2
#define Events_Ty_elem_input_event_dest_env 0
#define Events_Ty_elem_input_event_dest_actuator 1
#define Events_Ty_elem_input_event_dest_controller 2
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_actuator_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_PRESENT 3
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_PRESENT 4
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_speed 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_accel 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_num_PRESENT 7
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_present_PRESENT 8
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_val_PRESENT 11
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_speed 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_accel 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_int_PRESENT 3
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_PRESENT 1
#define Events_ty_elem_input_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_speed 0
#define Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_accel 1
#define Events_Ty_elem_input_event_event_controller_msg_in_result_enum_PRESENT 3
#define Events_ty_elem_input_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Events_Ty_elem_input_event_event_controller_msg_in_result_int_PRESENT 4
#define Events_ty_elem_input_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Events_Ty_elem_input_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_exist_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_PRESENT 3
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_speed 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_accel 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_num_PRESENT 6
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_test_present_PRESENT 7
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Events_Ty_elem_input_event_event_controller_msg_out_test_val_PRESENT 10
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Events_Ty_elem_input_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_PRESENT 2
#define Events_ty_elem_input_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_env 0
#define Events_Ty_elem_output_event_source_actuator 1
#define Events_Ty_elem_output_event_source_controller 2
#define Events_Ty_elem_output_event_dest_env 0
#define Events_Ty_elem_output_event_dest_actuator 1
#define Events_Ty_elem_output_event_dest_controller 2
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_actuator_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_PRESENT 3
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_PRESENT 4
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_speed 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_accel 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_num_PRESENT 7
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_present_PRESENT 8
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_val_PRESENT 11
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_speed 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_accel 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_int_PRESENT 3
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_PRESENT 1
#define Events_ty_elem_output_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_speed 0
#define Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_accel 1
#define Events_Ty_elem_output_event_event_controller_msg_in_result_enum_PRESENT 3
#define Events_ty_elem_output_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Events_Ty_elem_output_event_event_controller_msg_in_result_int_PRESENT 4
#define Events_ty_elem_output_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define Events_Ty_elem_output_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_exist_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_PRESENT 3
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_speed 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_accel 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_num_PRESENT 6
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_test_present_PRESENT 7
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Events_Ty_elem_output_event_event_controller_msg_out_test_val_PRESENT 10
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define Events_Ty_elem_output_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_PRESENT 2
#define Events_ty_elem_output_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_env 0
#define Events_Ty_elem_unhandled_input_source_actuator 1
#define Events_Ty_elem_unhandled_input_source_controller 2
#define Events_Ty_elem_unhandled_input_dest_env 0
#define Events_Ty_elem_unhandled_input_dest_actuator 1
#define Events_Ty_elem_unhandled_input_dest_controller 2
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT 3
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT 4
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_length_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT 7
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_num_PRESENT 7
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT 8
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_present_PRESENT 8
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT 9
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT 10
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT 11
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_val_PRESENT 11
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT 3
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_result_int_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT 3
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_result_enum_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT 4
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_result_int_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_exist_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT 3
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_length_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT 5
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT 6
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_num_PRESENT 6
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT 7
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_present_PRESENT 7
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT 8
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT 9
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT 10
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_val_PRESENT 10
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_controller_PRESENT 2
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_queue_elem_NONE 0
#define System_State_actuator_queue_elem_no_event_PRESENT 1
#define System_state_actuator_queue_elem_selection_no_event_PRESENT 1
#define System_State_actuator_queue_elem_system_startup_PRESENT 2
#define System_state_actuator_queue_elem_selection_system_startup_PRESENT 2
#define System_State_actuator_queue_elem_input_event_source_env 0
#define System_State_actuator_queue_elem_input_event_source_actuator 1
#define System_State_actuator_queue_elem_input_event_source_controller 2
#define System_State_actuator_queue_elem_input_event_dest_env 0
#define System_State_actuator_queue_elem_input_event_dest_actuator 1
#define System_State_actuator_queue_elem_input_event_dest_controller 2
#define System_State_actuator_queue_elem_input_event_event_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_PRESENT 6
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_PRESENT 7
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_PRESENT 10
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_input_event_PRESENT 3
#define System_state_actuator_queue_elem_selection_input_event_PRESENT 3
#define System_State_actuator_queue_elem_output_event_source_env 0
#define System_State_actuator_queue_elem_output_event_source_actuator 1
#define System_State_actuator_queue_elem_output_event_source_controller 2
#define System_State_actuator_queue_elem_output_event_dest_env 0
#define System_State_actuator_queue_elem_output_event_dest_actuator 1
#define System_State_actuator_queue_elem_output_event_dest_controller 2
#define System_State_actuator_queue_elem_output_event_event_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_PRESENT 6
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_PRESENT 7
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_PRESENT 10
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_output_event_PRESENT 4
#define System_state_actuator_queue_elem_selection_output_event_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_source_env 0
#define System_State_actuator_queue_elem_unhandled_input_source_actuator 1
#define System_State_actuator_queue_elem_unhandled_input_source_controller 2
#define System_State_actuator_queue_elem_unhandled_input_dest_env 0
#define System_State_actuator_queue_elem_unhandled_input_dest_actuator 1
#define System_State_actuator_queue_elem_unhandled_input_dest_controller 2
#define System_State_actuator_queue_elem_unhandled_input_event_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT 6
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT 7
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT 10
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_PRESENT 5
#define System_state_actuator_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_queue_elem_NONE 0
#define System_State_controller_queue_elem_no_event_PRESENT 1
#define System_state_controller_queue_elem_selection_no_event_PRESENT 1
#define System_State_controller_queue_elem_system_startup_PRESENT 2
#define System_state_controller_queue_elem_selection_system_startup_PRESENT 2
#define System_State_controller_queue_elem_input_event_source_env 0
#define System_State_controller_queue_elem_input_event_source_actuator 1
#define System_State_controller_queue_elem_input_event_source_controller 2
#define System_State_controller_queue_elem_input_event_dest_env 0
#define System_State_controller_queue_elem_input_event_dest_actuator 1
#define System_State_controller_queue_elem_input_event_dest_controller 2
#define System_State_controller_queue_elem_input_event_event_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_PRESENT 6
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_PRESENT 7
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_PRESENT 10
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_input_event_PRESENT 3
#define System_state_controller_queue_elem_selection_input_event_PRESENT 3
#define System_State_controller_queue_elem_output_event_source_env 0
#define System_State_controller_queue_elem_output_event_source_actuator 1
#define System_State_controller_queue_elem_output_event_source_controller 2
#define System_State_controller_queue_elem_output_event_dest_env 0
#define System_State_controller_queue_elem_output_event_dest_actuator 1
#define System_State_controller_queue_elem_output_event_dest_controller 2
#define System_State_controller_queue_elem_output_event_event_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_PRESENT 6
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_PRESENT 7
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_PRESENT 10
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_output_event_PRESENT 4
#define System_state_controller_queue_elem_selection_output_event_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_source_env 0
#define System_State_controller_queue_elem_unhandled_input_source_actuator 1
#define System_State_controller_queue_elem_unhandled_input_source_controller 2
#define System_State_controller_queue_elem_unhandled_input_dest_env 0
#define System_State_controller_queue_elem_unhandled_input_dest_actuator 1
#define System_State_controller_queue_elem_unhandled_input_dest_controller 2
#define System_State_controller_queue_elem_unhandled_input_event_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_derived_length_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_exist_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT 5
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_derived_fixed_PRESENT 5
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT 6
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_length_fixed_PRESENT 6
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT 7
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_num_PRESENT 7
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT 8
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_present_PRESENT 8
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT 9
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_to_enum_PRESENT 9
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT 10
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_to_selector_PRESENT 10
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT 11
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_val_PRESENT 11
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_enum_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_int_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_result_enum_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_result_int_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_derived_length_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_exist_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_derived_fixed_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT 5
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_length_fixed_PRESENT 5
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT 6
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_num_PRESENT 6
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT 7
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_present_PRESENT 7
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_speed_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_accel_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT 8
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_to_enum_PRESENT 8
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT 9
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_to_selector_PRESENT 9
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT 10
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_val_PRESENT 10
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_PRESENT 5
#define System_state_controller_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_state_wait 0
#define System_State_actuator_my_union_NONE 0
#define System_State_actuator_my_union_speed_PRESENT 1
#define System_state_actuator_my_union_selection_speed_PRESENT 1
#define System_State_actuator_my_union_accel_PRESENT 2
#define System_state_actuator_my_union_selection_accel_PRESENT 2
#define System_State_actuator_my_union_det_speed_present 1
#define System_State_actuator_my_union_det_accel_present 2
#define System_State_actuator_my_enum_speed 0
#define System_State_actuator_my_enum_accel 1
#define System_State_controller_state_checklengthb 0
#define System_State_controller_state_checkvalb 1
#define System_State_controller_state_checkpresentb 2
#define System_State_controller_state_checklengthderivedarray 3
#define System_State_controller_state_checklengthderivedfixed 4
#define System_State_controller_state_checktoenuma 5
#define System_State_controller_state_reached 6
#define System_State_controller_state_checktoselectora 7
#define System_State_controller_state_checkpresenta 8
#define System_State_controller_state_checktoselectorb 9
#define System_State_controller_state_checkexistb 10
#define System_State_controller_state_error 11
#define System_State_controller_state_checkvala 12
#define System_State_controller_state_checklengthfixed 13
#define System_State_controller_state_checknumb 14
#define System_State_controller_state_checklengtha 15
#define System_State_controller_state_checktoenumb 16
#define System_State_controller_state_checknuma 17
#define System_State_controller_state_checkexista 18
#define System_State_controller_my_union_NONE 0
#define System_State_controller_my_union_speed_PRESENT 1
#define System_state_controller_my_union_selection_speed_PRESENT 1
#define System_State_controller_my_union_accel_PRESENT 2
#define System_state_controller_my_union_selection_accel_PRESENT 2
#define System_State_controller_my_enum_speed 0
#define System_State_controller_my_enum_accel 1
typedef Actuator_Context_my_array {
    Actuator_Context_my_array_elem data[6];
    int length;
}

typedef Actuator_Context_my_derived_array {
    Actuator_Context_my_derived_array_elem data[3];
    int length;
}

typedef Actuator_Context_my_derived_fixed {
    Actuator_Context_my_derived_fixed_elem data[2];
}

typedef Actuator_Context_my_fixed {
    Actuator_Context_my_fixed_elem data[2];
}

typedef Actuator_Context_my_struct_exist {
    bool charge;
}

typedef Actuator_Context_my_union_data {
    Actuator_Context_my_union_speed speed;
    Actuator_Context_my_union_accel accel;
}

typedef Actuator_Event_msg_in_input_none {
    bit dummy;
}

typedef Actuator_Event_msg_in_test_derived_length_p1 {
    Actuator_Event_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Actuator_Event_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Actuator_Event_msg_in_test_length_derived_fixed_p1 {
    Actuator_Event_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Actuator_Event_msg_in_test_length_fixed_p1 {
    Actuator_Event_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Actuator_Event_msg_in_test_length_p1 {
    Actuator_Event_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Actuator_Event_msg_in_test_num {
    Actuator_Event_msg_in_test_num_p1 p1;
}

typedef Actuator_Event_msg_in_test_present_p1_data {
    Actuator_Event_msg_in_test_present_p1_speed speed;
    Actuator_Event_msg_in_test_present_p1_accel accel;
}

typedef Actuator_Event_msg_in_test_to_enum_p1_data {
    Actuator_Event_msg_in_test_to_enum_p1_speed speed;
    Actuator_Event_msg_in_test_to_enum_p1_accel accel;
}

typedef Actuator_Event_msg_in_test_to_selector {
    Actuator_Event_msg_in_test_to_selector_p1 p1;
}

typedef Actuator_Event_msg_in_test_val {
    Actuator_Event_msg_in_test_val_p1 p1;
}

typedef Actuator_Event_msg_out_result {
    Actuator_Event_msg_out_result_p1 p1;
}

typedef Actuator_Event_msg_out_result_enum {
    Actuator_Event_msg_out_result_enum_p1 p1;
}

typedef Actuator_Event_msg_out_result_int {
    Actuator_Event_msg_out_result_int_p1 p1;
}

typedef Controller_Context_my_arr {
    Controller_Context_my_arr_elem data[6];
    int length;
}

typedef Controller_Context_my_derived_array {
    Controller_Context_my_derived_array_elem data[3];
    int length;
}

typedef Controller_Context_my_derived_fixed {
    Controller_Context_my_derived_fixed_elem data[2];
}

typedef Controller_Context_my_fixed {
    Controller_Context_my_fixed_elem data[2];
}

typedef Controller_Context_my_struct_exist {
    bool charge;
}

typedef Controller_Context_my_union_data {
    Controller_Context_my_union_speed speed;
    Controller_Context_my_union_accel accel;
}

typedef Controller_Event_msg_in_input_none {
    bit dummy;
}

typedef Controller_Event_msg_in_result {
    Controller_Event_msg_in_result_p1 p1;
}

typedef Controller_Event_msg_in_result_enum {
    Controller_Event_msg_in_result_enum_p1 p1;
}

typedef Controller_Event_msg_in_result_int {
    Controller_Event_msg_in_result_int_p1 p1;
}

typedef Controller_Event_msg_out_test_derived_length_p1 {
    Controller_Event_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Controller_Event_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Controller_Event_msg_out_test_length_derived_fixed_p1 {
    Controller_Event_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Controller_Event_msg_out_test_length_fixed_p1 {
    Controller_Event_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Controller_Event_msg_out_test_length_p1 {
    Controller_Event_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Controller_Event_msg_out_test_num {
    Controller_Event_msg_out_test_num_p1 p1;
}

typedef Controller_Event_msg_out_test_present_p1_data {
    Controller_Event_msg_out_test_present_p1_speed speed;
    Controller_Event_msg_out_test_present_p1_accel accel;
}

typedef Controller_Event_msg_out_test_to_enum_p1_data {
    Controller_Event_msg_out_test_to_enum_p1_speed speed;
    Controller_Event_msg_out_test_to_enum_p1_accel accel;
}

typedef Controller_Event_msg_out_test_to_selector {
    Controller_Event_msg_out_test_to_selector_p1 p1;
}

typedef Controller_Event_msg_out_test_val {
    Controller_Event_msg_out_test_val_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_num {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed speed;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_val {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_result {
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_result_enum {
    Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_result_int {
    Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_result {
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_result_enum {
    Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_result_int {
    Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_num {
    Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_data {
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed speed;
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_data {
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector {
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_val {
    Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1 p1;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_num {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed speed;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_val {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_result {
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_result_enum {
    Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_result_int {
    Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_result {
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_result_enum {
    Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_result_int {
    Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_num {
    Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_data {
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed speed;
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_data {
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector {
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_val {
    Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1 p1;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed speed;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_result {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_result {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed speed;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed speed;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1 p1;
}

typedef Function_Event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_actuator_msg_in_test_derived_length_p1 {
    Function_Event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Function_Event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Function_Event_actuator_msg_in_test_length_derived_fixed_p1 {
    Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Function_Event_actuator_msg_in_test_length_fixed_p1 {
    Function_Event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Function_Event_actuator_msg_in_test_length_p1 {
    Function_Event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Function_Event_actuator_msg_in_test_num {
    Function_Event_actuator_msg_in_test_num_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_present_p1_data {
    Function_Event_actuator_msg_in_test_present_p1_speed speed;
    Function_Event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Function_Event_actuator_msg_in_test_to_enum_p1_data {
    Function_Event_actuator_msg_in_test_to_enum_p1_speed speed;
    Function_Event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Function_Event_actuator_msg_in_test_to_selector {
    Function_Event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_val {
    Function_Event_actuator_msg_in_test_val_p1 p1;
}

typedef Function_Event_actuator_msg_out_result {
    Function_Event_actuator_msg_out_result_p1 p1;
}

typedef Function_Event_actuator_msg_out_result_enum {
    Function_Event_actuator_msg_out_result_enum_p1 p1;
}

typedef Function_Event_actuator_msg_out_result_int {
    Function_Event_actuator_msg_out_result_int_p1 p1;
}

typedef Function_Event_controller_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_controller_msg_in_result {
    Function_Event_controller_msg_in_result_p1 p1;
}

typedef Function_Event_controller_msg_in_result_enum {
    Function_Event_controller_msg_in_result_enum_p1 p1;
}

typedef Function_Event_controller_msg_in_result_int {
    Function_Event_controller_msg_in_result_int_p1 p1;
}

typedef Function_Event_controller_msg_out_test_derived_length_p1 {
    Function_Event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Function_Event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Function_Event_controller_msg_out_test_length_derived_fixed_p1 {
    Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Function_Event_controller_msg_out_test_length_fixed_p1 {
    Function_Event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Function_Event_controller_msg_out_test_length_p1 {
    Function_Event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Function_Event_controller_msg_out_test_num {
    Function_Event_controller_msg_out_test_num_p1 p1;
}

typedef Function_Event_controller_msg_out_test_present_p1_data {
    Function_Event_controller_msg_out_test_present_p1_speed speed;
    Function_Event_controller_msg_out_test_present_p1_accel accel;
}

typedef Function_Event_controller_msg_out_test_to_enum_p1_data {
    Function_Event_controller_msg_out_test_to_enum_p1_speed speed;
    Function_Event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Function_Event_controller_msg_out_test_to_selector {
    Function_Event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Function_Event_controller_msg_out_test_val {
    Function_Event_controller_msg_out_test_val_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_actuator_msg_in_test_derived_length_p1 {
    Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Interface_Event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Interface_Event_event_actuator_msg_in_test_length_fixed_p1 {
    Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Interface_Event_event_actuator_msg_in_test_length_p1 {
    Interface_Event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Interface_Event_event_actuator_msg_in_test_num {
    Interface_Event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_present_p1_data {
    Interface_Event_event_actuator_msg_in_test_present_p1_speed speed;
    Interface_Event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Interface_Event_event_actuator_msg_in_test_to_enum_p1_data {
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Interface_Event_event_actuator_msg_in_test_to_selector {
    Interface_Event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_val {
    Interface_Event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out_result {
    Interface_Event_event_actuator_msg_out_result_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out_result_enum {
    Interface_Event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out_result_int {
    Interface_Event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_result {
    Interface_Event_event_controller_msg_in_result_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_result_enum {
    Interface_Event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Interface_Event_event_controller_msg_in_result_int {
    Interface_Event_event_controller_msg_in_result_int_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_derived_length_p1 {
    Interface_Event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Interface_Event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Interface_Event_event_controller_msg_out_test_length_fixed_p1 {
    Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Interface_Event_event_controller_msg_out_test_length_p1 {
    Interface_Event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Interface_Event_event_controller_msg_out_test_num {
    Interface_Event_event_controller_msg_out_test_num_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_present_p1_data {
    Interface_Event_event_controller_msg_out_test_present_p1_speed speed;
    Interface_Event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Interface_Event_event_controller_msg_out_test_to_enum_p1_data {
    Interface_Event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Interface_Event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Interface_Event_event_controller_msg_out_test_to_selector {
    Interface_Event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_val {
    Interface_Event_event_controller_msg_out_test_val_p1 p1;
}

typedef MyArray {
    MyArray_elem data[6];
    int length;
}

typedef MyDerivedArray {
    MyDerivedArray_elem data[3];
    int length;
}

typedef MyDerivedFixed {
    MyDerivedFixed_elem data[2];
}

typedef MyFixed {
    MyFixed_elem data[2];
}

typedef MyStruct_exist {
    bool charge;
}

typedef MyUnion_data {
    MyUnion_speed speed;
    MyUnion_accel accel;
}

typedef Named_Function_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_actuator_msg_in_test_derived_length_p1 {
    Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Named_Function_Event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1 {
    Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Named_Function_Event_event_actuator_msg_in_test_length_p1 {
    Named_Function_Event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Named_Function_Event_event_actuator_msg_in_test_num {
    Named_Function_Event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_present_p1_data {
    Named_Function_Event_event_actuator_msg_in_test_present_p1_speed speed;
    Named_Function_Event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_data {
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Named_Function_Event_event_actuator_msg_in_test_to_selector {
    Named_Function_Event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_val {
    Named_Function_Event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out_result {
    Named_Function_Event_event_actuator_msg_out_result_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out_result_enum {
    Named_Function_Event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out_result_int {
    Named_Function_Event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_result {
    Named_Function_Event_event_controller_msg_in_result_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_result_enum {
    Named_Function_Event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_in_result_int {
    Named_Function_Event_event_controller_msg_in_result_int_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_derived_length_p1 {
    Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Named_Function_Event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Named_Function_Event_event_controller_msg_out_test_length_fixed_p1 {
    Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Named_Function_Event_event_controller_msg_out_test_length_p1 {
    Named_Function_Event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Named_Function_Event_event_controller_msg_out_test_num {
    Named_Function_Event_event_controller_msg_out_test_num_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_present_p1_data {
    Named_Function_Event_event_controller_msg_out_test_present_p1_speed speed;
    Named_Function_Event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Named_Function_Event_event_controller_msg_out_test_to_enum_p1_data {
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Named_Function_Event_event_controller_msg_out_test_to_selector {
    Named_Function_Event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_val {
    Named_Function_Event_event_controller_msg_out_test_val_p1 p1;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_num {
    Observable_Event_input_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_present_p1_data {
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed speed;
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_data {
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_to_selector {
    Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_val {
    Observable_Event_input_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out_result {
    Observable_Event_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out_result_enum {
    Observable_Event_input_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out_result_int {
    Observable_Event_input_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_result {
    Observable_Event_input_event_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_result_enum {
    Observable_Event_input_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_in_result_int {
    Observable_Event_input_event_event_controller_msg_in_result_int_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_num {
    Observable_Event_input_event_event_controller_msg_out_test_num_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_present_p1_data {
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed speed;
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_data {
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_to_selector {
    Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_val {
    Observable_Event_input_event_event_controller_msg_out_test_val_p1 p1;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_num {
    Observable_Event_output_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_present_p1_data {
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed speed;
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_data {
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_to_selector {
    Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_val {
    Observable_Event_output_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out_result {
    Observable_Event_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out_result_enum {
    Observable_Event_output_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out_result_int {
    Observable_Event_output_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_result {
    Observable_Event_output_event_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_result_enum {
    Observable_Event_output_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_in_result_int {
    Observable_Event_output_event_event_controller_msg_in_result_int_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_num {
    Observable_Event_output_event_event_controller_msg_out_test_num_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_present_p1_data {
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed speed;
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_data {
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_to_selector {
    Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_val {
    Observable_Event_output_event_event_controller_msg_out_test_val_p1 p1;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_num {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed speed;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed speed;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_val {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_result {
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_result_enum {
    Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_result_int {
    Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_result {
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_result_enum {
    Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_result_int {
    Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_num {
    Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_data {
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed speed;
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel accel;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_data {
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed speed;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector {
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_val {
    Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_actuator_my_array {
    System_State_actuator_my_array_elem data[6];
    int length;
}

typedef System_State_actuator_my_derived_array {
    System_State_actuator_my_derived_array_elem data[3];
    int length;
}

typedef System_State_actuator_my_derived_fixed {
    System_State_actuator_my_derived_fixed_elem data[2];
}

typedef System_State_actuator_my_fixed {
    System_State_actuator_my_fixed_elem data[2];
}

typedef System_State_actuator_my_struct_exist {
    bool charge;
}

typedef System_State_actuator_my_union_data {
    System_State_actuator_my_union_speed speed;
    System_State_actuator_my_union_accel accel;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_result {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed speed;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_actuator_queue_elem_no_event {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_result {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed speed;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_actuator_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed speed;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_controller_my_arr {
    System_State_controller_my_arr_elem data[6];
    int length;
}

typedef System_State_controller_my_derived_array {
    System_State_controller_my_derived_array_elem data[3];
    int length;
}

typedef System_State_controller_my_derived_fixed {
    System_State_controller_my_derived_fixed_elem data[2];
}

typedef System_State_controller_my_fixed {
    System_State_controller_my_fixed_elem data[2];
}

typedef System_State_controller_my_struct_exist {
    bool charge;
}

typedef System_State_controller_my_union_data {
    System_State_controller_my_union_speed speed;
    System_State_controller_my_union_accel accel;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_result {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_result {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed speed;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_controller_queue_elem_no_event {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_result {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_result {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed speed;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1 p1;
}

typedef System_State_controller_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed speed;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist {
    bool charge;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem data[2];
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem data[6];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed speed;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel accel;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed speed;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel accel;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1 p1;
}

typedef T_Null_Record {
    bit dummy;
}

typedef Actuator_Context_my_struct {
    Actuator_Context_my_struct_mass mass;
    Actuator_Context_my_struct_charge charge;
    Actuator_Context_my_struct_exist exist;
}

typedef Actuator_Context_my_union {
    Actuator_Context_my_union_data data;
    int selection;
}

typedef Actuator_Event_msg_in_test_derived_length {
    Actuator_Event_msg_in_test_derived_length_p1 p1;
}

typedef Actuator_Event_msg_in_test_exist_p1 {
    Actuator_Event_msg_in_test_exist_p1_mass mass;
    Actuator_Event_msg_in_test_exist_p1_charge charge;
    Actuator_Event_msg_in_test_exist_p1_exist exist;
}

typedef Actuator_Event_msg_in_test_length {
    Actuator_Event_msg_in_test_length_p1 p1;
}

typedef Actuator_Event_msg_in_test_length_derived_fixed {
    Actuator_Event_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Actuator_Event_msg_in_test_length_fixed {
    Actuator_Event_msg_in_test_length_fixed_p1 p1;
}

typedef Actuator_Event_msg_in_test_present_p1 {
    Actuator_Event_msg_in_test_present_p1_data data;
    int selection;
}

typedef Actuator_Event_msg_in_test_to_enum_p1 {
    Actuator_Event_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Actuator_Event_msg_out_data {
    Actuator_Event_msg_out_result result;
    Actuator_Event_msg_out_result_enum result_enum;
    Actuator_Event_msg_out_result_int result_int;
}

typedef Controller_Context_my_struct {
    Controller_Context_my_struct_mass mass;
    Controller_Context_my_struct_charge charge;
    Controller_Context_my_struct_exist exist;
}

typedef Controller_Context_my_union {
    Controller_Context_my_union_data data;
    int selection;
}

typedef Controller_Event_msg_in_data {
    Controller_Event_msg_in_input_none input_none;
    Controller_Event_msg_in_result result;
    Controller_Event_msg_in_result_enum result_enum;
    Controller_Event_msg_in_result_int result_int;
}

typedef Controller_Event_msg_out_test_derived_length {
    Controller_Event_msg_out_test_derived_length_p1 p1;
}

typedef Controller_Event_msg_out_test_exist_p1 {
    Controller_Event_msg_out_test_exist_p1_mass mass;
    Controller_Event_msg_out_test_exist_p1_charge charge;
    Controller_Event_msg_out_test_exist_p1_exist exist;
}

typedef Controller_Event_msg_out_test_length {
    Controller_Event_msg_out_test_length_p1 p1;
}

typedef Controller_Event_msg_out_test_length_derived_fixed {
    Controller_Event_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Controller_Event_msg_out_test_length_fixed {
    Controller_Event_msg_out_test_length_fixed_p1 p1;
}

typedef Controller_Event_msg_out_test_present_p1 {
    Controller_Event_msg_out_test_present_p1_data data;
    int selection;
}

typedef Controller_Event_msg_out_test_to_enum_p1 {
    Controller_Event_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass mass;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge charge;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_data {
    Events_Ty_elem_input_event_event_actuator_msg_out_result result;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_enum result_enum;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_int result_int;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_data {
    Events_Ty_elem_input_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_controller_msg_in_result result;
    Events_Ty_elem_input_event_event_controller_msg_in_result_enum result_enum;
    Events_Ty_elem_input_event_event_controller_msg_in_result_int result_int;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length {
    Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass mass;
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge charge;
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed {
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass mass;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge charge;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_data {
    Events_Ty_elem_output_event_event_actuator_msg_out_result result;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_enum result_enum;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_int result_int;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_data {
    Events_Ty_elem_output_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_controller_msg_in_result result;
    Events_Ty_elem_output_event_event_controller_msg_in_result_enum result_enum;
    Events_Ty_elem_output_event_event_controller_msg_in_result_int result_int;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length {
    Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass mass;
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge charge;
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed {
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass mass;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge charge;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result result;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum result_enum;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int result_int;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result result;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum result_enum;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int result_int;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass mass;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge charge;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in_test_derived_length {
    Function_Event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_exist_p1 {
    Function_Event_actuator_msg_in_test_exist_p1_mass mass;
    Function_Event_actuator_msg_in_test_exist_p1_charge charge;
    Function_Event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Function_Event_actuator_msg_in_test_length {
    Function_Event_actuator_msg_in_test_length_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_length_derived_fixed {
    Function_Event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_length_fixed {
    Function_Event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_present_p1 {
    Function_Event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in_test_to_enum_p1 {
    Function_Event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Function_Event_actuator_msg_out_data {
    Function_Event_actuator_msg_out_result result;
    Function_Event_actuator_msg_out_result_enum result_enum;
    Function_Event_actuator_msg_out_result_int result_int;
}

typedef Function_Event_controller_msg_in_data {
    Function_Event_controller_msg_in_input_none input_none;
    Function_Event_controller_msg_in_result result;
    Function_Event_controller_msg_in_result_enum result_enum;
    Function_Event_controller_msg_in_result_int result_int;
}

typedef Function_Event_controller_msg_out_test_derived_length {
    Function_Event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Function_Event_controller_msg_out_test_exist_p1 {
    Function_Event_controller_msg_out_test_exist_p1_mass mass;
    Function_Event_controller_msg_out_test_exist_p1_charge charge;
    Function_Event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Function_Event_controller_msg_out_test_length {
    Function_Event_controller_msg_out_test_length_p1 p1;
}

typedef Function_Event_controller_msg_out_test_length_derived_fixed {
    Function_Event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Function_Event_controller_msg_out_test_length_fixed {
    Function_Event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Function_Event_controller_msg_out_test_present_p1 {
    Function_Event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Function_Event_controller_msg_out_test_to_enum_p1 {
    Function_Event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in_test_derived_length {
    Interface_Event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_exist_p1 {
    Interface_Event_event_actuator_msg_in_test_exist_p1_mass mass;
    Interface_Event_event_actuator_msg_in_test_exist_p1_charge charge;
    Interface_Event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Interface_Event_event_actuator_msg_in_test_length {
    Interface_Event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_length_derived_fixed {
    Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_length_fixed {
    Interface_Event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_present_p1 {
    Interface_Event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in_test_to_enum_p1 {
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_out_data {
    Interface_Event_event_actuator_msg_out_result result;
    Interface_Event_event_actuator_msg_out_result_enum result_enum;
    Interface_Event_event_actuator_msg_out_result_int result_int;
}

typedef Interface_Event_event_controller_msg_in_data {
    Interface_Event_event_controller_msg_in_input_none input_none;
    Interface_Event_event_controller_msg_in_result result;
    Interface_Event_event_controller_msg_in_result_enum result_enum;
    Interface_Event_event_controller_msg_in_result_int result_int;
}

typedef Interface_Event_event_controller_msg_out_test_derived_length {
    Interface_Event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_exist_p1 {
    Interface_Event_event_controller_msg_out_test_exist_p1_mass mass;
    Interface_Event_event_controller_msg_out_test_exist_p1_charge charge;
    Interface_Event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Interface_Event_event_controller_msg_out_test_length {
    Interface_Event_event_controller_msg_out_test_length_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_length_derived_fixed {
    Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_length_fixed {
    Interface_Event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_present_p1 {
    Interface_Event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out_test_to_enum_p1 {
    Interface_Event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef MyStruct {
    MyStruct_mass mass;
    MyStruct_charge charge;
    MyStruct_exist exist;
}

typedef MyUnion {
    MyUnion_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in_test_derived_length {
    Named_Function_Event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_exist_p1 {
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass mass;
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge charge;
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Named_Function_Event_event_actuator_msg_in_test_length {
    Named_Function_Event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed {
    Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_length_fixed {
    Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_present_p1 {
    Named_Function_Event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in_test_to_enum_p1 {
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_out_data {
    Named_Function_Event_event_actuator_msg_out_result result;
    Named_Function_Event_event_actuator_msg_out_result_enum result_enum;
    Named_Function_Event_event_actuator_msg_out_result_int result_int;
}

typedef Named_Function_Event_event_controller_msg_in_data {
    Named_Function_Event_event_controller_msg_in_input_none input_none;
    Named_Function_Event_event_controller_msg_in_result result;
    Named_Function_Event_event_controller_msg_in_result_enum result_enum;
    Named_Function_Event_event_controller_msg_in_result_int result_int;
}

typedef Named_Function_Event_event_controller_msg_out_test_derived_length {
    Named_Function_Event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_exist_p1 {
    Named_Function_Event_event_controller_msg_out_test_exist_p1_mass mass;
    Named_Function_Event_event_controller_msg_out_test_exist_p1_charge charge;
    Named_Function_Event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Named_Function_Event_event_controller_msg_out_test_length {
    Named_Function_Event_event_controller_msg_out_test_length_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_length_derived_fixed {
    Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_length_fixed {
    Named_Function_Event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_present_p1 {
    Named_Function_Event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out_test_to_enum_p1 {
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_derived_length {
    Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_exist_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass mass;
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge charge;
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length {
    Observable_Event_input_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed {
    Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_length_fixed {
    Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_present_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_out_data {
    Observable_Event_input_event_event_actuator_msg_out_result result;
    Observable_Event_input_event_event_actuator_msg_out_result_enum result_enum;
    Observable_Event_input_event_event_actuator_msg_out_result_int result_int;
}

typedef Observable_Event_input_event_event_controller_msg_in_data {
    Observable_Event_input_event_event_controller_msg_in_input_none input_none;
    Observable_Event_input_event_event_controller_msg_in_result result;
    Observable_Event_input_event_event_controller_msg_in_result_enum result_enum;
    Observable_Event_input_event_event_controller_msg_in_result_int result_int;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_derived_length {
    Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_exist_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass mass;
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge charge;
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length {
    Observable_Event_input_event_event_controller_msg_out_test_length_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed {
    Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_length_fixed {
    Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_present_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_derived_length {
    Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_exist_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass mass;
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge charge;
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length {
    Observable_Event_output_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed {
    Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_length_fixed {
    Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_present_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_out_data {
    Observable_Event_output_event_event_actuator_msg_out_result result;
    Observable_Event_output_event_event_actuator_msg_out_result_enum result_enum;
    Observable_Event_output_event_event_actuator_msg_out_result_int result_int;
}

typedef Observable_Event_output_event_event_controller_msg_in_data {
    Observable_Event_output_event_event_controller_msg_in_input_none input_none;
    Observable_Event_output_event_event_controller_msg_in_result result;
    Observable_Event_output_event_event_controller_msg_in_result_enum result_enum;
    Observable_Event_output_event_event_controller_msg_in_result_int result_int;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_derived_length {
    Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_exist_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass mass;
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge charge;
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length {
    Observable_Event_output_event_event_controller_msg_out_test_length_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed {
    Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_length_fixed {
    Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_present_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass mass;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge charge;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_data {
    Observable_Event_unhandled_input_event_actuator_msg_out_result result;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_enum result_enum;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_int result_int;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_data {
    Observable_Event_unhandled_input_event_controller_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_controller_msg_in_result result;
    Observable_Event_unhandled_input_event_controller_msg_in_result_enum result_enum;
    Observable_Event_unhandled_input_event_controller_msg_in_result_int result_int;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length {
    Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass mass;
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge charge;
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed {
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_my_struct {
    System_State_actuator_my_struct_mass mass;
    System_State_actuator_my_struct_charge charge;
    System_State_actuator_my_struct_exist exist;
}

typedef System_State_actuator_my_union {
    System_State_actuator_my_union_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result result;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum result_enum;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int result_int;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result result;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum result_enum;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int result_int;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result result;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum result_enum;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int result_int;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result result;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum result_enum;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int result_int;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result result;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum result_enum;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int result_int;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result result;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum result_enum;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int result_int;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_my_struct {
    System_State_controller_my_struct_mass mass;
    System_State_controller_my_struct_charge charge;
    System_State_controller_my_struct_exist exist;
}

typedef System_State_controller_my_union {
    System_State_controller_my_union_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result result;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum result_enum;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int result_int;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result result;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum result_enum;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int result_int;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result result;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum result_enum;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int result_int;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result result;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum result_enum;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int result_int;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass mass;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge charge;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result result;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum result_enum;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int result_int;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result result;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum result_enum;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int result_int;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass mass;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge charge;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_exist exist;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_data data;
    int selection;
}

typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_my_union my_union;
    Actuator_Context_my_union_det my_union_det;
    Actuator_Context_my_bool my_bool;
    Actuator_Context_my_array my_array;
    Actuator_Context_my_derived_array my_derived_array;
    Actuator_Context_my_int my_int;
    Actuator_Context_my_struct my_struct;
    Actuator_Context_my_enum my_enum;
    Actuator_Context_my_fixed my_fixed;
    Actuator_Context_my_derived_fixed my_derived_fixed;
}

typedef Actuator_Event_msg_in_test_exist {
    Actuator_Event_msg_in_test_exist_p1 p1;
}

typedef Actuator_Event_msg_in_test_present {
    Actuator_Event_msg_in_test_present_p1 p1;
}

typedef Actuator_Event_msg_in_test_to_enum {
    Actuator_Event_msg_in_test_to_enum_p1 p1;
}

typedef Actuator_Event_msg_out {
    Actuator_Event_msg_out_data data;
    int selection;
}

typedef Controller_Context {
    Controller_Context_state state;
    Controller_Context_init_done init_done;
    Controller_Context_error error;
    Controller_Context_reached reached;
    Controller_Context_my_union my_union;
    Controller_Context_my_bool my_bool;
    Controller_Context_my_arr my_arr;
    Controller_Context_my_int my_int;
    Controller_Context_my_struct my_struct;
    Controller_Context_my_enum my_enum;
    Controller_Context_my_fixed my_fixed;
    Controller_Context_my_derived_array my_derived_array;
    Controller_Context_my_derived_fixed my_derived_fixed;
}

typedef Controller_Event_msg_in {
    Controller_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out_test_exist {
    Controller_Event_msg_out_test_exist_p1 p1;
}

typedef Controller_Event_msg_out_test_present {
    Controller_Event_msg_out_test_present_p1 p1;
}

typedef Controller_Event_msg_out_test_to_enum {
    Controller_Event_msg_out_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_exist {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_present {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out {
    Events_Ty_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in {
    Events_Ty_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_exist {
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_present {
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum {
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_exist {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_present {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out {
    Events_Ty_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in {
    Events_Ty_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_exist {
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_present {
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum {
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_exist {
    Function_Event_actuator_msg_in_test_exist_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_present {
    Function_Event_actuator_msg_in_test_present_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_to_enum {
    Function_Event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Function_Event_actuator_msg_out {
    Function_Event_actuator_msg_out_data data;
    int selection;
}

typedef Function_Event_controller_msg_in {
    Function_Event_controller_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out_test_exist {
    Function_Event_controller_msg_out_test_exist_p1 p1;
}

typedef Function_Event_controller_msg_out_test_present {
    Function_Event_controller_msg_out_test_present_p1 p1;
}

typedef Function_Event_controller_msg_out_test_to_enum {
    Function_Event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_exist {
    Interface_Event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_present {
    Interface_Event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_to_enum {
    Interface_Event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out {
    Interface_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_in {
    Interface_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out_test_exist {
    Interface_Event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_present {
    Interface_Event_event_controller_msg_out_test_present_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_to_enum {
    Interface_Event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_exist {
    Named_Function_Event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_present {
    Named_Function_Event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_to_enum {
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out {
    Named_Function_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_in {
    Named_Function_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out_test_exist {
    Named_Function_Event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_present {
    Named_Function_Event_event_controller_msg_out_test_present_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_to_enum {
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_exist {
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_present {
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_to_enum {
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out {
    Observable_Event_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_in {
    Observable_Event_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_exist {
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_present {
    Observable_Event_input_event_event_controller_msg_out_test_present_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_to_enum {
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_exist {
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_present {
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_to_enum {
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out {
    Observable_Event_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_in {
    Observable_Event_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_exist {
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_present {
    Observable_Event_output_event_event_controller_msg_out_test_present_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_to_enum {
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_exist {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_present {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out {
    Observable_Event_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in {
    Observable_Event_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_exist {
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_present {
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum {
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_actuator {
    System_State_actuator_state state;
    System_State_actuator_init_done init_done;
    System_State_actuator_my_union my_union;
    System_State_actuator_my_union_det my_union_det;
    System_State_actuator_my_bool my_bool;
    System_State_actuator_my_array my_array;
    System_State_actuator_my_derived_array my_derived_array;
    System_State_actuator_my_int my_int;
    System_State_actuator_my_struct my_struct;
    System_State_actuator_my_enum my_enum;
    System_State_actuator_my_fixed my_fixed;
    System_State_actuator_my_derived_fixed my_derived_fixed;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_controller {
    System_State_controller_state state;
    System_State_controller_init_done init_done;
    System_State_controller_error error;
    System_State_controller_reached reached;
    System_State_controller_my_union my_union;
    System_State_controller_my_bool my_bool;
    System_State_controller_my_arr my_arr;
    System_State_controller_my_int my_int;
    System_State_controller_my_struct my_struct;
    System_State_controller_my_enum my_enum;
    System_State_controller_my_fixed my_fixed;
    System_State_controller_my_derived_array my_derived_array;
    System_State_controller_my_derived_fixed my_derived_fixed;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1 p1;
}

typedef Actuator_Event_msg_in_data {
    Actuator_Event_msg_in_input_none input_none;
    Actuator_Event_msg_in_test_derived_length test_derived_length;
    Actuator_Event_msg_in_test_exist test_exist;
    Actuator_Event_msg_in_test_length test_length;
    Actuator_Event_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Actuator_Event_msg_in_test_length_fixed test_length_fixed;
    Actuator_Event_msg_in_test_num test_num;
    Actuator_Event_msg_in_test_present test_present;
    Actuator_Event_msg_in_test_to_enum test_to_enum;
    Actuator_Event_msg_in_test_to_selector test_to_selector;
    Actuator_Event_msg_in_test_val test_val;
}

typedef Controller_Event_msg_out_data {
    Controller_Event_msg_out_test_derived_length test_derived_length;
    Controller_Event_msg_out_test_exist test_exist;
    Controller_Event_msg_out_test_length test_length;
    Controller_Event_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Controller_Event_msg_out_test_length_fixed test_length_fixed;
    Controller_Event_msg_out_test_num test_num;
    Controller_Event_msg_out_test_present test_present;
    Controller_Event_msg_out_test_to_enum test_to_enum;
    Controller_Event_msg_out_test_to_selector test_to_selector;
    Controller_Event_msg_out_test_val test_val;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length test_derived_length;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist test_exist;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length test_length;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_num test_num;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present test_present;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum test_to_enum;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector test_to_selector;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_val test_val;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_data {
    Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length test_derived_length;
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist test_exist;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length test_length;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Events_Ty_elem_input_event_event_controller_msg_out_test_num test_num;
    Events_Ty_elem_input_event_event_controller_msg_out_test_present test_present;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum test_to_enum;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector test_to_selector;
    Events_Ty_elem_input_event_event_controller_msg_out_test_val test_val;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length test_derived_length;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist test_exist;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length test_length;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_num test_num;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present test_present;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum test_to_enum;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector test_to_selector;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_val test_val;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_data {
    Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length test_derived_length;
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist test_exist;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length test_length;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Events_Ty_elem_output_event_event_controller_msg_out_test_num test_num;
    Events_Ty_elem_output_event_event_controller_msg_out_test_present test_present;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum test_to_enum;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector test_to_selector;
    Events_Ty_elem_output_event_event_controller_msg_out_test_val test_val;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length test_derived_length;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist test_exist;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length test_length;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num test_num;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present test_present;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum test_to_enum;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector test_to_selector;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val test_val;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length test_derived_length;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist test_exist;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length test_length;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed test_length_fixed;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num test_num;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present test_present;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum test_to_enum;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector test_to_selector;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val test_val;
}

typedef Function_Event_actuator_msg_in_data {
    Function_Event_actuator_msg_in_input_none input_none;
    Function_Event_actuator_msg_in_test_derived_length test_derived_length;
    Function_Event_actuator_msg_in_test_exist test_exist;
    Function_Event_actuator_msg_in_test_length test_length;
    Function_Event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Function_Event_actuator_msg_in_test_length_fixed test_length_fixed;
    Function_Event_actuator_msg_in_test_num test_num;
    Function_Event_actuator_msg_in_test_present test_present;
    Function_Event_actuator_msg_in_test_to_enum test_to_enum;
    Function_Event_actuator_msg_in_test_to_selector test_to_selector;
    Function_Event_actuator_msg_in_test_val test_val;
}

typedef Function_Event_controller_msg_out_data {
    Function_Event_controller_msg_out_test_derived_length test_derived_length;
    Function_Event_controller_msg_out_test_exist test_exist;
    Function_Event_controller_msg_out_test_length test_length;
    Function_Event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Function_Event_controller_msg_out_test_length_fixed test_length_fixed;
    Function_Event_controller_msg_out_test_num test_num;
    Function_Event_controller_msg_out_test_present test_present;
    Function_Event_controller_msg_out_test_to_enum test_to_enum;
    Function_Event_controller_msg_out_test_to_selector test_to_selector;
    Function_Event_controller_msg_out_test_val test_val;
}

typedef Interface_Event_event_actuator_msg_in_data {
    Interface_Event_event_actuator_msg_in_input_none input_none;
    Interface_Event_event_actuator_msg_in_test_derived_length test_derived_length;
    Interface_Event_event_actuator_msg_in_test_exist test_exist;
    Interface_Event_event_actuator_msg_in_test_length test_length;
    Interface_Event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Interface_Event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Interface_Event_event_actuator_msg_in_test_num test_num;
    Interface_Event_event_actuator_msg_in_test_present test_present;
    Interface_Event_event_actuator_msg_in_test_to_enum test_to_enum;
    Interface_Event_event_actuator_msg_in_test_to_selector test_to_selector;
    Interface_Event_event_actuator_msg_in_test_val test_val;
}

typedef Interface_Event_event_controller_msg_out_data {
    Interface_Event_event_controller_msg_out_test_derived_length test_derived_length;
    Interface_Event_event_controller_msg_out_test_exist test_exist;
    Interface_Event_event_controller_msg_out_test_length test_length;
    Interface_Event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Interface_Event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Interface_Event_event_controller_msg_out_test_num test_num;
    Interface_Event_event_controller_msg_out_test_present test_present;
    Interface_Event_event_controller_msg_out_test_to_enum test_to_enum;
    Interface_Event_event_controller_msg_out_test_to_selector test_to_selector;
    Interface_Event_event_controller_msg_out_test_val test_val;
}

typedef Named_Function_Event_event_actuator_msg_in_data {
    Named_Function_Event_event_actuator_msg_in_input_none input_none;
    Named_Function_Event_event_actuator_msg_in_test_derived_length test_derived_length;
    Named_Function_Event_event_actuator_msg_in_test_exist test_exist;
    Named_Function_Event_event_actuator_msg_in_test_length test_length;
    Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Named_Function_Event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Named_Function_Event_event_actuator_msg_in_test_num test_num;
    Named_Function_Event_event_actuator_msg_in_test_present test_present;
    Named_Function_Event_event_actuator_msg_in_test_to_enum test_to_enum;
    Named_Function_Event_event_actuator_msg_in_test_to_selector test_to_selector;
    Named_Function_Event_event_actuator_msg_in_test_val test_val;
}

typedef Named_Function_Event_event_controller_msg_out_data {
    Named_Function_Event_event_controller_msg_out_test_derived_length test_derived_length;
    Named_Function_Event_event_controller_msg_out_test_exist test_exist;
    Named_Function_Event_event_controller_msg_out_test_length test_length;
    Named_Function_Event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Named_Function_Event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Named_Function_Event_event_controller_msg_out_test_num test_num;
    Named_Function_Event_event_controller_msg_out_test_present test_present;
    Named_Function_Event_event_controller_msg_out_test_to_enum test_to_enum;
    Named_Function_Event_event_controller_msg_out_test_to_selector test_to_selector;
    Named_Function_Event_event_controller_msg_out_test_val test_val;
}

typedef Observable_Event_input_event_event_actuator_msg_in_data {
    Observable_Event_input_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_input_event_event_actuator_msg_in_test_derived_length test_derived_length;
    Observable_Event_input_event_event_actuator_msg_in_test_exist test_exist;
    Observable_Event_input_event_event_actuator_msg_in_test_length test_length;
    Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_input_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Observable_Event_input_event_event_actuator_msg_in_test_num test_num;
    Observable_Event_input_event_event_actuator_msg_in_test_present test_present;
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum test_to_enum;
    Observable_Event_input_event_event_actuator_msg_in_test_to_selector test_to_selector;
    Observable_Event_input_event_event_actuator_msg_in_test_val test_val;
}

typedef Observable_Event_input_event_event_controller_msg_out_data {
    Observable_Event_input_event_event_controller_msg_out_test_derived_length test_derived_length;
    Observable_Event_input_event_event_controller_msg_out_test_exist test_exist;
    Observable_Event_input_event_event_controller_msg_out_test_length test_length;
    Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_input_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Observable_Event_input_event_event_controller_msg_out_test_num test_num;
    Observable_Event_input_event_event_controller_msg_out_test_present test_present;
    Observable_Event_input_event_event_controller_msg_out_test_to_enum test_to_enum;
    Observable_Event_input_event_event_controller_msg_out_test_to_selector test_to_selector;
    Observable_Event_input_event_event_controller_msg_out_test_val test_val;
}

typedef Observable_Event_output_event_event_actuator_msg_in_data {
    Observable_Event_output_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_output_event_event_actuator_msg_in_test_derived_length test_derived_length;
    Observable_Event_output_event_event_actuator_msg_in_test_exist test_exist;
    Observable_Event_output_event_event_actuator_msg_in_test_length test_length;
    Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_output_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Observable_Event_output_event_event_actuator_msg_in_test_num test_num;
    Observable_Event_output_event_event_actuator_msg_in_test_present test_present;
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum test_to_enum;
    Observable_Event_output_event_event_actuator_msg_in_test_to_selector test_to_selector;
    Observable_Event_output_event_event_actuator_msg_in_test_val test_val;
}

typedef Observable_Event_output_event_event_controller_msg_out_data {
    Observable_Event_output_event_event_controller_msg_out_test_derived_length test_derived_length;
    Observable_Event_output_event_event_controller_msg_out_test_exist test_exist;
    Observable_Event_output_event_event_controller_msg_out_test_length test_length;
    Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_output_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    Observable_Event_output_event_event_controller_msg_out_test_num test_num;
    Observable_Event_output_event_event_controller_msg_out_test_present test_present;
    Observable_Event_output_event_event_controller_msg_out_test_to_enum test_to_enum;
    Observable_Event_output_event_event_controller_msg_out_test_to_selector test_to_selector;
    Observable_Event_output_event_event_controller_msg_out_test_val test_val;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length test_derived_length;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist test_exist;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length test_length;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed test_length_fixed;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_num test_num;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present test_present;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum test_to_enum;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector test_to_selector;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_val test_val;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_data {
    Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length test_derived_length;
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist test_exist;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length test_length;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed test_length_fixed;
    Observable_Event_unhandled_input_event_controller_msg_out_test_num test_num;
    Observable_Event_unhandled_input_event_controller_msg_out_test_present test_present;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum test_to_enum;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector test_to_selector;
    Observable_Event_unhandled_input_event_controller_msg_out_test_val test_val;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist test_exist;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length test_length;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num test_num;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present test_present;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val test_val;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist test_exist;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length test_length;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num test_num;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present test_present;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val test_val;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist test_exist;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length test_length;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num test_num;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present test_present;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val test_val;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist test_exist;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length test_length;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num test_num;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present test_present;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val test_val;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist test_exist;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length test_length;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num test_num;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present test_present;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val test_val;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist test_exist;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length test_length;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num test_num;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present test_present;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val test_val;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist test_exist;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length test_length;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num test_num;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present test_present;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val test_val;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist test_exist;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length test_length;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num test_num;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present test_present;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val test_val;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist test_exist;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length test_length;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num test_num;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present test_present;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val test_val;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist test_exist;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length test_length;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num test_num;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present test_present;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val test_val;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length test_derived_length;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist test_exist;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length test_length;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num test_num;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present test_present;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum test_to_enum;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector test_to_selector;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val test_val;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length test_derived_length;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist test_exist;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length test_length;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed test_length_derived_fixed;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed test_length_fixed;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num test_num;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present test_present;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum test_to_enum;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector test_to_selector;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val test_val;
}

typedef Actuator_Event_msg_in {
    Actuator_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out {
    Controller_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in {
    Events_Ty_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out {
    Events_Ty_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in {
    Events_Ty_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out {
    Events_Ty_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in {
    Function_Event_actuator_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out {
    Function_Event_controller_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in {
    Interface_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out {
    Interface_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in {
    Named_Function_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out {
    Named_Function_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in {
    Observable_Event_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out {
    Observable_Event_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in {
    Observable_Event_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out {
    Observable_Event_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in {
    Observable_Event_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out {
    Observable_Event_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Actuator_Event_data {
    Actuator_Event_msg_in msg_in;
    Actuator_Event_msg_out msg_out;
}

typedef Controller_Event_data {
    Controller_Event_msg_in msg_in;
    Controller_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_actuator_data {
    Events_Ty_elem_input_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_input_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_controller_data {
    Events_Ty_elem_input_event_event_controller_msg_in msg_in;
    Events_Ty_elem_input_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_actuator_data {
    Events_Ty_elem_output_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_output_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_controller_data {
    Events_Ty_elem_output_event_event_controller_msg_in msg_in;
    Events_Ty_elem_output_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_controller_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Function_Event_actuator_data {
    Function_Event_actuator_msg_in msg_in;
    Function_Event_actuator_msg_out msg_out;
}

typedef Function_Event_controller_data {
    Function_Event_controller_msg_in msg_in;
    Function_Event_controller_msg_out msg_out;
}

typedef Interface_Event_event_actuator_data {
    Interface_Event_event_actuator_msg_in msg_in;
    Interface_Event_event_actuator_msg_out msg_out;
}

typedef Interface_Event_event_controller_data {
    Interface_Event_event_controller_msg_in msg_in;
    Interface_Event_event_controller_msg_out msg_out;
}

typedef Named_Function_Event_event_actuator_data {
    Named_Function_Event_event_actuator_msg_in msg_in;
    Named_Function_Event_event_actuator_msg_out msg_out;
}

typedef Named_Function_Event_event_controller_data {
    Named_Function_Event_event_controller_msg_in msg_in;
    Named_Function_Event_event_controller_msg_out msg_out;
}

typedef Observable_Event_input_event_event_actuator_data {
    Observable_Event_input_event_event_actuator_msg_in msg_in;
    Observable_Event_input_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_input_event_event_controller_data {
    Observable_Event_input_event_event_controller_msg_in msg_in;
    Observable_Event_input_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_output_event_event_actuator_data {
    Observable_Event_output_event_event_actuator_msg_in msg_in;
    Observable_Event_output_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_output_event_event_controller_data {
    Observable_Event_output_event_event_controller_msg_in msg_in;
    Observable_Event_output_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_actuator_data {
    Observable_Event_unhandled_input_event_actuator_msg_in msg_in;
    Observable_Event_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_controller_data {
    Observable_Event_unhandled_input_event_controller_msg_in msg_in;
    Observable_Event_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_controller_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_controller_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Actuator_Event {
    Actuator_Event_data data;
    int selection;
}

typedef Controller_Event {
    Controller_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator {
    Events_Ty_elem_input_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller {
    Events_Ty_elem_input_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_actuator actuator;
    Events_Ty_elem_input_event_event_controller controller;
}

typedef Events_Ty_elem_output_event_event_actuator {
    Events_Ty_elem_output_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller {
    Events_Ty_elem_output_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_actuator actuator;
    Events_Ty_elem_output_event_event_controller controller;
}

typedef Events_Ty_elem_unhandled_input_event_actuator {
    Events_Ty_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller {
    Events_Ty_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_actuator actuator;
    Events_Ty_elem_unhandled_input_event_controller controller;
}

typedef Function_Event_actuator {
    Function_Event_actuator_data data;
    int selection;
}

typedef Function_Event_controller {
    Function_Event_controller_data data;
    int selection;
}

typedef Function_Event_data {
    Function_Event_actuator actuator;
    Function_Event_controller controller;
}

typedef Interface_Event_event_actuator {
    Interface_Event_event_actuator_data data;
    int selection;
}

typedef Interface_Event_event_controller {
    Interface_Event_event_controller_data data;
    int selection;
}

typedef Interface_Event_event_data {
    Interface_Event_event_actuator actuator;
    Interface_Event_event_controller controller;
}

typedef Named_Function_Event_event_actuator {
    Named_Function_Event_event_actuator_data data;
    int selection;
}

typedef Named_Function_Event_event_controller {
    Named_Function_Event_event_controller_data data;
    int selection;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_actuator actuator;
    Named_Function_Event_event_controller controller;
}

typedef Observable_Event_input_event_event_actuator {
    Observable_Event_input_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller {
    Observable_Event_input_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_actuator actuator;
    Observable_Event_input_event_event_controller controller;
}

typedef Observable_Event_output_event_event_actuator {
    Observable_Event_output_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller {
    Observable_Event_output_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_actuator actuator;
    Observable_Event_output_event_event_controller controller;
}

typedef Observable_Event_unhandled_input_event_actuator {
    Observable_Event_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller {
    Observable_Event_unhandled_input_event_controller_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_actuator actuator;
    Observable_Event_unhandled_input_event_controller controller;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator {
    System_State_actuator_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller {
    System_State_actuator_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_data {
    System_State_actuator_queue_elem_input_event_event_actuator actuator;
    System_State_actuator_queue_elem_input_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator {
    System_State_actuator_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller {
    System_State_actuator_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_data {
    System_State_actuator_queue_elem_output_event_event_actuator actuator;
    System_State_actuator_queue_elem_output_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller {
    System_State_actuator_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator actuator;
    System_State_actuator_queue_elem_unhandled_input_event_controller controller;
}

typedef System_State_controller_queue_elem_input_event_event_actuator {
    System_State_controller_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller {
    System_State_controller_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_data {
    System_State_controller_queue_elem_input_event_event_actuator actuator;
    System_State_controller_queue_elem_input_event_event_controller controller;
}

typedef System_State_controller_queue_elem_output_event_event_actuator {
    System_State_controller_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller {
    System_State_controller_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_data {
    System_State_controller_queue_elem_output_event_event_actuator actuator;
    System_State_controller_queue_elem_output_event_event_controller controller;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator {
    System_State_controller_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller {
    System_State_controller_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator actuator;
    System_State_controller_queue_elem_unhandled_input_event_controller controller;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event {
    System_State_actuator_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event {
    System_State_actuator_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event {
    System_State_actuator_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event {
    System_State_controller_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event {
    System_State_controller_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event {
    System_State_controller_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_actuator_queue_elem_input_event {
    System_State_actuator_queue_elem_input_event_source source;
    System_State_actuator_queue_elem_input_event_dest dest;
    System_State_actuator_queue_elem_input_event_event event;
}

typedef System_State_actuator_queue_elem_output_event {
    System_State_actuator_queue_elem_output_event_source source;
    System_State_actuator_queue_elem_output_event_dest dest;
    System_State_actuator_queue_elem_output_event_event event;
}

typedef System_State_actuator_queue_elem_unhandled_input {
    System_State_actuator_queue_elem_unhandled_input_source source;
    System_State_actuator_queue_elem_unhandled_input_dest dest;
    System_State_actuator_queue_elem_unhandled_input_event event;
}

typedef System_State_controller_queue_elem_input_event {
    System_State_controller_queue_elem_input_event_source source;
    System_State_controller_queue_elem_input_event_dest dest;
    System_State_controller_queue_elem_input_event_event event;
}

typedef System_State_controller_queue_elem_output_event {
    System_State_controller_queue_elem_output_event_source source;
    System_State_controller_queue_elem_output_event_dest dest;
    System_State_controller_queue_elem_output_event_event event;
}

typedef System_State_controller_queue_elem_unhandled_input {
    System_State_controller_queue_elem_unhandled_input_source source;
    System_State_controller_queue_elem_unhandled_input_dest dest;
    System_State_controller_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_actuator_queue_elem_data {
    System_State_actuator_queue_elem_no_event no_event;
    System_State_actuator_queue_elem_system_startup system_startup;
    System_State_actuator_queue_elem_input_event input_event;
    System_State_actuator_queue_elem_output_event output_event;
    System_State_actuator_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_controller_queue_elem_data {
    System_State_controller_queue_elem_no_event no_event;
    System_State_controller_queue_elem_system_startup system_startup;
    System_State_controller_queue_elem_input_event input_event;
    System_State_controller_queue_elem_output_event output_event;
    System_State_controller_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem {
    System_State_actuator_queue_elem_data data;
    int selection;
}

typedef System_State_controller_queue_elem {
    System_State_controller_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_actuator_queue {
    System_State_actuator_queue_elem data[2];
    int length;
}

typedef System_State_controller_queue {
    System_State_controller_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_actuator_queue actuator_queue;
    System_State_controller_queue controller_queue;
    System_State_actuator actuator;
    System_State_controller controller;
}

Observable_Event nothing;
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert((Actuator_States_vc == Actuator_States_wait));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert((Actuator_Context_state_vc == Actuator_Context_state_wait));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_my_union_speed_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_union_speed_range_check(dst);
}
inline Actuator_Context_my_union_speed_range_check(Actuator_Context_my_union_speed_vc)
{
    assert(((Actuator_Context_my_union_speed_vc >= 0) && (Actuator_Context_my_union_speed_vc <= 10000)));
}
inline Actuator_Context_my_union_accel_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_union_accel_range_check(dst);
}
inline Actuator_Context_my_union_accel_range_check(Actuator_Context_my_union_accel_vc)
{
    assert(((Actuator_Context_my_union_accel_vc >= 0) && (Actuator_Context_my_union_accel_vc <= 10000)));
}
inline Actuator_Context_my_union_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Context_my_union_speed_PRESENT);
        Actuator_Context_my_union_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Actuator_Context_my_union_accel_PRESENT);
        Actuator_Context_my_union_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Actuator_context_my_union_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Context_my_union_det_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_union_det_range_check(dst);
}
inline Actuator_Context_my_union_det_range_check(Actuator_Context_my_union_det_vc)
{
    assert(((Actuator_Context_my_union_det_vc == Actuator_Context_my_union_det_speed_present) || (Actuator_Context_my_union_det_vc == Actuator_Context_my_union_det_accel_present)));
}
inline Actuator_Context_my_bool_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_bool_range_check(dst);
}
inline Actuator_Context_my_bool_range_check(Actuator_Context_my_bool_vc)
{
    assert(true);
}
inline Actuator_Context_my_array_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_array_elem_range_check(dst);
}
inline Actuator_Context_my_array_elem_range_check(Actuator_Context_my_array_elem_vc)
{
    assert(((Actuator_Context_my_array_elem_vc >= 0) && (Actuator_Context_my_array_elem_vc <= 10000)));
}
inline Actuator_Context_my_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Actuator_Context_my_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Actuator_Context_my_array_size_check(Actuator_Context_my_array_sc)
{
    assert(((Actuator_Context_my_array_sc >= 1) && (Actuator_Context_my_array_sc <= 6)));
}
inline Actuator_Context_my_derived_array_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_derived_array_elem_range_check(dst);
}
inline Actuator_Context_my_derived_array_elem_range_check(Actuator_Context_my_derived_array_elem_vc)
{
    assert(((Actuator_Context_my_derived_array_elem_vc >= 0) && (Actuator_Context_my_derived_array_elem_vc <= 10000)));
}
inline Actuator_Context_my_derived_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Actuator_Context_my_derived_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Actuator_Context_my_derived_array_size_check(Actuator_Context_my_derived_array_sc)
{
    assert(((Actuator_Context_my_derived_array_sc >= 1) && (Actuator_Context_my_derived_array_sc <= 3)));
}
inline Actuator_Context_my_int_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_int_range_check(dst);
}
inline Actuator_Context_my_int_range_check(Actuator_Context_my_int_vc)
{
    assert(((Actuator_Context_my_int_vc >= 0) && (Actuator_Context_my_int_vc <= 10000)));
}
inline Actuator_Context_my_struct_mass_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_struct_mass_range_check(dst);
}
inline Actuator_Context_my_struct_mass_range_check(Actuator_Context_my_struct_mass_vc)
{
    assert(((Actuator_Context_my_struct_mass_vc >= 0) && (Actuator_Context_my_struct_mass_vc <= 10000)));
}
inline Actuator_Context_my_struct_charge_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_struct_charge_range_check(dst);
}
inline Actuator_Context_my_struct_charge_range_check(Actuator_Context_my_struct_charge_vc)
{
    assert(((Actuator_Context_my_struct_charge_vc >= 0) && (Actuator_Context_my_struct_charge_vc <= 10000)));
}
inline Actuator_Context_my_struct_assign_value(dst, src)
{
    Actuator_Context_my_struct_mass_assign_value(dst.mass, src.mass);
    Actuator_Context_my_struct_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Actuator_Context_my_enum_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_enum_range_check(dst);
}
inline Actuator_Context_my_enum_range_check(Actuator_Context_my_enum_vc)
{
    assert(((Actuator_Context_my_enum_vc == Actuator_Context_my_enum_speed) || (Actuator_Context_my_enum_vc == Actuator_Context_my_enum_accel)));
}
inline Actuator_Context_my_fixed_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_fixed_elem_range_check(dst);
}
inline Actuator_Context_my_fixed_elem_range_check(Actuator_Context_my_fixed_elem_vc)
{
    assert(((Actuator_Context_my_fixed_elem_vc >= 0) && (Actuator_Context_my_fixed_elem_vc <= 10000)));
}
inline Actuator_Context_my_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Actuator_Context_my_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Actuator_Context_my_derived_fixed_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_my_derived_fixed_elem_range_check(dst);
}
inline Actuator_Context_my_derived_fixed_elem_range_check(Actuator_Context_my_derived_fixed_elem_vc)
{
    assert(((Actuator_Context_my_derived_fixed_elem_vc >= 0) && (Actuator_Context_my_derived_fixed_elem_vc <= 10000)));
}
inline Actuator_Context_my_derived_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Actuator_Context_my_derived_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_my_union_assign_value(dst.my_union, src.my_union);
    Actuator_Context_my_union_det_assign_value(dst.my_union_det, src.my_union_det);
    Actuator_Context_my_bool_assign_value(dst.my_bool, src.my_bool);
    Actuator_Context_my_array_assign_value(dst.my_array, src.my_array);
    Actuator_Context_my_derived_array_assign_value(dst.my_derived_array, src.my_derived_array);
    Actuator_Context_my_int_assign_value(dst.my_int, src.my_int);
    Actuator_Context_my_struct_assign_value(dst.my_struct, src.my_struct);
    Actuator_Context_my_enum_assign_value(dst.my_enum, src.my_enum);
    Actuator_Context_my_fixed_assign_value(dst.my_fixed, src.my_fixed);
    Actuator_Context_my_derived_fixed_assign_value(dst.my_derived_fixed, src.my_derived_fixed);
}
inline Actuator_Myunion_Selection_assign_value(dst, src)
{
    dst = src;
    Actuator_Myunion_Selection_range_check(dst);
}
inline Actuator_Myunion_Selection_range_check(Actuator_Myunion_Selection_vc)
{
    assert(((Actuator_Myunion_Selection_vc == Actuator_Myunion_Selection_speed_present) || (Actuator_Myunion_Selection_vc == Actuator_Myunion_Selection_accel_present)));
}
inline Controller_States_assign_value(dst, src)
{
    dst = src;
    Controller_States_range_check(dst);
}
inline Controller_States_range_check(Controller_States_vc)
{
    assert((((((((((((((((((((Controller_States_vc == Controller_States_checklengthb) || (Controller_States_vc == Controller_States_checkvalb)) || (Controller_States_vc == Controller_States_checkpresentb)) || (Controller_States_vc == Controller_States_checklengthderivedarray)) || (Controller_States_vc == Controller_States_checklengthderivedfixed)) || (Controller_States_vc == Controller_States_checktoenuma)) || (Controller_States_vc == Controller_States_reached)) || (Controller_States_vc == Controller_States_checktoselectora)) || (Controller_States_vc == Controller_States_checkpresenta)) || (Controller_States_vc == Controller_States_checktoselectorb)) || (Controller_States_vc == Controller_States_checkexistb)) || (Controller_States_vc == Controller_States_error)) || (Controller_States_vc == Controller_States_checkvala)) || (Controller_States_vc == Controller_States_checklengthfixed)) || (Controller_States_vc == Controller_States_checknumb)) || (Controller_States_vc == Controller_States_checklengtha)) || (Controller_States_vc == Controller_States_checktoenumb)) || (Controller_States_vc == Controller_States_checknuma)) || (Controller_States_vc == Controller_States_checkexista)));
}
inline Controller_Context_state_assign_value(dst, src)
{
    dst = src;
    Controller_Context_state_range_check(dst);
}
inline Controller_Context_state_range_check(Controller_Context_state_vc)
{
    assert((((((((((((((((((((Controller_Context_state_vc == Controller_Context_state_checklengthb) || (Controller_Context_state_vc == Controller_Context_state_checkvalb)) || (Controller_Context_state_vc == Controller_Context_state_checkpresentb)) || (Controller_Context_state_vc == Controller_Context_state_checklengthderivedarray)) || (Controller_Context_state_vc == Controller_Context_state_checklengthderivedfixed)) || (Controller_Context_state_vc == Controller_Context_state_checktoenuma)) || (Controller_Context_state_vc == Controller_Context_state_reached)) || (Controller_Context_state_vc == Controller_Context_state_checktoselectora)) || (Controller_Context_state_vc == Controller_Context_state_checkpresenta)) || (Controller_Context_state_vc == Controller_Context_state_checktoselectorb)) || (Controller_Context_state_vc == Controller_Context_state_checkexistb)) || (Controller_Context_state_vc == Controller_Context_state_error)) || (Controller_Context_state_vc == Controller_Context_state_checkvala)) || (Controller_Context_state_vc == Controller_Context_state_checklengthfixed)) || (Controller_Context_state_vc == Controller_Context_state_checknumb)) || (Controller_Context_state_vc == Controller_Context_state_checklengtha)) || (Controller_Context_state_vc == Controller_Context_state_checktoenumb)) || (Controller_Context_state_vc == Controller_Context_state_checknuma)) || (Controller_Context_state_vc == Controller_Context_state_checkexista)));
}
inline Controller_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Controller_Context_init_done_range_check(dst);
}
inline Controller_Context_init_done_range_check(Controller_Context_init_done_vc)
{
    assert(true);
}
inline Controller_Context_error_assign_value(dst, src)
{
    dst = src;
    Controller_Context_error_range_check(dst);
}
inline Controller_Context_error_range_check(Controller_Context_error_vc)
{
    assert(((Controller_Context_error_vc >= 0) && (Controller_Context_error_vc <= 10000)));
}
inline Controller_Context_reached_assign_value(dst, src)
{
    dst = src;
    Controller_Context_reached_range_check(dst);
}
inline Controller_Context_reached_range_check(Controller_Context_reached_vc)
{
    assert(((Controller_Context_reached_vc >= 0) && (Controller_Context_reached_vc <= 10000)));
}
inline Controller_Context_my_union_speed_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_union_speed_range_check(dst);
}
inline Controller_Context_my_union_speed_range_check(Controller_Context_my_union_speed_vc)
{
    assert(((Controller_Context_my_union_speed_vc >= 0) && (Controller_Context_my_union_speed_vc <= 10000)));
}
inline Controller_Context_my_union_accel_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_union_accel_range_check(dst);
}
inline Controller_Context_my_union_accel_range_check(Controller_Context_my_union_accel_vc)
{
    assert(((Controller_Context_my_union_accel_vc >= 0) && (Controller_Context_my_union_accel_vc <= 10000)));
}
inline Controller_Context_my_union_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Context_my_union_speed_PRESENT);
        Controller_Context_my_union_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Controller_Context_my_union_accel_PRESENT);
        Controller_Context_my_union_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Controller_context_my_union_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Context_my_bool_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_bool_range_check(dst);
}
inline Controller_Context_my_bool_range_check(Controller_Context_my_bool_vc)
{
    assert(true);
}
inline Controller_Context_my_arr_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_arr_elem_range_check(dst);
}
inline Controller_Context_my_arr_elem_range_check(Controller_Context_my_arr_elem_vc)
{
    assert(((Controller_Context_my_arr_elem_vc >= 0) && (Controller_Context_my_arr_elem_vc <= 10000)));
}
inline Controller_Context_my_arr_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Controller_Context_my_arr_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Controller_Context_my_arr_size_check(Controller_Context_my_arr_sc)
{
    assert(((Controller_Context_my_arr_sc >= 1) && (Controller_Context_my_arr_sc <= 6)));
}
inline Controller_Context_my_int_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_int_range_check(dst);
}
inline Controller_Context_my_int_range_check(Controller_Context_my_int_vc)
{
    assert(((Controller_Context_my_int_vc >= 0) && (Controller_Context_my_int_vc <= 10000)));
}
inline Controller_Context_my_struct_mass_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_struct_mass_range_check(dst);
}
inline Controller_Context_my_struct_mass_range_check(Controller_Context_my_struct_mass_vc)
{
    assert(((Controller_Context_my_struct_mass_vc >= 0) && (Controller_Context_my_struct_mass_vc <= 10000)));
}
inline Controller_Context_my_struct_charge_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_struct_charge_range_check(dst);
}
inline Controller_Context_my_struct_charge_range_check(Controller_Context_my_struct_charge_vc)
{
    assert(((Controller_Context_my_struct_charge_vc >= 0) && (Controller_Context_my_struct_charge_vc <= 10000)));
}
inline Controller_Context_my_struct_assign_value(dst, src)
{
    Controller_Context_my_struct_mass_assign_value(dst.mass, src.mass);
    Controller_Context_my_struct_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Controller_Context_my_enum_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_enum_range_check(dst);
}
inline Controller_Context_my_enum_range_check(Controller_Context_my_enum_vc)
{
    assert(((Controller_Context_my_enum_vc == Controller_Context_my_enum_speed) || (Controller_Context_my_enum_vc == Controller_Context_my_enum_accel)));
}
inline Controller_Context_my_fixed_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_fixed_elem_range_check(dst);
}
inline Controller_Context_my_fixed_elem_range_check(Controller_Context_my_fixed_elem_vc)
{
    assert(((Controller_Context_my_fixed_elem_vc >= 0) && (Controller_Context_my_fixed_elem_vc <= 10000)));
}
inline Controller_Context_my_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Controller_Context_my_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Controller_Context_my_derived_array_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_derived_array_elem_range_check(dst);
}
inline Controller_Context_my_derived_array_elem_range_check(Controller_Context_my_derived_array_elem_vc)
{
    assert(((Controller_Context_my_derived_array_elem_vc >= 0) && (Controller_Context_my_derived_array_elem_vc <= 10000)));
}
inline Controller_Context_my_derived_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Controller_Context_my_derived_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Controller_Context_my_derived_array_size_check(Controller_Context_my_derived_array_sc)
{
    assert(((Controller_Context_my_derived_array_sc >= 1) && (Controller_Context_my_derived_array_sc <= 3)));
}
inline Controller_Context_my_derived_fixed_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_my_derived_fixed_elem_range_check(dst);
}
inline Controller_Context_my_derived_fixed_elem_range_check(Controller_Context_my_derived_fixed_elem_vc)
{
    assert(((Controller_Context_my_derived_fixed_elem_vc >= 0) && (Controller_Context_my_derived_fixed_elem_vc <= 10000)));
}
inline Controller_Context_my_derived_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Controller_Context_my_derived_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Controller_Context_assign_value(dst, src)
{
    Controller_Context_state_assign_value(dst.state, src.state);
    Controller_Context_init_done_assign_value(dst.init_done, src.init_done);
    Controller_Context_error_assign_value(dst.error, src.error);
    Controller_Context_reached_assign_value(dst.reached, src.reached);
    Controller_Context_my_union_assign_value(dst.my_union, src.my_union);
    Controller_Context_my_bool_assign_value(dst.my_bool, src.my_bool);
    Controller_Context_my_arr_assign_value(dst.my_arr, src.my_arr);
    Controller_Context_my_int_assign_value(dst.my_int, src.my_int);
    Controller_Context_my_struct_assign_value(dst.my_struct, src.my_struct);
    Controller_Context_my_enum_assign_value(dst.my_enum, src.my_enum);
    Controller_Context_my_fixed_assign_value(dst.my_fixed, src.my_fixed);
    Controller_Context_my_derived_array_assign_value(dst.my_derived_array, src.my_derived_array);
    Controller_Context_my_derived_fixed_assign_value(dst.my_derived_fixed, src.my_derived_fixed);
}
inline Controller_Myunion_Selection_assign_value(dst, src)
{
    dst = src;
    Controller_Myunion_Selection_range_check(dst);
}
inline Controller_Myunion_Selection_range_check(Controller_Myunion_Selection_vc)
{
    assert(((Controller_Myunion_Selection_vc == Controller_Myunion_Selection_speed_present) || (Controller_Myunion_Selection_vc == Controller_Myunion_Selection_accel_present)));
}
inline MyInteger_assign_value(dst, src)
{
    dst = src;
    MyInteger_range_check(dst);
}
inline MyInteger_range_check(MyInteger_vc)
{
    assert(((MyInteger_vc >= 0) && (MyInteger_vc <= 10000)));
}
inline MyBoolean_assign_value(dst, src)
{
    dst = src;
    MyBoolean_range_check(dst);
}
inline MyBoolean_range_check(MyBoolean_vc)
{
    assert(true);
}
inline MyArray_elem_assign_value(dst, src)
{
    dst = src;
    MyArray_elem_range_check(dst);
}
inline MyArray_elem_range_check(MyArray_elem_vc)
{
    assert(((MyArray_elem_vc >= 0) && (MyArray_elem_vc <= 10000)));
}
inline MyArray_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        MyArray_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline MyArray_size_check(MyArray_sc)
{
    assert(((MyArray_sc >= 1) && (MyArray_sc <= 6)));
}
inline MyDerivedArray_elem_assign_value(dst, src)
{
    dst = src;
    MyDerivedArray_elem_range_check(dst);
}
inline MyDerivedArray_elem_range_check(MyDerivedArray_elem_vc)
{
    assert(((MyDerivedArray_elem_vc >= 0) && (MyDerivedArray_elem_vc <= 10000)));
}
inline MyDerivedArray_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        MyDerivedArray_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline MyDerivedArray_size_check(MyDerivedArray_sc)
{
    assert(((MyDerivedArray_sc >= 1) && (MyDerivedArray_sc <= 3)));
}
inline MyUnion_speed_assign_value(dst, src)
{
    dst = src;
    MyUnion_speed_range_check(dst);
}
inline MyUnion_speed_range_check(MyUnion_speed_vc)
{
    assert(((MyUnion_speed_vc >= 0) && (MyUnion_speed_vc <= 10000)));
}
inline MyUnion_accel_assign_value(dst, src)
{
    dst = src;
    MyUnion_accel_range_check(dst);
}
inline MyUnion_accel_range_check(MyUnion_accel_vc)
{
    assert(((MyUnion_accel_vc >= 0) && (MyUnion_accel_vc <= 10000)));
}
inline MyUnion_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == MyUnion_speed_PRESENT);
        MyUnion_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == MyUnion_accel_PRESENT);
        MyUnion_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Myunion_selection_assign_value(dst, src)
{
    dst = src;
}
inline MyEnum_assign_value(dst, src)
{
    dst = src;
    MyEnum_range_check(dst);
}
inline MyEnum_range_check(MyEnum_vc)
{
    assert(((MyEnum_vc == MyEnum_speed) || (MyEnum_vc == MyEnum_accel)));
}
inline MyStruct_mass_assign_value(dst, src)
{
    dst = src;
    MyStruct_mass_range_check(dst);
}
inline MyStruct_mass_range_check(MyStruct_mass_vc)
{
    assert(((MyStruct_mass_vc >= 0) && (MyStruct_mass_vc <= 10000)));
}
inline MyStruct_charge_assign_value(dst, src)
{
    dst = src;
    MyStruct_charge_range_check(dst);
}
inline MyStruct_charge_range_check(MyStruct_charge_vc)
{
    assert(((MyStruct_charge_vc >= 0) && (MyStruct_charge_vc <= 10000)));
}
inline MyStruct_assign_value(dst, src)
{
    MyStruct_mass_assign_value(dst.mass, src.mass);
    MyStruct_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline MyFixed_elem_assign_value(dst, src)
{
    dst = src;
    MyFixed_elem_range_check(dst);
}
inline MyFixed_elem_range_check(MyFixed_elem_vc)
{
    assert(((MyFixed_elem_vc >= 0) && (MyFixed_elem_vc <= 10000)));
}
inline MyFixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        MyFixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline MyDerivedFixed_elem_assign_value(dst, src)
{
    dst = src;
    MyDerivedFixed_elem_range_check(dst);
}
inline MyDerivedFixed_elem_range_check(MyDerivedFixed_elem_vc)
{
    assert(((MyDerivedFixed_elem_vc >= 0) && (MyDerivedFixed_elem_vc <= 10000)));
}
inline MyDerivedFixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        MyDerivedFixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert((((PID_vc == PID_env) || (PID_vc == PID_actuator)) || (PID_vc == PID_controller)));
}
inline Actuator_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_derived_length_p1_elem_range_check(Actuator_Event_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_derived_length_p1_elem_vc >= 0) && (Actuator_Event_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Actuator_Event_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Actuator_Event_msg_in_test_derived_length_p1_size_check(Actuator_Event_msg_in_test_derived_length_p1_sc)
{
    assert(((Actuator_Event_msg_in_test_derived_length_p1_sc >= 1) && (Actuator_Event_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Actuator_Event_msg_in_test_derived_length_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Actuator_Event_msg_in_test_exist_p1_mass_range_check(Actuator_Event_msg_in_test_exist_p1_mass_vc)
{
    assert(((Actuator_Event_msg_in_test_exist_p1_mass_vc >= 0) && (Actuator_Event_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Actuator_Event_msg_in_test_exist_p1_charge_range_check(Actuator_Event_msg_in_test_exist_p1_charge_vc)
{
    assert(((Actuator_Event_msg_in_test_exist_p1_charge_vc >= 0) && (Actuator_Event_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_exist_p1_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Actuator_Event_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Actuator_Event_msg_in_test_exist_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_length_p1_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_length_p1_elem_range_check(Actuator_Event_msg_in_test_length_p1_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_length_p1_elem_vc >= 0) && (Actuator_Event_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Actuator_Event_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Actuator_Event_msg_in_test_length_p1_size_check(Actuator_Event_msg_in_test_length_p1_sc)
{
    assert(((Actuator_Event_msg_in_test_length_p1_sc >= 1) && (Actuator_Event_msg_in_test_length_p1_sc <= 6)));
}
inline Actuator_Event_msg_in_test_length_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_range_check(Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Actuator_Event_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Actuator_Event_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_length_fixed_p1_elem_range_check(Actuator_Event_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Actuator_Event_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Actuator_Event_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Actuator_Event_msg_in_test_length_fixed_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_num_p1_range_check(dst);
}
inline Actuator_Event_msg_in_test_num_p1_range_check(Actuator_Event_msg_in_test_num_p1_vc)
{
    assert(((Actuator_Event_msg_in_test_num_p1_vc == Actuator_Event_msg_in_test_num_p1_speed) || (Actuator_Event_msg_in_test_num_p1_vc == Actuator_Event_msg_in_test_num_p1_accel)));
}
inline Actuator_Event_msg_in_test_num_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_present_p1_speed_range_check(dst);
}
inline Actuator_Event_msg_in_test_present_p1_speed_range_check(Actuator_Event_msg_in_test_present_p1_speed_vc)
{
    assert(((Actuator_Event_msg_in_test_present_p1_speed_vc >= 0) && (Actuator_Event_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_present_p1_accel_range_check(dst);
}
inline Actuator_Event_msg_in_test_present_p1_accel_range_check(Actuator_Event_msg_in_test_present_p1_accel_vc)
{
    assert(((Actuator_Event_msg_in_test_present_p1_accel_vc >= 0) && (Actuator_Event_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_test_present_p1_speed_PRESENT);
        Actuator_Event_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Actuator_Event_msg_in_test_present_p1_accel_PRESENT);
        Actuator_Event_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_in_test_present_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Actuator_Event_msg_in_test_to_enum_p1_speed_range_check(Actuator_Event_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Actuator_Event_msg_in_test_to_enum_p1_speed_vc >= 0) && (Actuator_Event_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Actuator_Event_msg_in_test_to_enum_p1_accel_range_check(Actuator_Event_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Actuator_Event_msg_in_test_to_enum_p1_accel_vc >= 0) && (Actuator_Event_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_test_to_enum_p1_speed_PRESENT);
        Actuator_Event_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Actuator_Event_msg_in_test_to_enum_p1_accel_PRESENT);
        Actuator_Event_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_in_test_to_enum_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_to_selector_p1_range_check(dst);
}
inline Actuator_Event_msg_in_test_to_selector_p1_range_check(Actuator_Event_msg_in_test_to_selector_p1_vc)
{
    assert(((Actuator_Event_msg_in_test_to_selector_p1_vc == Actuator_Event_msg_in_test_to_selector_p1_speed) || (Actuator_Event_msg_in_test_to_selector_p1_vc == Actuator_Event_msg_in_test_to_selector_p1_accel)));
}
inline Actuator_Event_msg_in_test_to_selector_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_val_p1_range_check(dst);
}
inline Actuator_Event_msg_in_test_val_p1_range_check(Actuator_Event_msg_in_test_val_p1_vc)
{
    assert(((Actuator_Event_msg_in_test_val_p1_vc >= 0) && (Actuator_Event_msg_in_test_val_p1_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_val_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_input_none_PRESENT);
        Actuator_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Actuator_Event_msg_in_test_derived_length_PRESENT);
        Actuator_Event_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Actuator_Event_msg_in_test_exist_PRESENT);
        Actuator_Event_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Actuator_Event_msg_in_test_length_PRESENT);
        Actuator_Event_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Actuator_Event_msg_in_test_length_derived_fixed_PRESENT);
        Actuator_Event_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Actuator_Event_msg_in_test_length_fixed_PRESENT);
        Actuator_Event_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Actuator_Event_msg_in_test_num_PRESENT);
        Actuator_Event_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Actuator_Event_msg_in_test_present_PRESENT);
        Actuator_Event_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Actuator_Event_msg_in_test_to_enum_PRESENT);
        Actuator_Event_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Actuator_Event_msg_in_test_to_selector_PRESENT);
        Actuator_Event_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Actuator_Event_msg_in_test_val_PRESENT);
        Actuator_Event_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_result_p1_range_check(dst);
}
inline Actuator_Event_msg_out_result_p1_range_check(Actuator_Event_msg_out_result_p1_vc)
{
    assert(true);
}
inline Actuator_Event_msg_out_result_assign_value(dst, src)
{
    Actuator_Event_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_result_enum_p1_range_check(dst);
}
inline Actuator_Event_msg_out_result_enum_p1_range_check(Actuator_Event_msg_out_result_enum_p1_vc)
{
    assert(((Actuator_Event_msg_out_result_enum_p1_vc == Actuator_Event_msg_out_result_enum_p1_speed) || (Actuator_Event_msg_out_result_enum_p1_vc == Actuator_Event_msg_out_result_enum_p1_accel)));
}
inline Actuator_Event_msg_out_result_enum_assign_value(dst, src)
{
    Actuator_Event_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_out_result_int_p1_range_check(dst);
}
inline Actuator_Event_msg_out_result_int_p1_range_check(Actuator_Event_msg_out_result_int_p1_vc)
{
    assert(((Actuator_Event_msg_out_result_int_p1_vc >= 0) && (Actuator_Event_msg_out_result_int_p1_vc <= 10000)));
}
inline Actuator_Event_msg_out_result_int_assign_value(dst, src)
{
    Actuator_Event_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_out_result_PRESENT);
        Actuator_Event_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Actuator_Event_msg_out_result_enum_PRESENT);
        Actuator_Event_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Actuator_Event_msg_out_result_int_PRESENT);
        Actuator_Event_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_PRESENT);
        Actuator_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Actuator_Event_msg_out_PRESENT);
        Actuator_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_result_p1_range_check(dst);
}
inline Controller_Event_msg_in_result_p1_range_check(Controller_Event_msg_in_result_p1_vc)
{
    assert(true);
}
inline Controller_Event_msg_in_result_assign_value(dst, src)
{
    Controller_Event_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_result_enum_p1_range_check(dst);
}
inline Controller_Event_msg_in_result_enum_p1_range_check(Controller_Event_msg_in_result_enum_p1_vc)
{
    assert(((Controller_Event_msg_in_result_enum_p1_vc == Controller_Event_msg_in_result_enum_p1_speed) || (Controller_Event_msg_in_result_enum_p1_vc == Controller_Event_msg_in_result_enum_p1_accel)));
}
inline Controller_Event_msg_in_result_enum_assign_value(dst, src)
{
    Controller_Event_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_in_result_int_p1_range_check(dst);
}
inline Controller_Event_msg_in_result_int_p1_range_check(Controller_Event_msg_in_result_int_p1_vc)
{
    assert(((Controller_Event_msg_in_result_int_p1_vc >= 0) && (Controller_Event_msg_in_result_int_p1_vc <= 10000)));
}
inline Controller_Event_msg_in_result_int_assign_value(dst, src)
{
    Controller_Event_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_input_none_PRESENT);
        Controller_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Controller_Event_msg_in_result_PRESENT);
        Controller_Event_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Controller_Event_msg_in_result_enum_PRESENT);
        Controller_Event_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Controller_Event_msg_in_result_int_PRESENT);
        Controller_Event_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_derived_length_p1_elem_range_check(Controller_Event_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Controller_Event_msg_out_test_derived_length_p1_elem_vc >= 0) && (Controller_Event_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Controller_Event_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Controller_Event_msg_out_test_derived_length_p1_size_check(Controller_Event_msg_out_test_derived_length_p1_sc)
{
    assert(((Controller_Event_msg_out_test_derived_length_p1_sc >= 1) && (Controller_Event_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Controller_Event_msg_out_test_derived_length_assign_value(dst, src)
{
    Controller_Event_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Controller_Event_msg_out_test_exist_p1_mass_range_check(Controller_Event_msg_out_test_exist_p1_mass_vc)
{
    assert(((Controller_Event_msg_out_test_exist_p1_mass_vc >= 0) && (Controller_Event_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Controller_Event_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Controller_Event_msg_out_test_exist_p1_charge_range_check(Controller_Event_msg_out_test_exist_p1_charge_vc)
{
    assert(((Controller_Event_msg_out_test_exist_p1_charge_vc >= 0) && (Controller_Event_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Controller_Event_msg_out_test_exist_p1_assign_value(dst, src)
{
    Controller_Event_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Controller_Event_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Controller_Event_msg_out_test_exist_assign_value(dst, src)
{
    Controller_Event_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_length_p1_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_length_p1_elem_range_check(Controller_Event_msg_out_test_length_p1_elem_vc)
{
    assert(((Controller_Event_msg_out_test_length_p1_elem_vc >= 0) && (Controller_Event_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Controller_Event_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Controller_Event_msg_out_test_length_p1_size_check(Controller_Event_msg_out_test_length_p1_sc)
{
    assert(((Controller_Event_msg_out_test_length_p1_sc >= 1) && (Controller_Event_msg_out_test_length_p1_sc <= 6)));
}
inline Controller_Event_msg_out_test_length_assign_value(dst, src)
{
    Controller_Event_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_length_derived_fixed_p1_elem_range_check(Controller_Event_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Controller_Event_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Controller_Event_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Controller_Event_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Controller_Event_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Controller_Event_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_length_fixed_p1_elem_range_check(Controller_Event_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Controller_Event_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Controller_Event_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Controller_Event_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Controller_Event_msg_out_test_length_fixed_assign_value(dst, src)
{
    Controller_Event_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_num_p1_range_check(dst);
}
inline Controller_Event_msg_out_test_num_p1_range_check(Controller_Event_msg_out_test_num_p1_vc)
{
    assert(((Controller_Event_msg_out_test_num_p1_vc == Controller_Event_msg_out_test_num_p1_speed) || (Controller_Event_msg_out_test_num_p1_vc == Controller_Event_msg_out_test_num_p1_accel)));
}
inline Controller_Event_msg_out_test_num_assign_value(dst, src)
{
    Controller_Event_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_present_p1_speed_range_check(dst);
}
inline Controller_Event_msg_out_test_present_p1_speed_range_check(Controller_Event_msg_out_test_present_p1_speed_vc)
{
    assert(((Controller_Event_msg_out_test_present_p1_speed_vc >= 0) && (Controller_Event_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Controller_Event_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_present_p1_accel_range_check(dst);
}
inline Controller_Event_msg_out_test_present_p1_accel_range_check(Controller_Event_msg_out_test_present_p1_accel_vc)
{
    assert(((Controller_Event_msg_out_test_present_p1_accel_vc >= 0) && (Controller_Event_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Controller_Event_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_test_present_p1_speed_PRESENT);
        Controller_Event_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Controller_Event_msg_out_test_present_p1_accel_PRESENT);
        Controller_Event_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_test_present_assign_value(dst, src)
{
    Controller_Event_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Controller_Event_msg_out_test_to_enum_p1_speed_range_check(Controller_Event_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Controller_Event_msg_out_test_to_enum_p1_speed_vc >= 0) && (Controller_Event_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Controller_Event_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Controller_Event_msg_out_test_to_enum_p1_accel_range_check(Controller_Event_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Controller_Event_msg_out_test_to_enum_p1_accel_vc >= 0) && (Controller_Event_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Controller_Event_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_test_to_enum_p1_speed_PRESENT);
        Controller_Event_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Controller_Event_msg_out_test_to_enum_p1_accel_PRESENT);
        Controller_Event_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_test_to_enum_assign_value(dst, src)
{
    Controller_Event_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_to_selector_p1_range_check(dst);
}
inline Controller_Event_msg_out_test_to_selector_p1_range_check(Controller_Event_msg_out_test_to_selector_p1_vc)
{
    assert(((Controller_Event_msg_out_test_to_selector_p1_vc == Controller_Event_msg_out_test_to_selector_p1_speed) || (Controller_Event_msg_out_test_to_selector_p1_vc == Controller_Event_msg_out_test_to_selector_p1_accel)));
}
inline Controller_Event_msg_out_test_to_selector_assign_value(dst, src)
{
    Controller_Event_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_val_p1_range_check(dst);
}
inline Controller_Event_msg_out_test_val_p1_range_check(Controller_Event_msg_out_test_val_p1_vc)
{
    assert(((Controller_Event_msg_out_test_val_p1_vc >= 0) && (Controller_Event_msg_out_test_val_p1_vc <= 10000)));
}
inline Controller_Event_msg_out_test_val_assign_value(dst, src)
{
    Controller_Event_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_test_derived_length_PRESENT);
        Controller_Event_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Controller_Event_msg_out_test_exist_PRESENT);
        Controller_Event_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Controller_Event_msg_out_test_length_PRESENT);
        Controller_Event_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Controller_Event_msg_out_test_length_derived_fixed_PRESENT);
        Controller_Event_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Controller_Event_msg_out_test_length_fixed_PRESENT);
        Controller_Event_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Controller_Event_msg_out_test_num_PRESENT);
        Controller_Event_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Controller_Event_msg_out_test_present_PRESENT);
        Controller_Event_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Controller_Event_msg_out_test_to_enum_PRESENT);
        Controller_Event_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Controller_Event_msg_out_test_to_selector_PRESENT);
        Controller_Event_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Controller_Event_msg_out_test_val_PRESENT);
        Controller_Event_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_PRESENT);
        Controller_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Controller_Event_msg_out_PRESENT);
        Controller_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Controller_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_derived_length_p1_elem_range_check(Function_Event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Function_Event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Function_Event_actuator_msg_in_test_derived_length_p1_size_check(Function_Event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Function_Event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Function_Event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Function_Event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_exist_p1_mass_range_check(Function_Event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Function_Event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Function_Event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_exist_p1_charge_range_check(Function_Event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Function_Event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Function_Event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Function_Event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Function_Event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_length_p1_elem_range_check(Function_Event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Function_Event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Function_Event_actuator_msg_in_test_length_p1_size_check(Function_Event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Function_Event_actuator_msg_in_test_length_p1_sc >= 1) && (Function_Event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Function_Event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Function_Event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Function_Event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Function_Event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Function_Event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Function_Event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_num_p1_range_check(Function_Event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Function_Event_actuator_msg_in_test_num_p1_vc == Function_Event_actuator_msg_in_test_num_p1_speed) || (Function_Event_actuator_msg_in_test_num_p1_vc == Function_Event_actuator_msg_in_test_num_p1_accel)));
}
inline Function_Event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_present_p1_speed_range_check(Function_Event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Function_Event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Function_Event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_present_p1_accel_range_check(Function_Event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Function_Event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Function_Event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Function_Event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Function_Event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_to_enum_p1_speed_range_check(Function_Event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Function_Event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Function_Event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_to_enum_p1_accel_range_check(Function_Event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Function_Event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Function_Event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Function_Event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Function_Event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_to_selector_p1_range_check(Function_Event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Function_Event_actuator_msg_in_test_to_selector_p1_vc == Function_Event_actuator_msg_in_test_to_selector_p1_speed) || (Function_Event_actuator_msg_in_test_to_selector_p1_vc == Function_Event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Function_Event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_val_p1_range_check(Function_Event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Function_Event_actuator_msg_in_test_val_p1_vc >= 0) && (Function_Event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_input_none_PRESENT);
        Function_Event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_derived_length_PRESENT);
        Function_Event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_exist_PRESENT);
        Function_Event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_length_PRESENT);
        Function_Event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Function_Event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_length_fixed_PRESENT);
        Function_Event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_num_PRESENT);
        Function_Event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_present_PRESENT);
        Function_Event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_to_enum_PRESENT);
        Function_Event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_to_selector_PRESENT);
        Function_Event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_val_PRESENT);
        Function_Event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_result_p1_range_check(dst);
}
inline Function_Event_actuator_msg_out_result_p1_range_check(Function_Event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Function_Event_actuator_msg_out_result_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Function_Event_actuator_msg_out_result_enum_p1_range_check(Function_Event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Function_Event_actuator_msg_out_result_enum_p1_vc == Function_Event_actuator_msg_out_result_enum_p1_speed) || (Function_Event_actuator_msg_out_result_enum_p1_vc == Function_Event_actuator_msg_out_result_enum_p1_accel)));
}
inline Function_Event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Function_Event_actuator_msg_out_result_int_p1_range_check(Function_Event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Function_Event_actuator_msg_out_result_int_p1_vc >= 0) && (Function_Event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Function_Event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Function_Event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_out_result_PRESENT);
        Function_Event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Function_Event_actuator_msg_out_result_enum_PRESENT);
        Function_Event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Function_Event_actuator_msg_out_result_int_PRESENT);
        Function_Event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_PRESENT);
        Function_Event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_actuator_msg_out_PRESENT);
        Function_Event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_result_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_result_p1_range_check(Function_Event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Function_Event_controller_msg_in_result_assign_value(dst, src)
{
    Function_Event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_result_enum_p1_range_check(Function_Event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Function_Event_controller_msg_in_result_enum_p1_vc == Function_Event_controller_msg_in_result_enum_p1_speed) || (Function_Event_controller_msg_in_result_enum_p1_vc == Function_Event_controller_msg_in_result_enum_p1_accel)));
}
inline Function_Event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Function_Event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Function_Event_controller_msg_in_result_int_p1_range_check(Function_Event_controller_msg_in_result_int_p1_vc)
{
    assert(((Function_Event_controller_msg_in_result_int_p1_vc >= 0) && (Function_Event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_in_result_int_assign_value(dst, src)
{
    Function_Event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_input_none_PRESENT);
        Function_Event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_controller_msg_in_result_PRESENT);
        Function_Event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Function_Event_controller_msg_in_result_enum_PRESENT);
        Function_Event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Function_Event_controller_msg_in_result_int_PRESENT);
        Function_Event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_derived_length_p1_elem_range_check(Function_Event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Function_Event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Function_Event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Function_Event_controller_msg_out_test_derived_length_p1_size_check(Function_Event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Function_Event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Function_Event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Function_Event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Function_Event_controller_msg_out_test_exist_p1_mass_range_check(Function_Event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Function_Event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Function_Event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Function_Event_controller_msg_out_test_exist_p1_charge_range_check(Function_Event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Function_Event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Function_Event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Function_Event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Function_Event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_length_p1_elem_range_check(Function_Event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Function_Event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Function_Event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Function_Event_controller_msg_out_test_length_p1_size_check(Function_Event_controller_msg_out_test_length_p1_sc)
{
    assert(((Function_Event_controller_msg_out_test_length_p1_sc >= 1) && (Function_Event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Function_Event_controller_msg_out_test_length_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Function_Event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Function_Event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_length_fixed_p1_elem_range_check(Function_Event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Function_Event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Function_Event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Function_Event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_test_num_p1_range_check(Function_Event_controller_msg_out_test_num_p1_vc)
{
    assert(((Function_Event_controller_msg_out_test_num_p1_vc == Function_Event_controller_msg_out_test_num_p1_speed) || (Function_Event_controller_msg_out_test_num_p1_vc == Function_Event_controller_msg_out_test_num_p1_accel)));
}
inline Function_Event_controller_msg_out_test_num_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Function_Event_controller_msg_out_test_present_p1_speed_range_check(Function_Event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Function_Event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Function_Event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Function_Event_controller_msg_out_test_present_p1_accel_range_check(Function_Event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Function_Event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Function_Event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_test_present_p1_speed_PRESENT);
        Function_Event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Function_Event_controller_msg_out_test_present_p1_accel_PRESENT);
        Function_Event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_test_present_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Function_Event_controller_msg_out_test_to_enum_p1_speed_range_check(Function_Event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Function_Event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Function_Event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Function_Event_controller_msg_out_test_to_enum_p1_accel_range_check(Function_Event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Function_Event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Function_Event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Function_Event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Function_Event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Function_Event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_test_to_selector_p1_range_check(Function_Event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Function_Event_controller_msg_out_test_to_selector_p1_vc == Function_Event_controller_msg_out_test_to_selector_p1_speed) || (Function_Event_controller_msg_out_test_to_selector_p1_vc == Function_Event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Function_Event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_test_val_p1_range_check(Function_Event_controller_msg_out_test_val_p1_vc)
{
    assert(((Function_Event_controller_msg_out_test_val_p1_vc >= 0) && (Function_Event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_val_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_test_derived_length_PRESENT);
        Function_Event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Function_Event_controller_msg_out_test_exist_PRESENT);
        Function_Event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Function_Event_controller_msg_out_test_length_PRESENT);
        Function_Event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Function_Event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Function_Event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Function_Event_controller_msg_out_test_length_fixed_PRESENT);
        Function_Event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Function_Event_controller_msg_out_test_num_PRESENT);
        Function_Event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Function_Event_controller_msg_out_test_present_PRESENT);
        Function_Event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Function_Event_controller_msg_out_test_to_enum_PRESENT);
        Function_Event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Function_Event_controller_msg_out_test_to_selector_PRESENT);
        Function_Event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Function_Event_controller_msg_out_test_val_PRESENT);
        Function_Event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_PRESENT);
        Function_Event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_controller_msg_out_PRESENT);
        Function_Event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_PRESENT);
        Function_Event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Function_Event_controller_PRESENT);
        Function_Event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i;
    for(i : 0 .. 79)
    {
        dst.data[i] = src.data[i];
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_size_check(Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Named_Function_Event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_range_check(Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_range_check(Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Named_Function_Event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Named_Function_Event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_actuator_msg_in_test_length_p1_size_check(Named_Function_Event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Named_Function_Event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Named_Function_Event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Named_Function_Event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_num_p1_range_check(Named_Function_Event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_num_p1_vc == Named_Function_Event_event_actuator_msg_in_test_num_p1_speed) || (Named_Function_Event_event_actuator_msg_in_test_num_p1_vc == Named_Function_Event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Named_Function_Event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_range_check(Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_range_check(Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_range_check(Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_vc == Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_speed) || (Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_vc == Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Named_Function_Event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_val_p1_range_check(Named_Function_Event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_input_none_PRESENT);
        Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_derived_length_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_exist_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_length_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_num_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_present_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_to_enum_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_to_selector_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_val_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_result_p1_range_check(Named_Function_Event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Named_Function_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_result_enum_p1_range_check(Named_Function_Event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_out_result_enum_p1_vc == Named_Function_Event_event_actuator_msg_out_result_enum_p1_speed) || (Named_Function_Event_event_actuator_msg_out_result_enum_p1_vc == Named_Function_Event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Named_Function_Event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_out_result_int_p1_range_check(Named_Function_Event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Named_Function_Event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_result_PRESENT);
        Named_Function_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_result_enum_PRESENT);
        Named_Function_Event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_result_int_PRESENT);
        Named_Function_Event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_PRESENT);
        Named_Function_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_PRESENT);
        Named_Function_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_result_p1_range_check(Named_Function_Event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Named_Function_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_result_enum_p1_range_check(Named_Function_Event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_result_enum_p1_vc == Named_Function_Event_event_controller_msg_in_result_enum_p1_speed) || (Named_Function_Event_event_controller_msg_in_result_enum_p1_vc == Named_Function_Event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Named_Function_Event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_in_result_int_p1_range_check(Named_Function_Event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_in_result_int_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_input_none_PRESENT);
        Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_result_PRESENT);
        Named_Function_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_result_enum_PRESENT);
        Named_Function_Event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_result_int_PRESENT);
        Named_Function_Event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Named_Function_Event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_controller_msg_out_test_derived_length_p1_size_check(Named_Function_Event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Named_Function_Event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Named_Function_Event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_range_check(Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_range_check(Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Named_Function_Event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Named_Function_Event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_length_p1_elem_range_check(Named_Function_Event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Named_Function_Event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_controller_msg_out_test_length_p1_size_check(Named_Function_Event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_length_p1_sc >= 1) && (Named_Function_Event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Named_Function_Event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Named_Function_Event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_num_p1_range_check(Named_Function_Event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_num_p1_vc == Named_Function_Event_event_controller_msg_out_test_num_p1_speed) || (Named_Function_Event_event_controller_msg_out_test_num_p1_vc == Named_Function_Event_event_controller_msg_out_test_num_p1_accel)));
}
inline Named_Function_Event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_present_p1_speed_range_check(Named_Function_Event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_present_p1_accel_range_check(Named_Function_Event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_to_selector_p1_range_check(Named_Function_Event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_to_selector_p1_vc == Named_Function_Event_event_controller_msg_out_test_to_selector_p1_speed) || (Named_Function_Event_event_controller_msg_out_test_to_selector_p1_vc == Named_Function_Event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Named_Function_Event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_val_p1_range_check(Named_Function_Event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_val_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_derived_length_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_exist_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_length_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_length_fixed_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_num_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_present_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_to_enum_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_to_selector_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_val_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_PRESENT);
        Named_Function_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_PRESENT);
        Named_Function_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_PRESENT);
        Named_Function_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Named_Function_Event_event_controller_PRESENT);
        Named_Function_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert((((Interface_Event_source_vc == Interface_Event_source_env) || (Interface_Event_source_vc == Interface_Event_source_actuator)) || (Interface_Event_source_vc == Interface_Event_source_controller)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert((((Interface_Event_dest_vc == Interface_Event_dest_env) || (Interface_Event_dest_vc == Interface_Event_dest_actuator)) || (Interface_Event_dest_vc == Interface_Event_dest_controller)));
}
inline Interface_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Interface_Event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_actuator_msg_in_test_derived_length_p1_size_check(Interface_Event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Interface_Event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Interface_Event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_exist_p1_mass_range_check(Interface_Event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_exist_p1_charge_range_check(Interface_Event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Interface_Event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Interface_Event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_length_p1_elem_range_check(Interface_Event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Interface_Event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_actuator_msg_in_test_length_p1_size_check(Interface_Event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Interface_Event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Interface_Event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Interface_Event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Interface_Event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Interface_Event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_num_p1_range_check(Interface_Event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_num_p1_vc == Interface_Event_event_actuator_msg_in_test_num_p1_speed) || (Interface_Event_event_actuator_msg_in_test_num_p1_vc == Interface_Event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Interface_Event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_present_p1_speed_range_check(Interface_Event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_present_p1_accel_range_check(Interface_Event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Interface_Event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Interface_Event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Interface_Event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Interface_Event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_to_selector_p1_range_check(Interface_Event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_to_selector_p1_vc == Interface_Event_event_actuator_msg_in_test_to_selector_p1_speed) || (Interface_Event_event_actuator_msg_in_test_to_selector_p1_vc == Interface_Event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Interface_Event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_val_p1_range_check(Interface_Event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_input_none_PRESENT);
        Interface_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_derived_length_PRESENT);
        Interface_Event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_exist_PRESENT);
        Interface_Event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_length_PRESENT);
        Interface_Event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Interface_Event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Interface_Event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_num_PRESENT);
        Interface_Event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_present_PRESENT);
        Interface_Event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_to_enum_PRESENT);
        Interface_Event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_to_selector_PRESENT);
        Interface_Event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_val_PRESENT);
        Interface_Event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_result_p1_range_check(Interface_Event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Interface_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_result_enum_p1_range_check(Interface_Event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_out_result_enum_p1_vc == Interface_Event_event_actuator_msg_out_result_enum_p1_speed) || (Interface_Event_event_actuator_msg_out_result_enum_p1_vc == Interface_Event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Interface_Event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_out_result_int_p1_range_check(Interface_Event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Interface_Event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_result_PRESENT);
        Interface_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_result_enum_PRESENT);
        Interface_Event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_result_int_PRESENT);
        Interface_Event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_PRESENT);
        Interface_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_PRESENT);
        Interface_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_result_p1_range_check(Interface_Event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Interface_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_result_enum_p1_range_check(Interface_Event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_result_enum_p1_vc == Interface_Event_event_controller_msg_in_result_enum_p1_speed) || (Interface_Event_event_controller_msg_in_result_enum_p1_vc == Interface_Event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Interface_Event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_in_result_int_p1_range_check(Interface_Event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_in_result_int_p1_vc >= 0) && (Interface_Event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_input_none_PRESENT);
        Interface_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_result_PRESENT);
        Interface_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_result_enum_PRESENT);
        Interface_Event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_result_int_PRESENT);
        Interface_Event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Interface_Event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_controller_msg_out_test_derived_length_p1_size_check(Interface_Event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Interface_Event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Interface_Event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Interface_Event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_exist_p1_mass_range_check(Interface_Event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Interface_Event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_exist_p1_charge_range_check(Interface_Event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Interface_Event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Interface_Event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Interface_Event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_length_p1_elem_range_check(Interface_Event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Interface_Event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_controller_msg_out_test_length_p1_size_check(Interface_Event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Interface_Event_event_controller_msg_out_test_length_p1_sc >= 1) && (Interface_Event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Interface_Event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Interface_Event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Interface_Event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Interface_Event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_num_p1_range_check(Interface_Event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_num_p1_vc == Interface_Event_event_controller_msg_out_test_num_p1_speed) || (Interface_Event_event_controller_msg_out_test_num_p1_vc == Interface_Event_event_controller_msg_out_test_num_p1_accel)));
}
inline Interface_Event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_present_p1_speed_range_check(Interface_Event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Interface_Event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_present_p1_accel_range_check(Interface_Event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Interface_Event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Interface_Event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Interface_Event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Interface_Event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Interface_Event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_to_selector_p1_range_check(Interface_Event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_to_selector_p1_vc == Interface_Event_event_controller_msg_out_test_to_selector_p1_speed) || (Interface_Event_event_controller_msg_out_test_to_selector_p1_vc == Interface_Event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Interface_Event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_val_p1_range_check(Interface_Event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_val_p1_vc >= 0) && (Interface_Event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_derived_length_PRESENT);
        Interface_Event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_exist_PRESENT);
        Interface_Event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_length_PRESENT);
        Interface_Event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Interface_Event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_length_fixed_PRESENT);
        Interface_Event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_num_PRESENT);
        Interface_Event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_present_PRESENT);
        Interface_Event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_to_enum_PRESENT);
        Interface_Event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_to_selector_PRESENT);
        Interface_Event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_val_PRESENT);
        Interface_Event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_PRESENT);
        Interface_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_PRESENT);
        Interface_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_PRESENT);
        Interface_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Interface_Event_event_controller_PRESENT);
        Interface_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_controller)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_controller)));
}
inline Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_size_check(Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_p1_size_check(Observable_Event_input_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Observable_Event_input_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_num_p1_range_check(Observable_Event_input_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_num_p1_vc == Observable_Event_input_event_event_actuator_msg_in_test_num_p1_speed) || (Observable_Event_input_event_event_actuator_msg_in_test_num_p1_vc == Observable_Event_input_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_speed) || (Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_val_p1_range_check(Observable_Event_input_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_derived_length_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_exist_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_length_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_num_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_present_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_to_enum_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_to_selector_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_val_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_p1_range_check(Observable_Event_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_range_check(Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_speed) || (Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Observable_Event_input_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_out_result_int_p1_range_check(Observable_Event_input_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_result_enum_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_result_int_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_result_p1_range_check(Observable_Event_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_result_enum_p1_range_check(Observable_Event_input_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_result_enum_p1_vc == Observable_Event_input_event_event_controller_msg_in_result_enum_p1_speed) || (Observable_Event_input_event_event_controller_msg_in_result_enum_p1_vc == Observable_Event_input_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Observable_Event_input_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_in_result_int_p1_range_check(Observable_Event_input_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_in_result_int_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_result_enum_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_result_int_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_size_check(Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_input_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_p1_size_check(Observable_Event_input_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_length_p1_sc >= 1) && (Observable_Event_input_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_num_p1_range_check(Observable_Event_input_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_num_p1_vc == Observable_Event_input_event_event_controller_msg_out_test_num_p1_speed) || (Observable_Event_input_event_event_controller_msg_out_test_num_p1_vc == Observable_Event_input_event_event_controller_msg_out_test_num_p1_accel)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_range_check(Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_range_check(Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_range_check(Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_speed) || (Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_val_p1_range_check(Observable_Event_input_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_val_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_derived_length_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_exist_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_length_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_length_fixed_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_num_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_present_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_to_enum_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_to_selector_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_val_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_PRESENT);
        Observable_Event_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_input_event_event_controller_PRESENT);
        Observable_Event_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_controller)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_controller)));
}
inline Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_size_check(Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_p1_size_check(Observable_Event_output_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Observable_Event_output_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_num_p1_range_check(Observable_Event_output_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_num_p1_vc == Observable_Event_output_event_event_actuator_msg_in_test_num_p1_speed) || (Observable_Event_output_event_event_actuator_msg_in_test_num_p1_vc == Observable_Event_output_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_speed) || (Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_val_p1_range_check(Observable_Event_output_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_derived_length_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_exist_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_length_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_num_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_present_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_to_enum_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_to_selector_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_val_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_p1_range_check(Observable_Event_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_range_check(Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_speed) || (Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Observable_Event_output_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_out_result_int_p1_range_check(Observable_Event_output_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_result_enum_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_result_int_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_result_p1_range_check(Observable_Event_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_result_enum_p1_range_check(Observable_Event_output_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_result_enum_p1_vc == Observable_Event_output_event_event_controller_msg_in_result_enum_p1_speed) || (Observable_Event_output_event_event_controller_msg_in_result_enum_p1_vc == Observable_Event_output_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Observable_Event_output_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_in_result_int_p1_range_check(Observable_Event_output_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_in_result_int_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_result_enum_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_result_int_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_size_check(Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_output_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_p1_size_check(Observable_Event_output_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_length_p1_sc >= 1) && (Observable_Event_output_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_num_p1_range_check(Observable_Event_output_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_num_p1_vc == Observable_Event_output_event_event_controller_msg_out_test_num_p1_speed) || (Observable_Event_output_event_event_controller_msg_out_test_num_p1_vc == Observable_Event_output_event_event_controller_msg_out_test_num_p1_accel)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_range_check(Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_range_check(Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_range_check(Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_speed) || (Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_val_p1_range_check(Observable_Event_output_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_val_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_derived_length_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_exist_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_length_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_length_fixed_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_num_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_present_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_to_enum_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_to_selector_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_val_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_PRESENT);
        Observable_Event_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_output_event_event_controller_PRESENT);
        Observable_Event_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_controller)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_controller)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_size_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_size_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_sc >= 1) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_speed) || (Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_accel)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed) || (Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_length_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_num_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_present_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_val_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_speed) || (Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_result_int_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_vc == Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_speed) || (Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_vc == Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_accel)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_result_enum_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_result_int_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_size_check(Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_size_check(Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_sc >= 1) && (Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_vc == Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_speed) || (Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_vc == Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_accel)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed) || (Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_exist_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_length_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_num_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_present_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_val_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_PRESENT);
        Observable_Event_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_PRESENT);
        Observable_Event_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_controller)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_controller)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_size_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_size_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_speed) || (Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed) || (Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_length_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_num_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_present_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_val_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_speed) || (Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_result_int_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_speed) || (Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_result_enum_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_result_int_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_size_check(Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_size_check(Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_sc >= 1) && (Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_speed) || (Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_accel)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed) || (Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_exist_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_length_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_num_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_present_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_val_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_PRESENT);
        Events_Ty_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_PRESENT);
        Events_Ty_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_controller)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_controller)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_size_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_size_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_speed) || (Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed) || (Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_length_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_num_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_present_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_val_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_speed) || (Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_result_int_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_speed) || (Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_result_enum_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_result_int_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_size_check(Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_size_check(Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_sc >= 1) && (Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_speed) || (Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_accel)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed) || (Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_exist_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_length_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_num_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_present_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_val_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_PRESENT);
        Events_Ty_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_PRESENT);
        Events_Ty_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_controller)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_controller)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_size_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_size_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed) || (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed) || (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed) || (Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed) || (Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_size_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_size_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed) || (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed) || (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 9)
    {
        Events_Ty_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_actuator_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_source_range_check(System_State_actuator_queue_elem_input_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_env) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_actuator)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_controller)));
}
inline System_State_actuator_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_dest_range_check(System_State_actuator_queue_elem_input_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_env) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_actuator)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_controller)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_size_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_speed) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_speed) || (System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_speed) || (System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_size_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_size_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_speed) || (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_source_range_check(System_State_actuator_queue_elem_output_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_env) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_actuator)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_controller)));
}
inline System_State_actuator_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_dest_range_check(System_State_actuator_queue_elem_output_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_env) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_actuator)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_controller)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_size_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_speed) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_speed) || (System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_speed) || (System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_size_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_size_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_speed) || (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_source_range_check(System_State_actuator_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_env) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_actuator)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_controller)));
}
inline System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_dest_range_check(System_State_actuator_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_env) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_actuator)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_controller)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_no_event_PRESENT);
        System_State_actuator_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_actuator_queue_elem_system_startup_PRESENT);
        System_State_actuator_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_PRESENT);
        System_State_actuator_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_PRESENT);
        System_State_actuator_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_size_check(System_State_actuator_queue_sc)
{
    assert(((System_State_actuator_queue_sc >= 0) && (System_State_actuator_queue_sc <= 2)));
}
inline System_State_controller_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_source_range_check(System_State_controller_queue_elem_input_event_source_vc)
{
    assert((((System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_env) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_actuator)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_controller)));
}
inline System_State_controller_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_dest_range_check(System_State_controller_queue_elem_input_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_env) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_actuator)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_controller)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_size_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_speed) || (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_speed) || (System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_speed) || (System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_size_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_size_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_speed) || (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_source_range_check(System_State_controller_queue_elem_output_event_source_vc)
{
    assert((((System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_env) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_actuator)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_controller)));
}
inline System_State_controller_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_dest_range_check(System_State_controller_queue_elem_output_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_env) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_actuator)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_controller)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_size_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_speed) || (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_speed) || (System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_speed) || (System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_size_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_size_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_speed) || (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_source_range_check(System_State_controller_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_env) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_actuator)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_controller)));
}
inline System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_dest_range_check(System_State_controller_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_env) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_actuator)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_controller)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_vc == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_vc)
{
    assert(true);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_enum_assign_value(dst.data.result_enum, src.data.result_enum);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_int_assign_value(dst.data.result_int, src.data.result_int);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_mass_assign_value(dst.mass, src.mass);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_sc <= 6)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_speed) || (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_vc == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_accel)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_derived_length_assign_value(dst.data.test_derived_length, src.data.test_derived_length);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_exist_assign_value(dst.data.test_exist, src.data.test_exist);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_assign_value(dst.data.test_length, src.data.test_length);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_derived_fixed_assign_value(dst.data.test_length_derived_fixed, src.data.test_length_derived_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_length_fixed_assign_value(dst.data.test_length_fixed, src.data.test_length_fixed);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_num_assign_value(dst.data.test_num, src.data.test_num);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_present_assign_value(dst.data.test_present, src.data.test_present);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_enum_assign_value(dst.data.test_to_enum, src.data.test_to_enum);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_to_selector_assign_value(dst.data.test_to_selector, src.data.test_to_selector);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_val_assign_value(dst.data.test_val, src.data.test_val);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_no_event_PRESENT);
        System_State_controller_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_controller_queue_elem_system_startup_PRESENT);
        System_State_controller_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_PRESENT);
        System_State_controller_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_PRESENT);
        System_State_controller_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_PRESENT);
        System_State_controller_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_queue_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_size_check(System_State_controller_queue_sc)
{
    assert(((System_State_controller_queue_sc >= 0) && (System_State_controller_queue_sc <= 2)));
}
inline System_State_actuator_state_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_state_range_check(dst);
}
inline System_State_actuator_state_range_check(System_State_actuator_state_vc)
{
    assert((System_State_actuator_state_vc == System_State_actuator_state_wait));
}
inline System_State_actuator_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_init_done_range_check(dst);
}
inline System_State_actuator_init_done_range_check(System_State_actuator_init_done_vc)
{
    assert(true);
}
inline System_State_actuator_my_union_speed_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_union_speed_range_check(dst);
}
inline System_State_actuator_my_union_speed_range_check(System_State_actuator_my_union_speed_vc)
{
    assert(((System_State_actuator_my_union_speed_vc >= 0) && (System_State_actuator_my_union_speed_vc <= 10000)));
}
inline System_State_actuator_my_union_accel_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_union_accel_range_check(dst);
}
inline System_State_actuator_my_union_accel_range_check(System_State_actuator_my_union_accel_vc)
{
    assert(((System_State_actuator_my_union_accel_vc >= 0) && (System_State_actuator_my_union_accel_vc <= 10000)));
}
inline System_State_actuator_my_union_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_my_union_speed_PRESENT);
        System_State_actuator_my_union_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_actuator_my_union_accel_PRESENT);
        System_State_actuator_my_union_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_my_union_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_my_union_det_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_union_det_range_check(dst);
}
inline System_State_actuator_my_union_det_range_check(System_State_actuator_my_union_det_vc)
{
    assert(((System_State_actuator_my_union_det_vc == System_State_actuator_my_union_det_speed_present) || (System_State_actuator_my_union_det_vc == System_State_actuator_my_union_det_accel_present)));
}
inline System_State_actuator_my_bool_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_bool_range_check(dst);
}
inline System_State_actuator_my_bool_range_check(System_State_actuator_my_bool_vc)
{
    assert(true);
}
inline System_State_actuator_my_array_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_array_elem_range_check(dst);
}
inline System_State_actuator_my_array_elem_range_check(System_State_actuator_my_array_elem_vc)
{
    assert(((System_State_actuator_my_array_elem_vc >= 0) && (System_State_actuator_my_array_elem_vc <= 10000)));
}
inline System_State_actuator_my_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_actuator_my_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_my_array_size_check(System_State_actuator_my_array_sc)
{
    assert(((System_State_actuator_my_array_sc >= 1) && (System_State_actuator_my_array_sc <= 6)));
}
inline System_State_actuator_my_derived_array_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_derived_array_elem_range_check(dst);
}
inline System_State_actuator_my_derived_array_elem_range_check(System_State_actuator_my_derived_array_elem_vc)
{
    assert(((System_State_actuator_my_derived_array_elem_vc >= 0) && (System_State_actuator_my_derived_array_elem_vc <= 10000)));
}
inline System_State_actuator_my_derived_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_actuator_my_derived_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_actuator_my_derived_array_size_check(System_State_actuator_my_derived_array_sc)
{
    assert(((System_State_actuator_my_derived_array_sc >= 1) && (System_State_actuator_my_derived_array_sc <= 3)));
}
inline System_State_actuator_my_int_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_int_range_check(dst);
}
inline System_State_actuator_my_int_range_check(System_State_actuator_my_int_vc)
{
    assert(((System_State_actuator_my_int_vc >= 0) && (System_State_actuator_my_int_vc <= 10000)));
}
inline System_State_actuator_my_struct_mass_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_struct_mass_range_check(dst);
}
inline System_State_actuator_my_struct_mass_range_check(System_State_actuator_my_struct_mass_vc)
{
    assert(((System_State_actuator_my_struct_mass_vc >= 0) && (System_State_actuator_my_struct_mass_vc <= 10000)));
}
inline System_State_actuator_my_struct_charge_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_struct_charge_range_check(dst);
}
inline System_State_actuator_my_struct_charge_range_check(System_State_actuator_my_struct_charge_vc)
{
    assert(((System_State_actuator_my_struct_charge_vc >= 0) && (System_State_actuator_my_struct_charge_vc <= 10000)));
}
inline System_State_actuator_my_struct_assign_value(dst, src)
{
    System_State_actuator_my_struct_mass_assign_value(dst.mass, src.mass);
    System_State_actuator_my_struct_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_actuator_my_enum_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_enum_range_check(dst);
}
inline System_State_actuator_my_enum_range_check(System_State_actuator_my_enum_vc)
{
    assert(((System_State_actuator_my_enum_vc == System_State_actuator_my_enum_speed) || (System_State_actuator_my_enum_vc == System_State_actuator_my_enum_accel)));
}
inline System_State_actuator_my_fixed_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_fixed_elem_range_check(dst);
}
inline System_State_actuator_my_fixed_elem_range_check(System_State_actuator_my_fixed_elem_vc)
{
    assert(((System_State_actuator_my_fixed_elem_vc >= 0) && (System_State_actuator_my_fixed_elem_vc <= 10000)));
}
inline System_State_actuator_my_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_my_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_my_derived_fixed_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_my_derived_fixed_elem_range_check(dst);
}
inline System_State_actuator_my_derived_fixed_elem_range_check(System_State_actuator_my_derived_fixed_elem_vc)
{
    assert(((System_State_actuator_my_derived_fixed_elem_vc >= 0) && (System_State_actuator_my_derived_fixed_elem_vc <= 10000)));
}
inline System_State_actuator_my_derived_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_actuator_my_derived_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_actuator_assign_value(dst, src)
{
    System_State_actuator_state_assign_value(dst.state, src.state);
    System_State_actuator_init_done_assign_value(dst.init_done, src.init_done);
    System_State_actuator_my_union_assign_value(dst.my_union, src.my_union);
    System_State_actuator_my_union_det_assign_value(dst.my_union_det, src.my_union_det);
    System_State_actuator_my_bool_assign_value(dst.my_bool, src.my_bool);
    System_State_actuator_my_array_assign_value(dst.my_array, src.my_array);
    System_State_actuator_my_derived_array_assign_value(dst.my_derived_array, src.my_derived_array);
    System_State_actuator_my_int_assign_value(dst.my_int, src.my_int);
    System_State_actuator_my_struct_assign_value(dst.my_struct, src.my_struct);
    System_State_actuator_my_enum_assign_value(dst.my_enum, src.my_enum);
    System_State_actuator_my_fixed_assign_value(dst.my_fixed, src.my_fixed);
    System_State_actuator_my_derived_fixed_assign_value(dst.my_derived_fixed, src.my_derived_fixed);
}
inline System_State_controller_state_assign_value(dst, src)
{
    dst = src;
    System_State_controller_state_range_check(dst);
}
inline System_State_controller_state_range_check(System_State_controller_state_vc)
{
    assert((((((((((((((((((((System_State_controller_state_vc == System_State_controller_state_checklengthb) || (System_State_controller_state_vc == System_State_controller_state_checkvalb)) || (System_State_controller_state_vc == System_State_controller_state_checkpresentb)) || (System_State_controller_state_vc == System_State_controller_state_checklengthderivedarray)) || (System_State_controller_state_vc == System_State_controller_state_checklengthderivedfixed)) || (System_State_controller_state_vc == System_State_controller_state_checktoenuma)) || (System_State_controller_state_vc == System_State_controller_state_reached)) || (System_State_controller_state_vc == System_State_controller_state_checktoselectora)) || (System_State_controller_state_vc == System_State_controller_state_checkpresenta)) || (System_State_controller_state_vc == System_State_controller_state_checktoselectorb)) || (System_State_controller_state_vc == System_State_controller_state_checkexistb)) || (System_State_controller_state_vc == System_State_controller_state_error)) || (System_State_controller_state_vc == System_State_controller_state_checkvala)) || (System_State_controller_state_vc == System_State_controller_state_checklengthfixed)) || (System_State_controller_state_vc == System_State_controller_state_checknumb)) || (System_State_controller_state_vc == System_State_controller_state_checklengtha)) || (System_State_controller_state_vc == System_State_controller_state_checktoenumb)) || (System_State_controller_state_vc == System_State_controller_state_checknuma)) || (System_State_controller_state_vc == System_State_controller_state_checkexista)));
}
inline System_State_controller_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_controller_init_done_range_check(dst);
}
inline System_State_controller_init_done_range_check(System_State_controller_init_done_vc)
{
    assert(true);
}
inline System_State_controller_error_assign_value(dst, src)
{
    dst = src;
    System_State_controller_error_range_check(dst);
}
inline System_State_controller_error_range_check(System_State_controller_error_vc)
{
    assert(((System_State_controller_error_vc >= 0) && (System_State_controller_error_vc <= 10000)));
}
inline System_State_controller_reached_assign_value(dst, src)
{
    dst = src;
    System_State_controller_reached_range_check(dst);
}
inline System_State_controller_reached_range_check(System_State_controller_reached_vc)
{
    assert(((System_State_controller_reached_vc >= 0) && (System_State_controller_reached_vc <= 10000)));
}
inline System_State_controller_my_union_speed_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_union_speed_range_check(dst);
}
inline System_State_controller_my_union_speed_range_check(System_State_controller_my_union_speed_vc)
{
    assert(((System_State_controller_my_union_speed_vc >= 0) && (System_State_controller_my_union_speed_vc <= 10000)));
}
inline System_State_controller_my_union_accel_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_union_accel_range_check(dst);
}
inline System_State_controller_my_union_accel_range_check(System_State_controller_my_union_accel_vc)
{
    assert(((System_State_controller_my_union_accel_vc >= 0) && (System_State_controller_my_union_accel_vc <= 10000)));
}
inline System_State_controller_my_union_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_my_union_speed_PRESENT);
        System_State_controller_my_union_speed_assign_value(dst.data.speed, src.data.speed);
    ::  (dst.selection == System_State_controller_my_union_accel_PRESENT);
        System_State_controller_my_union_accel_assign_value(dst.data.accel, src.data.accel);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_my_union_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_my_bool_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_bool_range_check(dst);
}
inline System_State_controller_my_bool_range_check(System_State_controller_my_bool_vc)
{
    assert(true);
}
inline System_State_controller_my_arr_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_arr_elem_range_check(dst);
}
inline System_State_controller_my_arr_elem_range_check(System_State_controller_my_arr_elem_vc)
{
    assert(((System_State_controller_my_arr_elem_vc >= 0) && (System_State_controller_my_arr_elem_vc <= 10000)));
}
inline System_State_controller_my_arr_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 5)
    {
        System_State_controller_my_arr_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_my_arr_size_check(System_State_controller_my_arr_sc)
{
    assert(((System_State_controller_my_arr_sc >= 1) && (System_State_controller_my_arr_sc <= 6)));
}
inline System_State_controller_my_int_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_int_range_check(dst);
}
inline System_State_controller_my_int_range_check(System_State_controller_my_int_vc)
{
    assert(((System_State_controller_my_int_vc >= 0) && (System_State_controller_my_int_vc <= 10000)));
}
inline System_State_controller_my_struct_mass_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_struct_mass_range_check(dst);
}
inline System_State_controller_my_struct_mass_range_check(System_State_controller_my_struct_mass_vc)
{
    assert(((System_State_controller_my_struct_mass_vc >= 0) && (System_State_controller_my_struct_mass_vc <= 10000)));
}
inline System_State_controller_my_struct_charge_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_struct_charge_range_check(dst);
}
inline System_State_controller_my_struct_charge_range_check(System_State_controller_my_struct_charge_vc)
{
    assert(((System_State_controller_my_struct_charge_vc >= 0) && (System_State_controller_my_struct_charge_vc <= 10000)));
}
inline System_State_controller_my_struct_assign_value(dst, src)
{
    System_State_controller_my_struct_mass_assign_value(dst.mass, src.mass);
    System_State_controller_my_struct_charge_assign_value(dst.charge, src.charge);
    dst.exist.charge = src.exist.charge;
}
inline System_State_controller_my_enum_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_enum_range_check(dst);
}
inline System_State_controller_my_enum_range_check(System_State_controller_my_enum_vc)
{
    assert(((System_State_controller_my_enum_vc == System_State_controller_my_enum_speed) || (System_State_controller_my_enum_vc == System_State_controller_my_enum_accel)));
}
inline System_State_controller_my_fixed_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_fixed_elem_range_check(dst);
}
inline System_State_controller_my_fixed_elem_range_check(System_State_controller_my_fixed_elem_vc)
{
    assert(((System_State_controller_my_fixed_elem_vc >= 0) && (System_State_controller_my_fixed_elem_vc <= 10000)));
}
inline System_State_controller_my_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_my_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_my_derived_array_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_derived_array_elem_range_check(dst);
}
inline System_State_controller_my_derived_array_elem_range_check(System_State_controller_my_derived_array_elem_vc)
{
    assert(((System_State_controller_my_derived_array_elem_vc >= 0) && (System_State_controller_my_derived_array_elem_vc <= 10000)));
}
inline System_State_controller_my_derived_array_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 2)
    {
        System_State_controller_my_derived_array_elem_assign_value(dst.data[i], src.data[i]);
    }
    dst.length = src.length;
}
inline System_State_controller_my_derived_array_size_check(System_State_controller_my_derived_array_sc)
{
    assert(((System_State_controller_my_derived_array_sc >= 1) && (System_State_controller_my_derived_array_sc <= 3)));
}
inline System_State_controller_my_derived_fixed_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_my_derived_fixed_elem_range_check(dst);
}
inline System_State_controller_my_derived_fixed_elem_range_check(System_State_controller_my_derived_fixed_elem_vc)
{
    assert(((System_State_controller_my_derived_fixed_elem_vc >= 0) && (System_State_controller_my_derived_fixed_elem_vc <= 10000)));
}
inline System_State_controller_my_derived_fixed_assign_value(dst, src)
{
    int i;
    for(i : 0 .. 1)
    {
        System_State_controller_my_derived_fixed_elem_assign_value(dst.data[i], src.data[i]);
    }
}
inline System_State_controller_assign_value(dst, src)
{
    System_State_controller_state_assign_value(dst.state, src.state);
    System_State_controller_init_done_assign_value(dst.init_done, src.init_done);
    System_State_controller_error_assign_value(dst.error, src.error);
    System_State_controller_reached_assign_value(dst.reached, src.reached);
    System_State_controller_my_union_assign_value(dst.my_union, src.my_union);
    System_State_controller_my_bool_assign_value(dst.my_bool, src.my_bool);
    System_State_controller_my_arr_assign_value(dst.my_arr, src.my_arr);
    System_State_controller_my_int_assign_value(dst.my_int, src.my_int);
    System_State_controller_my_struct_assign_value(dst.my_struct, src.my_struct);
    System_State_controller_my_enum_assign_value(dst.my_enum, src.my_enum);
    System_State_controller_my_fixed_assign_value(dst.my_fixed, src.my_fixed);
    System_State_controller_my_derived_array_assign_value(dst.my_derived_array, src.my_derived_array);
    System_State_controller_my_derived_fixed_assign_value(dst.my_derived_fixed, src.my_derived_fixed);
}
inline System_State_assign_value(dst, src)
{
    System_State_actuator_queue_assign_value(dst.actuator_queue, src.actuator_queue);
    System_State_controller_queue_assign_value(dst.controller_queue, src.controller_queue);
    System_State_actuator_assign_value(dst.actuator, src.actuator);
    System_State_controller_assign_value(dst.controller, src.controller);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
