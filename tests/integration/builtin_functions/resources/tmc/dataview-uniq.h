#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccMyInteger;


#define ERR_MYINTEGER		1  /*(0 .. 10000)*/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount;
    asn1SccMyInteger arr[6];
} asn1SccMyArray;

#define ERR_MYARRAY		21  /*(SIZE(1..6))*/
#define ERR_MYARRAY_ELM_2		16  /**/
flag asn1SccMyArray_IsConstraintValid(const asn1SccMyArray* pVal, int* pErrCode);

void asn1SccMyArray_Initialize(asn1SccMyArray* pVal);

#define ERR_UPER_ENCODE_MYARRAY		22  /**/
#define ERR_UPER_ENCODE_MYARRAY_ELM_2		17  /**/
#define asn1SccMyArray_REQUIRED_BYTES_FOR_ENCODING       11
#define asn1SccMyArray_REQUIRED_BITS_FOR_ENCODING        87

flag asn1SccMyArray_Encode(const asn1SccMyArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYARRAY		23  /**/
#define ERR_UPER_DECODE_MYARRAY_ELM_2		18  /**/
flag asn1SccMyArray_Decode(asn1SccMyArray* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccMyArray asn1SccMyDerivedArray;

#define ERR_MYDERIVEDARRAY_2		41  /*(SIZE(1..3))*/
flag asn1SccMyDerivedArray_IsConstraintValid(const asn1SccMyDerivedArray* pVal, int* pErrCode);

void asn1SccMyDerivedArray_Initialize(asn1SccMyDerivedArray* pVal);

#define ERR_UPER_ENCODE_MYDERIVEDARRAY		37  /**/
#define ERR_UPER_ENCODE_MYDERIVEDARRAY_ELM_2		32  /**/
#define asn1SccMyDerivedArray_REQUIRED_BYTES_FOR_ENCODING       6
#define asn1SccMyDerivedArray_REQUIRED_BITS_FOR_ENCODING        44

flag asn1SccMyDerivedArray_Encode(const asn1SccMyDerivedArray* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYDERIVEDARRAY		38  /**/
#define ERR_UPER_DECODE_MYDERIVEDARRAY_ELM_2		33  /**/
flag asn1SccMyDerivedArray_Decode(asn1SccMyDerivedArray* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMyUnion --------------------------------------------*/

typedef enum {
    MyUnion_NONE,
    MyUnion_speed_PRESENT,
    MyUnion_accel_PRESENT
} asn1SccMyUnion_selection;

typedef union {
    asn1SccMyInteger speed;
    asn1SccMyInteger accel;
} asn1SccMyUnion_unchecked_union;

typedef struct {
    asn1SccMyUnion_selection kind;

    asn1SccMyUnion_unchecked_union u;
} asn1SccMyUnion;

#define ERR_MYUNION		62  /**/
#define ERR_MYUNION_SPEED_2		47  /**/
#define ERR_MYUNION_ACCEL_2		57  /**/
flag asn1SccMyUnion_IsConstraintValid(const asn1SccMyUnion* pVal, int* pErrCode);

void asn1SccMyUnion_Initialize(asn1SccMyUnion* pVal);

#define ERR_UPER_ENCODE_MYUNION		63  /**/
#define ERR_UPER_ENCODE_MYUNION_SPEED_2		48  /**/
#define ERR_UPER_ENCODE_MYUNION_ACCEL_2		58  /**/
#define asn1SccMyUnion_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccMyUnion_REQUIRED_BITS_FOR_ENCODING        15

flag asn1SccMyUnion_Encode(const asn1SccMyUnion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYUNION		64  /**/
#define ERR_UPER_DECODE_MYUNION_SPEED_2		49  /**/
#define ERR_UPER_DECODE_MYUNION_ACCEL_2		59  /**/
flag asn1SccMyUnion_Decode(asn1SccMyUnion* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMyStruct --------------------------------------------*/
typedef struct {
    unsigned long charge:1;
} asn1SccMyStruct_exist;
typedef struct {
    asn1SccMyInteger mass;
    asn1SccMyInteger charge;

    asn1SccMyStruct_exist exist;

} asn1SccMyStruct;

#define ERR_MYSTRUCT		92  /**/
#define ERR_MYSTRUCT_MASS_2		77  /**/
#define ERR_MYSTRUCT_CHARGE_2		87  /**/
flag asn1SccMyStruct_IsConstraintValid(const asn1SccMyStruct* pVal, int* pErrCode);

void asn1SccMyStruct_Initialize(asn1SccMyStruct* pVal);

#define ERR_UPER_ENCODE_MYSTRUCT		93  /**/
#define ERR_UPER_ENCODE_MYSTRUCT_MASS_2		78  /**/
#define ERR_UPER_ENCODE_MYSTRUCT_CHARGE_2		88  /**/
#define asn1SccMyStruct_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccMyStruct_REQUIRED_BITS_FOR_ENCODING        29

flag asn1SccMyStruct_Encode(const asn1SccMyStruct* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSTRUCT		94  /**/
#define ERR_UPER_DECODE_MYSTRUCT_MASS_2		79  /**/
#define ERR_UPER_DECODE_MYSTRUCT_CHARGE_2		89  /**/
flag asn1SccMyStruct_Decode(asn1SccMyStruct* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    asn1SccMyInteger arr[2];
} asn1SccMyFixed;

#define ERR_MYFIXED		107  /*(SIZE(2))*/
#define ERR_MYFIXED_ELM_2		102  /**/
flag asn1SccMyFixed_IsConstraintValid(const asn1SccMyFixed* pVal, int* pErrCode);

void asn1SccMyFixed_Initialize(asn1SccMyFixed* pVal);

#define ERR_UPER_ENCODE_MYFIXED		108  /**/
#define ERR_UPER_ENCODE_MYFIXED_ELM_2		103  /**/
#define asn1SccMyFixed_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccMyFixed_REQUIRED_BITS_FOR_ENCODING        28

flag asn1SccMyFixed_Encode(const asn1SccMyFixed* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYFIXED		109  /**/
#define ERR_UPER_DECODE_MYFIXED_ELM_2		104  /**/
flag asn1SccMyFixed_Decode(asn1SccMyFixed* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccMyFixed asn1SccMyDerivedFixed;

#define ERR_MYDERIVEDFIXED_2		127  /**/
flag asn1SccMyDerivedFixed_IsConstraintValid(const asn1SccMyDerivedFixed* pVal, int* pErrCode);

void asn1SccMyDerivedFixed_Initialize(asn1SccMyDerivedFixed* pVal);

#define ERR_UPER_ENCODE_MYDERIVEDFIXED_2		128  /**/
#define asn1SccMyDerivedFixed_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccMyDerivedFixed_REQUIRED_BITS_FOR_ENCODING        28

flag asn1SccMyDerivedFixed_Encode(const asn1SccMyDerivedFixed* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYDERIVEDFIXED_2		129  /**/
flag asn1SccMyDerivedFixed_Decode(asn1SccMyDerivedFixed* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccMyBoolean;


#define ERR_MYBOOLEAN		6  /**/
flag asn1SccMyBoolean_IsConstraintValid(const asn1SccMyBoolean* pVal, int* pErrCode);

void asn1SccMyBoolean_Initialize(asn1SccMyBoolean* pVal);

#define ERR_UPER_ENCODE_MYBOOLEAN		7  /**/
#define asn1SccMyBoolean_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccMyBoolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccMyBoolean_Encode(const asn1SccMyBoolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYBOOLEAN		8  /**/
flag asn1SccMyBoolean_Decode(asn1SccMyBoolean* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    MyEnum_speed = 0,
    MyEnum_accel = 1
} asn1SccMyEnum;

// please use the following macros to avoid breaking code.
#define asn1SccMyEnum_speed MyEnum_speed
#define asn1SccMyEnum_accel MyEnum_accel

#define ERR_MYENUM		67  /*speed | accel*/
flag asn1SccMyEnum_IsConstraintValid(const asn1SccMyEnum* pVal, int* pErrCode);

void asn1SccMyEnum_Initialize(asn1SccMyEnum* pVal);

#define ERR_UPER_ENCODE_MYENUM		68  /**/
#define asn1SccMyEnum_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccMyEnum_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccMyEnum_Encode(const asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYENUM		69  /**/
flag asn1SccMyEnum_Decode(asn1SccMyEnum* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


#define ERR_T_INT32		132  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		133  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		134  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


#define ERR_T_UINT32		137  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		138  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		139  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Runtime_Error --------------------------------------------*/

typedef enum {
    T_Runtime_Error_NONE,
    T_Runtime_Error_noerror_PRESENT,
    T_Runtime_Error_encodeerror_PRESENT,
    T_Runtime_Error_decodeerror_PRESENT
} asn1SccT_Runtime_Error_selection;

typedef union {
    asn1SccT_UInt32 noerror;
    asn1SccT_Int32 encodeerror;
    asn1SccT_Int32 decodeerror;
} asn1SccT_Runtime_Error_unchecked_union;

typedef struct {
    asn1SccT_Runtime_Error_selection kind;

    asn1SccT_Runtime_Error_unchecked_union u;
} asn1SccT_Runtime_Error;

#define ERR_T_RUNTIME_ERROR		192  /**/
#define ERR_T_RUNTIME_ERROR_NOERROR_2		167  /**/
#define ERR_T_RUNTIME_ERROR_ENCODEERROR_2		177  /**/
#define ERR_T_RUNTIME_ERROR_DECODEERROR_2		187  /**/
flag asn1SccT_Runtime_Error_IsConstraintValid(const asn1SccT_Runtime_Error* pVal, int* pErrCode);

void asn1SccT_Runtime_Error_Initialize(asn1SccT_Runtime_Error* pVal);

#define ERR_UPER_ENCODE_T_RUNTIME_ERROR		193  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_NOERROR_2		168  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		178  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		188  /**/
#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ENCODING        34

flag asn1SccT_Runtime_Error_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_RUNTIME_ERROR		194  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_NOERROR_2		169  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		179  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		189  /**/
flag asn1SccT_Runtime_Error_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


#define ERR_T_INT8		142  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		143  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		144  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


#define ERR_T_UINT8		147  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		148  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		149  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


#define ERR_T_BOOLEAN		152  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		153  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		154  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

#define ERR_T_NULL_RECORD		157  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


#define ERR_PID_RANGE		197  /*(0..4)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		198  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		199  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_taste_user_interface = 0,
    PID_timer_manager = 1,
    PID_actuator = 2,
    PID_controller = 3,
    PID_env = 4
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_taste_user_interface PID_taste_user_interface
#define asn1SccPID_timer_manager PID_timer_manager
#define asn1SccPID_actuator PID_actuator
#define asn1SccPID_controller PID_controller
#define asn1SccPID_env PID_env

#define ERR_PID		202  /*taste-user-interface | timer-manager | actuator | controller | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		203  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		204  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
