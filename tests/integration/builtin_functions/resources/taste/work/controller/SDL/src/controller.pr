/* CIF PROCESS (250, 150), (150, 75) */
process Controller;
    /* CIF TEXT (331, 250), (267, 203) */
    -- Text area for declarations and comments
    
    dcl error MyInteger := 0;
    dcl reached MyInteger := 0;
    dcl my_union MyUnion;
    dcl my_bool MyBoolean;
    dcl my_arr MyArray;
    dcl my_int MyInteger;
    dcl my_struct MyStruct;
    dcl my_enum MyEnum;
    dcl my_fixed MyFixed;
    dcl my_derived_array MyDerivedArray;
    dcl my_derived_fixed MyDerivedFixed;
    /* CIF ENDTEXT */
    /* CIF START (656, 46), (70, 35) */
    START;
        /* CIF task (616, 101), (148, 35) */
        task my_union := speed : 0;
        /* CIF output (609, 156), (163, 35) */
        output test_present(my_union);
        /* CIF NEXTSTATE (634, 206), (113, 35) */
        NEXTSTATE CheckPresentA;
    /* CIF state (1885, 1565), (178, 35) */
    state CheckLengthDerivedArray;
        /* CIF input (1911, 1620), (127, 35) */
        input result_int(my_int);
            /* CIF decision (1940, 1675), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1895, 1745), (70, 23) */
                (2):
                    /* CIF task (1843, 1788), (173, 35) */
                    task my_derived_fixed := {1, 2};
                    /* CIF output (1784, 1843), (290, 35) */
                    output test_length_derived_fixed(my_derived_fixed);
                    /* CIF NEXTSTATE (1841, 1898), (177, 35) */
                    NEXTSTATE CheckLengthDerivedFixed;
                /* CIF ANSWER (2089, 1745), (70, 23) */
                else:
                    /* CIF task (2086, 1788), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (2089, 1843), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (2290, 1570), (177, 35) */
    state CheckLengthDerivedFixed;
        /* CIF input (2315, 1625), (127, 35) */
        input result_int(my_int);
            /* CIF decision (2344, 1680), (70, 50) */
            decision my_int;
                /* CIF ANSWER (2299, 1750), (70, 23) */
                (2):
                    /* CIF task (2286, 1793), (94, 35) */
                    task reached := 1;
                    /* CIF NEXTSTATE (2297, 1848), (73, 35) */
                    NEXTSTATE Reached;
                /* CIF ANSWER (2389, 1750), (70, 23) */
                else:
                    /* CIF task (2385, 1793), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (2389, 1848), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1503, 1546), (131, 35) */
    state CheckLengthFixed;
        /* CIF input (1505, 1601), (127, 35) */
        input result_int(my_int);
            /* CIF decision (1534, 1656), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1490, 1726), (70, 23) */
                (2):
                    /* CIF task (1438, 1769), (173, 35) */
                    task my_derived_array := {1, 2};
                    /* CIF output (1397, 1824), (254, 35) */
                    output test_derived_length(my_derived_array);
                    /* CIF NEXTSTATE (1435, 1874), (178, 35) */
                    NEXTSTATE CheckLengthDerivedArray;
                /* CIF ANSWER (1666, 1726), (70, 23) */
                else:
                    /* CIF task (1663, 1769), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1666, 1824), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (731, 1604), (85, 35) */
    state CheckValA;
        /* CIF input (692, 1659), (162, 35) */
        input result_enum(my_enum);
            /* CIF decision (733, 1714), (80, 50) */
            decision my_enum;
                /* CIF ANSWER (696, 1784), (70, 23) */
                (speed):
                    /* CIF task (687, 1827), (86, 35) */
                    task my_int := 1;
                    /* CIF output (672, 1882), (117, 35) */
                    output test_val(my_int);
                    /* CIF NEXTSTATE (688, 1937), (85, 35) */
                    NEXTSTATE CheckValB;
                /* CIF ANSWER (798, 1784), (70, 23) */
                else:
                    /* CIF task (794, 1827), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (798, 1882), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1969, 1164), (94, 35) */
    state CheckNumB;
        /* CIF input (1953, 1219), (127, 35) */
        input result_int(my_int);
            /* CIF decision (1982, 1274), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1939, 1344), (70, 23) */
                (1):
                    /* CIF task (1930, 1387), (86, 35) */
                    task my_int := 0;
                    /* CIF output (1915, 1442), (117, 35) */
                    output test_val(my_int);
                    /* CIF NEXTSTATE (1931, 1497), (85, 35) */
                    NEXTSTATE CheckValA;
                /* CIF ANSWER (2043, 1344), (70, 23) */
                else:
                    /* CIF task (2039, 1387), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (2043, 1437), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1510, 1146), (95, 35) */
    state CheckNumA;
        /* CIF input (1494, 1201), (127, 35) */
        input result_int(my_int);
            /* CIF decision (1523, 1256), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1467, 1326), (70, 23) */
                (0):
                    /* CIF task (1438, 1369), (126, 35) */
                    task my_enum := accel;
                    /* CIF output (1429, 1424), (144, 35) */
                    output test_num(my_enum);
                    /* CIF NEXTSTATE (1454, 1479), (94, 35) */
                    NEXTSTATE CheckNumB;
                /* CIF ANSWER (1589, 1326), (70, 23) */
                else:
                    /* CIF task (1585, 1369), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1589, 1424), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1170, 1120), (129, 28) */
    state CheckToSelectorB;
        /* CIF input (1176, 1168), (116, 35) */
        input result(my_bool);
            /* CIF decision (1198, 1223), (73, 50) */
            decision my_bool;
                /* CIF ANSWER (1158, 1293), (70, 23) */
                (false):
                    /* CIF task (1126, 1336), (132, 35) */
                    task my_enum := speed;
                    /* CIF output (1120, 1391), (144, 35) */
                    output test_num(my_enum);
                    /* CIF NEXTSTATE (1145, 1446), (95, 35) */
                    NEXTSTATE CheckNumA;
                /* CIF ANSWER (1273, 1293), (70, 23) */
                (true):
                    /* CIF task (1269, 1336), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1273, 1391), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1560, 718), (114, 35) */
    state CheckToEnumA;
        /* CIF input (1536, 773), (162, 35) */
        input result_enum(my_enum);
            /* CIF decision (1577, 828), (80, 50) */
            decision my_enum;
                /* CIF ANSWER (1542, 898), (70, 23) */
                (speed):
                    /* CIF task (1505, 941), (142, 35) */
                    task my_union := accel : 2;
                    /* CIF output (1491, 996), (170, 35) */
                    output test_to_enum(my_union);
                    /* CIF NEXTSTATE (1519, 1046), (114, 35) */
                    NEXTSTATE CheckToEnumB;
                /* CIF ANSWER (1673, 898), (70, 23) */
                else:
                    /* CIF task (1669, 941), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1673, 996), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1248, 697), (95, 35) */
    state CheckExistB;
        /* CIF input (1237, 752), (116, 35) */
        input result(my_bool);
            /* CIF decision (1259, 807), (73, 50) */
            decision my_bool;
                /* CIF ANSWER (1221, 877), (70, 23) */
                (false):
                    /* CIF task (1181, 920), (148, 35) */
                    task my_union := speed : 3;
                    /* CIF output (1170, 975), (170, 35) */
                    output test_to_enum(my_union);
                    /* CIF NEXTSTATE (1198, 1030), (114, 35) */
                    NEXTSTATE CheckToEnumA;
                /* CIF ANSWER (1355, 877), (70, 23) */
                (true):
                    /* CIF task (1351, 920), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1355, 975), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1609, 279), (108, 35) */
    state CheckLengthA;
        /* CIF input (1600, 334), (127, 35) */
        input result_int(my_int);
            /* CIF decision (1629, 389), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1590, 459), (70, 23) */
                (1):
                    /* CIF task (1562, 502), (126, 35) */
                    task my_arr := {1, 2, 3};
                    /* CIF output (1551, 557), (148, 35) */
                    output test_length(my_arr);
                    /* CIF NEXTSTATE (1570, 612), (108, 35) */
                    NEXTSTATE CheckLengthB;
                /* CIF ANSWER (1713, 459), (70, 23) */
                else:
                    /* CIF task (1709, 502), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1713, 557), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1247, 264), (112, 35) */
    state CheckPresentB;
        /* CIF input (1245, 319), (116, 35) */
        input result(my_bool);
            /* CIF decision (1267, 374), (73, 50) */
            decision my_bool;
                /* CIF ANSWER (1231, 444), (70, 23) */
                (true):
                    /* CIF task (1215, 487), (102, 35) */
                    task my_arr := {2 };
                    /* CIF output (1195, 542), (140, 35) */
                    output test_length(my_arr);
                    /* CIF NEXTSTATE (1211, 597), (108, 35) */
                    NEXTSTATE CheckLengthA;
                /* CIF ANSWER (1350, 444), (70, 23) */
                (false):
                    /* CIF task (1346, 487), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1350, 542), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (880, 58), (70, 35) */
    state Error;
    endstate;
    /* CIF state (1203, 62), (73, 35) */
    state Reached;
    endstate;
    /* CIF state (822, 238), (113, 35) */
    state CheckPresentA;
        /* CIF input (820, 293), (116, 35) */
        input result(my_bool);
            /* CIF decision (833, 348), (91, 50) */
            decision my_bool;
                /* CIF ANSWER (806, 418), (70, 23) */
                (false):
                    /* CIF task (769, 461), (142, 35) */
                    task my_union := accel : 2;
                    /* CIF output (756, 516), (170, 35) */
                    output test_present(my_union);
                    /* CIF NEXTSTATE (784, 571), (112, 35) */
                    NEXTSTATE CheckPresentB;
                /* CIF ANSWER (940, 418), (70, 23) */
                (true):
                    /* CIF task (936, 461), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (940, 516), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (2009, 233), (108, 35) */
    state CheckLengthB;
        /* CIF input (2000, 288), (127, 35) */
        input result_int(my_int);
            /* CIF decision (2029, 343), (70, 50) */
            decision my_int;
                /* CIF ANSWER (1990, 413), (70, 23) */
                (3):
                    /* CIF task (1923, 456), (203, 35) */
                    task my_struct := {mass 1, charge 1};
                    /* CIF output (1951, 511), (147, 35) */
                    output test_exist(my_struct);
                    /* CIF NEXTSTATE (1977, 561), (95, 35) */
                    NEXTSTATE CheckExistA;
                /* CIF ANSWER (2140, 413), (70, 23) */
                else:
                    /* CIF task (2136, 456), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (2140, 511), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (791, 694), (95, 35) */
    state CheckExistA;
        /* CIF input (780, 749), (116, 35) */
        input result(my_bool);
            /* CIF decision (802, 804), (73, 50) */
            decision my_bool;
                /* CIF ANSWER (764, 874), (70, 23) */
                (true):
                    /* CIF task (725, 917), (146, 35) */
                    task my_struct := {mass 2};
                    /* CIF output (725, 972), (147, 35) */
                    output test_exist(my_struct);
                    /* CIF NEXTSTATE (751, 1027), (95, 35) */
                    NEXTSTATE CheckExistB;
                /* CIF ANSWER (883, 874), (70, 23) */
                (false):
                    /* CIF task (879, 917), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (883, 972), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (736, 1141), (130, 35) */
    state CheckToSelectorA;
        /* CIF input (743, 1196), (116, 35) */
        input result(my_bool);
            /* CIF decision (765, 1251), (73, 50) */
            decision my_bool;
                /* CIF ANSWER (725, 1321), (70, 23) */
                (true):
                    /* CIF task (696, 1364), (126, 35) */
                    task my_enum := accel;
                    /* CIF output (667, 1419), (184, 35) */
                    output test_to_selector(my_enum);
                    /* CIF NEXTSTATE (695, 1474), (129, 35) */
                    NEXTSTATE CheckToSelectorB;
                /* CIF ANSWER (863, 1321), (70, 23) */
                (false):
                    /* CIF task (859, 1364), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (863, 1419), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1962, 719), (114, 35) */
    state CheckToEnumB;
        /* CIF input (1938, 774), (162, 35) */
        input result_enum(my_enum);
            /* CIF decision (1979, 829), (80, 50) */
            decision my_enum;
                /* CIF ANSWER (1944, 899), (70, 23) */
                (accel):
                    /* CIF task (1905, 942), (148, 35) */
                    task my_enum := speed;
                    /* CIF output (1886, 997), (184, 35) */
                    output test_to_selector(my_enum);
                    /* CIF NEXTSTATE (1913, 1052), (130, 35) */
                    NEXTSTATE CheckToSelectorA;
                /* CIF ANSWER (2085, 899), (70, 23) */
                else:
                    /* CIF task (2081, 942), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (2085, 997), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
    /* CIF state (1126, 1536), (85, 35) */
    state CheckValB;
        /* CIF input (1087, 1591), (162, 35) */
        input result_enum(my_enum);
            /* CIF decision (1126, 1646), (86, 50) */
            decision my_enum;
                /* CIF ANSWER (1091, 1716), (70, 23) */
                (accel):
                    /* CIF task (1063, 1759), (125, 35) */
                    task my_fixed := {1, 2};
                    /* CIF output (1031, 1814), (189, 35) */
                    output test_length_fixed(my_fixed);
                    /* CIF NEXTSTATE (1060, 1864), (131, 35) */
                    NEXTSTATE CheckLengthFixed;
                /* CIF ANSWER (1206, 1716), (70, 23) */
                else:
                    /* CIF task (1202, 1759), (76, 35) */
                    task error := 1;
                    /* CIF NEXTSTATE (1206, 1814), (70, 35) */
                    NEXTSTATE Error;
            enddecision;
    endstate;
endprocess Controller;