#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccMyInteger;


#define ERR_MYINTEGER		1  /*(-1024..1024)*/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        12

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccRelationTestParam --------------------------------------------*/
typedef enum {
    RelationTestParam_oper_o_equal = 0,
    RelationTestParam_oper_o_nequal = 1,
    RelationTestParam_oper_o_less = 2,
    RelationTestParam_oper_o_lessequal = 3,
    RelationTestParam_oper_o_greater = 4,
    RelationTestParam_oper_o_greaterequal = 5
} asn1SccRelationTestParam_oper;

// please use the following macros to avoid breaking code.
#define asn1SccRelationTestParam_oper_o_equal RelationTestParam_oper_o_equal
#define asn1SccRelationTestParam_oper_o_nequal RelationTestParam_oper_o_nequal
#define asn1SccRelationTestParam_oper_o_less RelationTestParam_oper_o_less
#define asn1SccRelationTestParam_oper_o_lessequal RelationTestParam_oper_o_lessequal
#define asn1SccRelationTestParam_oper_o_greater RelationTestParam_oper_o_greater
#define asn1SccRelationTestParam_oper_o_greaterequal RelationTestParam_oper_o_greaterequal
typedef struct {
    asn1SccRelationTestParam_oper oper;
    asn1SccMyInteger left;
    asn1SccMyInteger right;

} asn1SccRelationTestParam;

#define ERR_RELATIONTESTPARAM_OPER		11  /*o-equal | o-nequal | o-less | o-lessequal | o-greater | o-greaterequal*/
flag asn1SccRelationTestParam_oper_IsConstraintValid(const asn1SccRelationTestParam_oper* pVal, int* pErrCode);

#define ERR_RELATIONTESTPARAM		36  /**/
#define ERR_RELATIONTESTPARAM_LEFT_2		21  /**/
#define ERR_RELATIONTESTPARAM_RIGHT_2		31  /**/
flag asn1SccRelationTestParam_IsConstraintValid(const asn1SccRelationTestParam* pVal, int* pErrCode);

void asn1SccRelationTestParam_oper_Initialize(asn1SccRelationTestParam_oper* pVal);
void asn1SccRelationTestParam_Initialize(asn1SccRelationTestParam* pVal);

#define ERR_UPER_ENCODE_RELATIONTESTPARAM		37  /**/
#define ERR_UPER_ENCODE_RELATIONTESTPARAM_OPER		12  /**/
#define ERR_UPER_ENCODE_RELATIONTESTPARAM_LEFT_2		22  /**/
#define ERR_UPER_ENCODE_RELATIONTESTPARAM_RIGHT_2		32  /**/
#define asn1SccRelationTestParam_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccRelationTestParam_REQUIRED_BITS_FOR_ENCODING        27

flag asn1SccRelationTestParam_Encode(const asn1SccRelationTestParam* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_RELATIONTESTPARAM		38  /**/
#define ERR_UPER_DECODE_RELATIONTESTPARAM_OPER		13  /**/
#define ERR_UPER_DECODE_RELATIONTESTPARAM_LEFT_2		23  /**/
#define ERR_UPER_DECODE_RELATIONTESTPARAM_RIGHT_2		33  /**/
flag asn1SccRelationTestParam_Decode(asn1SccRelationTestParam* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccMyBooleanResult;


#define ERR_MYBOOLEANRESULT		6  /**/
flag asn1SccMyBooleanResult_IsConstraintValid(const asn1SccMyBooleanResult* pVal, int* pErrCode);

void asn1SccMyBooleanResult_Initialize(asn1SccMyBooleanResult* pVal);

#define ERR_UPER_ENCODE_MYBOOLEANRESULT		7  /**/
#define asn1SccMyBooleanResult_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccMyBooleanResult_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccMyBooleanResult_Encode(const asn1SccMyBooleanResult* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYBOOLEANRESULT		8  /**/
flag asn1SccMyBooleanResult_Decode(asn1SccMyBooleanResult* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


#define ERR_T_INT32		41  /*(-2147483648 .. 2147483647)*/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_UPER_ENCODE_T_INT32		42  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		43  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


#define ERR_T_UINT32		46  /*(0 .. 4294967295)*/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_UPER_ENCODE_T_UINT32		47  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		48  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Runtime_Error --------------------------------------------*/

typedef enum {
    T_Runtime_Error_NONE,
    T_Runtime_Error_noerror_PRESENT,
    T_Runtime_Error_encodeerror_PRESENT,
    T_Runtime_Error_decodeerror_PRESENT
} asn1SccT_Runtime_Error_selection;

typedef union {
    asn1SccT_UInt32 noerror;
    asn1SccT_Int32 encodeerror;
    asn1SccT_Int32 decodeerror;
} asn1SccT_Runtime_Error_unchecked_union;

typedef struct {
    asn1SccT_Runtime_Error_selection kind;

    asn1SccT_Runtime_Error_unchecked_union u;
} asn1SccT_Runtime_Error;

#define ERR_T_RUNTIME_ERROR		101  /**/
#define ERR_T_RUNTIME_ERROR_NOERROR_2		76  /**/
#define ERR_T_RUNTIME_ERROR_ENCODEERROR_2		86  /**/
#define ERR_T_RUNTIME_ERROR_DECODEERROR_2		96  /**/
flag asn1SccT_Runtime_Error_IsConstraintValid(const asn1SccT_Runtime_Error* pVal, int* pErrCode);

void asn1SccT_Runtime_Error_Initialize(asn1SccT_Runtime_Error* pVal);

#define ERR_UPER_ENCODE_T_RUNTIME_ERROR		102  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_NOERROR_2		77  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_ENCODEERROR_2		87  /**/
#define ERR_UPER_ENCODE_T_RUNTIME_ERROR_DECODEERROR_2		97  /**/
#define asn1SccT_Runtime_Error_REQUIRED_BYTES_FOR_ENCODING       5
#define asn1SccT_Runtime_Error_REQUIRED_BITS_FOR_ENCODING        34

flag asn1SccT_Runtime_Error_Encode(const asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_RUNTIME_ERROR		103  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_NOERROR_2		78  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_ENCODEERROR_2		88  /**/
#define ERR_UPER_DECODE_T_RUNTIME_ERROR_DECODEERROR_2		98  /**/
flag asn1SccT_Runtime_Error_Decode(asn1SccT_Runtime_Error* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


#define ERR_T_INT8		51  /*(-128 .. 127)*/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_UPER_ENCODE_T_INT8		52  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		53  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


#define ERR_T_UINT8		56  /*(0 .. 255)*/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_UPER_ENCODE_T_UINT8		57  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		58  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


#define ERR_T_BOOLEAN		61  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_UPER_ENCODE_T_BOOLEAN		62  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		63  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

#define ERR_T_NULL_RECORD		66  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccPID_Range;


#define ERR_PID_RANGE		106  /*(0..4)*/
flag asn1SccPID_Range_IsConstraintValid(const asn1SccPID_Range* pVal, int* pErrCode);

void asn1SccPID_Range_Initialize(asn1SccPID_Range* pVal);

#define ERR_UPER_ENCODE_PID_RANGE		107  /**/
#define asn1SccPID_Range_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_Range_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Range_Encode(const asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID_RANGE		108  /**/
flag asn1SccPID_Range_Decode(asn1SccPID_Range* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PID_taste_user_interface = 0,
    PID_timer_manager = 1,
    PID_actuator = 2,
    PID_controller = 3,
    PID_env = 4
} asn1SccPID;

// please use the following macros to avoid breaking code.
#define asn1SccPID_taste_user_interface PID_taste_user_interface
#define asn1SccPID_timer_manager PID_timer_manager
#define asn1SccPID_actuator PID_actuator
#define asn1SccPID_controller PID_controller
#define asn1SccPID_env PID_env

#define ERR_PID		111  /*taste-user-interface | timer-manager | actuator | controller | env*/
flag asn1SccPID_IsConstraintValid(const asn1SccPID* pVal, int* pErrCode);

void asn1SccPID_Initialize(asn1SccPID* pVal);

#define ERR_UPER_ENCODE_PID		112  /**/
#define asn1SccPID_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccPID_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccPID_Encode(const asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PID		113  /**/
flag asn1SccPID_Decode(asn1SccPID* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
