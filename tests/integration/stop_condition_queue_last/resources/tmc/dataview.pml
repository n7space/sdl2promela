#define Actuator_States int
#define Actuator_Context_state int
#define Actuator_Context_init_done bool
#define Actuator_Context_sender int
#define Actuator_Mychoicedatatype_Selection int
#define Controller_States int
#define Controller_Context_state int
#define Controller_Context_init_done bool
#define Controller_Context_sender int
#define Controller_Context_param_integer int
#define Controller_Context_param_sequence_x int
#define Controller_Context_param_sequence_y_elem int
#define Controller_Context_param_choice_first int
#define Controller_Context_param_choice_second int
#define Controller_Context_param_array_elem int
#define Controller_Context_param_optional_a int
#define Controller_Context_param_optional_b int
#define Controller_Context_param_optional_c int
#define Controller_Context_reached int
#define Controller_Mychoicedatatype_Selection int
#define MyInteger int
#define MySequenceDataType_x int
#define MySequenceDataType_y_elem int
#define MyChoiceDataType_first int
#define MyChoiceDataType_second int
#define MyArrayDataType_elem int
#define MySequenceWithOptionalsDataType_a int
#define MySequenceWithOptionalsDataType_b int
#define MySequenceWithOptionalsDataType_c int
#define T_Int32 int
#define T_UInt32 int
#define T_Int8 int
#define T_UInt8 int
#define T_Boolean bool
#define PID_Range int
#define PID int
#define Actuator_Event_msg_in_test_array_p1_elem int
#define Actuator_Event_msg_in_test_choice_p1_first int
#define Actuator_Event_msg_in_test_choice_p1_second int
#define Actuator_Event_msg_in_test_integer_p1 int
#define Actuator_Event_msg_in_test_optional_p1_a int
#define Actuator_Event_msg_in_test_optional_p1_b int
#define Actuator_Event_msg_in_test_optional_p1_c int
#define Actuator_Event_msg_in_test_sequence_p1_x int
#define Actuator_Event_msg_in_test_sequence_p1_y_elem int
#define Controller_Event_msg_out_test_array_p1_elem int
#define Controller_Event_msg_out_test_choice_p1_first int
#define Controller_Event_msg_out_test_choice_p1_second int
#define Controller_Event_msg_out_test_integer_p1 int
#define Controller_Event_msg_out_test_optional_p1_a int
#define Controller_Event_msg_out_test_optional_p1_b int
#define Controller_Event_msg_out_test_optional_p1_c int
#define Controller_Event_msg_out_test_sequence_p1_x int
#define Controller_Event_msg_out_test_sequence_p1_y_elem int
#define Observer_State_Kind int
#define Function_Event_actuator_msg_in_test_array_p1_elem int
#define Function_Event_actuator_msg_in_test_choice_p1_first int
#define Function_Event_actuator_msg_in_test_choice_p1_second int
#define Function_Event_actuator_msg_in_test_integer_p1 int
#define Function_Event_actuator_msg_in_test_optional_p1_a int
#define Function_Event_actuator_msg_in_test_optional_p1_b int
#define Function_Event_actuator_msg_in_test_optional_p1_c int
#define Function_Event_actuator_msg_in_test_sequence_p1_x int
#define Function_Event_actuator_msg_in_test_sequence_p1_y_elem int
#define Function_Event_controller_msg_out_test_array_p1_elem int
#define Function_Event_controller_msg_out_test_choice_p1_first int
#define Function_Event_controller_msg_out_test_choice_p1_second int
#define Function_Event_controller_msg_out_test_integer_p1 int
#define Function_Event_controller_msg_out_test_optional_p1_a int
#define Function_Event_controller_msg_out_test_optional_p1_b int
#define Function_Event_controller_msg_out_test_optional_p1_c int
#define Function_Event_controller_msg_out_test_sequence_p1_x int
#define Function_Event_controller_msg_out_test_sequence_p1_y_elem int
#define Named_Function_Event_event_actuator_msg_in_test_array_p1_elem int
#define Named_Function_Event_event_actuator_msg_in_test_choice_p1_first int
#define Named_Function_Event_event_actuator_msg_in_test_choice_p1_second int
#define Named_Function_Event_event_actuator_msg_in_test_integer_p1 int
#define Named_Function_Event_event_actuator_msg_in_test_optional_p1_a int
#define Named_Function_Event_event_actuator_msg_in_test_optional_p1_b int
#define Named_Function_Event_event_actuator_msg_in_test_optional_p1_c int
#define Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x int
#define Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Named_Function_Event_event_controller_msg_out_test_array_p1_elem int
#define Named_Function_Event_event_controller_msg_out_test_choice_p1_first int
#define Named_Function_Event_event_controller_msg_out_test_choice_p1_second int
#define Named_Function_Event_event_controller_msg_out_test_integer_p1 int
#define Named_Function_Event_event_controller_msg_out_test_optional_p1_a int
#define Named_Function_Event_event_controller_msg_out_test_optional_p1_b int
#define Named_Function_Event_event_controller_msg_out_test_optional_p1_c int
#define Named_Function_Event_event_controller_msg_out_test_sequence_p1_x int
#define Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Interface_Event_source int
#define Interface_Event_dest int
#define Interface_Event_event_actuator_msg_in_test_array_p1_elem int
#define Interface_Event_event_actuator_msg_in_test_choice_p1_first int
#define Interface_Event_event_actuator_msg_in_test_choice_p1_second int
#define Interface_Event_event_actuator_msg_in_test_integer_p1 int
#define Interface_Event_event_actuator_msg_in_test_optional_p1_a int
#define Interface_Event_event_actuator_msg_in_test_optional_p1_b int
#define Interface_Event_event_actuator_msg_in_test_optional_p1_c int
#define Interface_Event_event_actuator_msg_in_test_sequence_p1_x int
#define Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Interface_Event_event_controller_msg_out_test_array_p1_elem int
#define Interface_Event_event_controller_msg_out_test_choice_p1_first int
#define Interface_Event_event_controller_msg_out_test_choice_p1_second int
#define Interface_Event_event_controller_msg_out_test_integer_p1 int
#define Interface_Event_event_controller_msg_out_test_optional_p1_a int
#define Interface_Event_event_controller_msg_out_test_optional_p1_b int
#define Interface_Event_event_controller_msg_out_test_optional_p1_c int
#define Interface_Event_event_controller_msg_out_test_sequence_p1_x int
#define Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Observable_Event_input_event_source int
#define Observable_Event_input_event_dest int
#define Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem int
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first int
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second int
#define Observable_Event_input_event_event_actuator_msg_in_test_integer_p1 int
#define Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a int
#define Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b int
#define Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c int
#define Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x int
#define Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem int
#define Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first int
#define Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second int
#define Observable_Event_input_event_event_controller_msg_out_test_integer_p1 int
#define Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a int
#define Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b int
#define Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c int
#define Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x int
#define Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Observable_Event_output_event_source int
#define Observable_Event_output_event_dest int
#define Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem int
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first int
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second int
#define Observable_Event_output_event_event_actuator_msg_in_test_integer_p1 int
#define Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a int
#define Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b int
#define Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c int
#define Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x int
#define Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem int
#define Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first int
#define Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second int
#define Observable_Event_output_event_event_controller_msg_out_test_integer_p1 int
#define Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a int
#define Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b int
#define Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c int
#define Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x int
#define Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Observable_Event_unhandled_input_source int
#define Observable_Event_unhandled_input_dest int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1 int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x int
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1 int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x int
#define Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem int
#define Events_Ty_elem_input_event_source int
#define Events_Ty_elem_input_event_dest int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1 int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x int
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1 int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x int
#define Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Events_Ty_elem_output_event_source int
#define Events_Ty_elem_output_event_dest int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1 int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x int
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1 int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x int
#define Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define Events_Ty_elem_unhandled_input_source int
#define Events_Ty_elem_unhandled_input_dest int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x int
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1 int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x int
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_input_event_source int
#define System_State_actuator_queue_elem_input_event_dest int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1 int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1 int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x int
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_output_event_source int
#define System_State_actuator_queue_elem_output_event_dest int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1 int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1 int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x int
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_unhandled_input_source int
#define System_State_actuator_queue_elem_unhandled_input_dest int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1 int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x int
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_input_event_source int
#define System_State_controller_queue_elem_input_event_dest int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1 int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1 int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x int
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_output_event_source int
#define System_State_controller_queue_elem_output_event_dest int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1 int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1 int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x int
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_unhandled_input_source int
#define System_State_controller_queue_elem_unhandled_input_dest int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x int
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1 int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x int
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem int
#define System_State_actuator_state int
#define System_State_actuator_init_done bool
#define System_State_actuator_sender int
#define System_State_controller_state int
#define System_State_controller_init_done bool
#define System_State_controller_sender int
#define System_State_controller_param_integer int
#define System_State_controller_param_sequence_x int
#define System_State_controller_param_sequence_y_elem int
#define System_State_controller_param_choice_first int
#define System_State_controller_param_choice_second int
#define System_State_controller_param_array_elem int
#define System_State_controller_param_optional_a int
#define System_State_controller_param_optional_b int
#define System_State_controller_param_optional_c int
#define System_State_controller_reached int
#define TimerData_timer_enabled bool
#define TimerData_interval int
#define Actuator_States_wait 0
#define Actuator_Context_state_wait 0
#define Actuator_Context_sender_actuator 0
#define Actuator_Context_sender_controller 1
#define Actuator_Context_sender_env 2
#define Actuator_Mychoicedatatype_Selection_first_present 1
#define Actuator_Mychoicedatatype_Selection_second_present 2
#define Controller_States_aftersequence 0
#define Controller_States_afteroptional 1
#define Controller_States_afterchoice 2
#define Controller_States_afterinteger 3
#define Controller_States_afterarray 4
#define Controller_Context_state_aftersequence 0
#define Controller_Context_state_afteroptional 1
#define Controller_Context_state_afterchoice 2
#define Controller_Context_state_afterinteger 3
#define Controller_Context_state_afterarray 4
#define Controller_Context_sender_actuator 0
#define Controller_Context_sender_controller 1
#define Controller_Context_sender_env 2
#define Controller_Context_param_choice_NONE 0
#define Controller_Context_param_choice_first_PRESENT 1
#define Controller_context_param_choice_selection_first_PRESENT 1
#define Controller_Context_param_choice_second_PRESENT 2
#define Controller_context_param_choice_selection_second_PRESENT 2
#define Controller_Mychoicedatatype_Selection_first_present 1
#define Controller_Mychoicedatatype_Selection_second_present 2
#define MyChoiceDataType_NONE 0
#define MyChoiceDataType_first_PRESENT 1
#define Mychoicedatatype_selection_first_PRESENT 1
#define MyChoiceDataType_second_PRESENT 2
#define Mychoicedatatype_selection_second_PRESENT 2
#define PID_actuator 0
#define PID_controller 1
#define PID_env 2
#define Actuator_Event_NONE 0
#define Actuator_Event_msg_in_NONE 0
#define Actuator_Event_msg_in_input_none_PRESENT 1
#define Actuator_event_msg_in_selection_input_none_PRESENT 1
#define Actuator_Event_msg_in_test_array_PRESENT 2
#define Actuator_event_msg_in_selection_test_array_PRESENT 2
#define Actuator_Event_msg_in_test_choice_p1_NONE 0
#define Actuator_Event_msg_in_test_choice_p1_first_PRESENT 1
#define Actuator_event_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Actuator_Event_msg_in_test_choice_p1_second_PRESENT 2
#define Actuator_event_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Actuator_Event_msg_in_test_choice_PRESENT 3
#define Actuator_event_msg_in_selection_test_choice_PRESENT 3
#define Actuator_Event_msg_in_test_integer_PRESENT 4
#define Actuator_event_msg_in_selection_test_integer_PRESENT 4
#define Actuator_Event_msg_in_test_optional_PRESENT 5
#define Actuator_event_msg_in_selection_test_optional_PRESENT 5
#define Actuator_Event_msg_in_test_sequence_PRESENT 6
#define Actuator_event_msg_in_selection_test_sequence_PRESENT 6
#define Actuator_Event_msg_in_PRESENT 1
#define Actuator_event_selection_msg_in_PRESENT 1
#define Actuator_Event_msg_out_NONE 0
#define Actuator_Event_msg_out_result_PRESENT 1
#define Actuator_event_msg_out_selection_result_PRESENT 1
#define Actuator_Event_msg_out_PRESENT 2
#define Actuator_event_selection_msg_out_PRESENT 2
#define Controller_Event_NONE 0
#define Controller_Event_msg_in_NONE 0
#define Controller_Event_msg_in_input_none_PRESENT 1
#define Controller_event_msg_in_selection_input_none_PRESENT 1
#define Controller_Event_msg_in_result_PRESENT 2
#define Controller_event_msg_in_selection_result_PRESENT 2
#define Controller_Event_msg_in_PRESENT 1
#define Controller_event_selection_msg_in_PRESENT 1
#define Controller_Event_msg_out_NONE 0
#define Controller_Event_msg_out_test_array_PRESENT 1
#define Controller_event_msg_out_selection_test_array_PRESENT 1
#define Controller_Event_msg_out_test_choice_p1_NONE 0
#define Controller_Event_msg_out_test_choice_p1_first_PRESENT 1
#define Controller_event_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Controller_Event_msg_out_test_choice_p1_second_PRESENT 2
#define Controller_event_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Controller_Event_msg_out_test_choice_PRESENT 2
#define Controller_event_msg_out_selection_test_choice_PRESENT 2
#define Controller_Event_msg_out_test_integer_PRESENT 3
#define Controller_event_msg_out_selection_test_integer_PRESENT 3
#define Controller_Event_msg_out_test_optional_PRESENT 4
#define Controller_event_msg_out_selection_test_optional_PRESENT 4
#define Controller_Event_msg_out_test_sequence_PRESENT 5
#define Controller_event_msg_out_selection_test_sequence_PRESENT 5
#define Controller_Event_msg_out_PRESENT 2
#define Controller_event_selection_msg_out_PRESENT 2
#define Observer_State_Kind_regular_state 0
#define Observer_State_Kind_error_state 1
#define Observer_State_Kind_ignore_state 2
#define Observer_State_Kind_success_state 3
#define Function_Event_NONE 0
#define Function_Event_actuator_NONE 0
#define Function_Event_actuator_msg_in_NONE 0
#define Function_Event_actuator_msg_in_input_none_PRESENT 1
#define Function_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Function_Event_actuator_msg_in_test_array_PRESENT 2
#define Function_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Function_Event_actuator_msg_in_test_choice_p1_NONE 0
#define Function_Event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Function_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Function_Event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Function_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Function_Event_actuator_msg_in_test_choice_PRESENT 3
#define Function_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Function_Event_actuator_msg_in_test_integer_PRESENT 4
#define Function_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Function_Event_actuator_msg_in_test_optional_PRESENT 5
#define Function_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Function_Event_actuator_msg_in_test_sequence_PRESENT 6
#define Function_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Function_Event_actuator_msg_in_PRESENT 1
#define Function_event_actuator_selection_msg_in_PRESENT 1
#define Function_Event_actuator_msg_out_NONE 0
#define Function_Event_actuator_msg_out_result_PRESENT 1
#define Function_event_actuator_msg_out_selection_result_PRESENT 1
#define Function_Event_actuator_msg_out_PRESENT 2
#define Function_event_actuator_selection_msg_out_PRESENT 2
#define Function_Event_actuator_PRESENT 1
#define Function_event_selection_actuator_PRESENT 1
#define Function_Event_controller_NONE 0
#define Function_Event_controller_msg_in_NONE 0
#define Function_Event_controller_msg_in_input_none_PRESENT 1
#define Function_event_controller_msg_in_selection_input_none_PRESENT 1
#define Function_Event_controller_msg_in_result_PRESENT 2
#define Function_event_controller_msg_in_selection_result_PRESENT 2
#define Function_Event_controller_msg_in_PRESENT 1
#define Function_event_controller_selection_msg_in_PRESENT 1
#define Function_Event_controller_msg_out_NONE 0
#define Function_Event_controller_msg_out_test_array_PRESENT 1
#define Function_event_controller_msg_out_selection_test_array_PRESENT 1
#define Function_Event_controller_msg_out_test_choice_p1_NONE 0
#define Function_Event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Function_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Function_Event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Function_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Function_Event_controller_msg_out_test_choice_PRESENT 2
#define Function_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Function_Event_controller_msg_out_test_integer_PRESENT 3
#define Function_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Function_Event_controller_msg_out_test_optional_PRESENT 4
#define Function_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Function_Event_controller_msg_out_test_sequence_PRESENT 5
#define Function_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Function_Event_controller_msg_out_PRESENT 2
#define Function_event_controller_selection_msg_out_PRESENT 2
#define Function_Event_controller_PRESENT 2
#define Function_event_selection_controller_PRESENT 2
#define Named_Function_Event_event_NONE 0
#define Named_Function_Event_event_actuator_NONE 0
#define Named_Function_Event_event_actuator_msg_in_NONE 0
#define Named_Function_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Named_function_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_test_array_PRESENT 2
#define Named_function_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Named_function_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Named_function_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Named_Function_Event_event_actuator_msg_in_test_choice_PRESENT 3
#define Named_function_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Named_Function_Event_event_actuator_msg_in_test_integer_PRESENT 4
#define Named_function_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Named_Function_Event_event_actuator_msg_in_test_optional_PRESENT 5
#define Named_function_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Named_Function_Event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Named_function_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Named_Function_Event_event_actuator_msg_in_PRESENT 1
#define Named_function_event_event_actuator_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_NONE 0
#define Named_Function_Event_event_actuator_msg_out_result_PRESENT 1
#define Named_function_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Named_Function_Event_event_actuator_msg_out_PRESENT 2
#define Named_function_event_event_actuator_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_actuator_PRESENT 1
#define Named_function_event_event_selection_actuator_PRESENT 1
#define Named_Function_Event_event_controller_NONE 0
#define Named_Function_Event_event_controller_msg_in_NONE 0
#define Named_Function_Event_event_controller_msg_in_input_none_PRESENT 1
#define Named_function_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Named_Function_Event_event_controller_msg_in_result_PRESENT 2
#define Named_function_event_event_controller_msg_in_selection_result_PRESENT 2
#define Named_Function_Event_event_controller_msg_in_PRESENT 1
#define Named_function_event_event_controller_selection_msg_in_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_NONE 0
#define Named_Function_Event_event_controller_msg_out_test_array_PRESENT 1
#define Named_function_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_test_choice_p1_NONE 0
#define Named_Function_Event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Named_function_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Named_Function_Event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Named_function_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_test_choice_PRESENT 2
#define Named_function_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Named_Function_Event_event_controller_msg_out_test_integer_PRESENT 3
#define Named_function_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Named_Function_Event_event_controller_msg_out_test_optional_PRESENT 4
#define Named_function_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Named_Function_Event_event_controller_msg_out_test_sequence_PRESENT 5
#define Named_function_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Named_Function_Event_event_controller_msg_out_PRESENT 2
#define Named_function_event_event_controller_selection_msg_out_PRESENT 2
#define Named_Function_Event_event_controller_PRESENT 2
#define Named_function_event_event_selection_controller_PRESENT 2
#define Interface_Event_source_actuator 0
#define Interface_Event_source_controller 1
#define Interface_Event_source_env 2
#define Interface_Event_dest_actuator 0
#define Interface_Event_dest_controller 1
#define Interface_Event_dest_env 2
#define Interface_Event_event_NONE 0
#define Interface_Event_event_actuator_NONE 0
#define Interface_Event_event_actuator_msg_in_NONE 0
#define Interface_Event_event_actuator_msg_in_input_none_PRESENT 1
#define Interface_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_actuator_msg_in_test_array_PRESENT 2
#define Interface_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Interface_Event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Interface_Event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Interface_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Interface_Event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Interface_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Interface_Event_event_actuator_msg_in_test_choice_PRESENT 3
#define Interface_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Interface_Event_event_actuator_msg_in_test_integer_PRESENT 4
#define Interface_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Interface_Event_event_actuator_msg_in_test_optional_PRESENT 5
#define Interface_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Interface_Event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Interface_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Interface_Event_event_actuator_msg_in_PRESENT 1
#define Interface_event_event_actuator_selection_msg_in_PRESENT 1
#define Interface_Event_event_actuator_msg_out_NONE 0
#define Interface_Event_event_actuator_msg_out_result_PRESENT 1
#define Interface_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Interface_Event_event_actuator_msg_out_PRESENT 2
#define Interface_event_event_actuator_selection_msg_out_PRESENT 2
#define Interface_Event_event_actuator_PRESENT 1
#define Interface_event_event_selection_actuator_PRESENT 1
#define Interface_Event_event_controller_NONE 0
#define Interface_Event_event_controller_msg_in_NONE 0
#define Interface_Event_event_controller_msg_in_input_none_PRESENT 1
#define Interface_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Interface_Event_event_controller_msg_in_result_PRESENT 2
#define Interface_event_event_controller_msg_in_selection_result_PRESENT 2
#define Interface_Event_event_controller_msg_in_PRESENT 1
#define Interface_event_event_controller_selection_msg_in_PRESENT 1
#define Interface_Event_event_controller_msg_out_NONE 0
#define Interface_Event_event_controller_msg_out_test_array_PRESENT 1
#define Interface_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Interface_Event_event_controller_msg_out_test_choice_p1_NONE 0
#define Interface_Event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Interface_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Interface_Event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Interface_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Interface_Event_event_controller_msg_out_test_choice_PRESENT 2
#define Interface_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Interface_Event_event_controller_msg_out_test_integer_PRESENT 3
#define Interface_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Interface_Event_event_controller_msg_out_test_optional_PRESENT 4
#define Interface_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Interface_Event_event_controller_msg_out_test_sequence_PRESENT 5
#define Interface_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Interface_Event_event_controller_msg_out_PRESENT 2
#define Interface_event_event_controller_selection_msg_out_PRESENT 2
#define Interface_Event_event_controller_PRESENT 2
#define Interface_event_event_selection_controller_PRESENT 2
#define Observable_Event_NONE 0
#define Observable_Event_no_event_PRESENT 1
#define Observable_event_selection_no_event_PRESENT 1
#define Observable_Event_system_startup_PRESENT 2
#define Observable_event_selection_system_startup_PRESENT 2
#define Observable_Event_input_event_source_actuator 0
#define Observable_Event_input_event_source_controller 1
#define Observable_Event_input_event_source_env 2
#define Observable_Event_input_event_dest_actuator 0
#define Observable_Event_input_event_dest_controller 1
#define Observable_Event_input_event_dest_env 2
#define Observable_Event_input_event_event_NONE 0
#define Observable_Event_input_event_event_actuator_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_test_array_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Observable_event_input_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_input_event_event_actuator_msg_in_test_choice_PRESENT 3
#define Observable_event_input_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Observable_Event_input_event_event_actuator_msg_in_test_integer_PRESENT 4
#define Observable_event_input_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Observable_Event_input_event_event_actuator_msg_in_test_optional_PRESENT 5
#define Observable_event_input_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Observable_Event_input_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Observable_event_input_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Observable_Event_input_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_NONE 0
#define Observable_Event_input_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_input_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_actuator_PRESENT 1
#define Observable_event_input_event_event_selection_actuator_PRESENT 1
#define Observable_Event_input_event_event_controller_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_NONE 0
#define Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_in_PRESENT 1
#define Observable_event_input_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_test_array_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_test_choice_p1_NONE 0
#define Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Observable_event_input_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_test_choice_PRESENT 2
#define Observable_event_input_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Observable_Event_input_event_event_controller_msg_out_test_integer_PRESENT 3
#define Observable_event_input_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Observable_Event_input_event_event_controller_msg_out_test_optional_PRESENT 4
#define Observable_event_input_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Observable_Event_input_event_event_controller_msg_out_test_sequence_PRESENT 5
#define Observable_event_input_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Observable_Event_input_event_event_controller_msg_out_PRESENT 2
#define Observable_event_input_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_input_event_event_controller_PRESENT 2
#define Observable_event_input_event_event_selection_controller_PRESENT 2
#define Observable_Event_input_event_PRESENT 3
#define Observable_event_selection_input_event_PRESENT 3
#define Observable_Event_output_event_source_actuator 0
#define Observable_Event_output_event_source_controller 1
#define Observable_Event_output_event_source_env 2
#define Observable_Event_output_event_dest_actuator 0
#define Observable_Event_output_event_dest_controller 1
#define Observable_Event_output_event_dest_env 2
#define Observable_Event_output_event_event_NONE 0
#define Observable_Event_output_event_event_actuator_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_test_array_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Observable_event_output_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_output_event_event_actuator_msg_in_test_choice_PRESENT 3
#define Observable_event_output_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Observable_Event_output_event_event_actuator_msg_in_test_integer_PRESENT 4
#define Observable_event_output_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Observable_Event_output_event_event_actuator_msg_in_test_optional_PRESENT 5
#define Observable_event_output_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Observable_Event_output_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Observable_event_output_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Observable_Event_output_event_event_actuator_msg_in_PRESENT 1
#define Observable_event_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_NONE 0
#define Observable_Event_output_event_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_output_event_event_actuator_msg_out_PRESENT 2
#define Observable_event_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_actuator_PRESENT 1
#define Observable_event_output_event_event_selection_actuator_PRESENT 1
#define Observable_Event_output_event_event_controller_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_NONE 0
#define Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_in_result_PRESENT 2
#define Observable_event_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_in_PRESENT 1
#define Observable_event_output_event_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_test_array_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_test_choice_p1_NONE 0
#define Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Observable_event_output_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_test_choice_PRESENT 2
#define Observable_event_output_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Observable_Event_output_event_event_controller_msg_out_test_integer_PRESENT 3
#define Observable_event_output_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Observable_Event_output_event_event_controller_msg_out_test_optional_PRESENT 4
#define Observable_event_output_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Observable_Event_output_event_event_controller_msg_out_test_sequence_PRESENT 5
#define Observable_event_output_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Observable_Event_output_event_event_controller_msg_out_PRESENT 2
#define Observable_event_output_event_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_output_event_event_controller_PRESENT 2
#define Observable_event_output_event_event_selection_controller_PRESENT 2
#define Observable_Event_output_event_PRESENT 4
#define Observable_event_selection_output_event_PRESENT 4
#define Observable_Event_unhandled_input_source_actuator 0
#define Observable_Event_unhandled_input_source_controller 1
#define Observable_Event_unhandled_input_source_env 2
#define Observable_Event_unhandled_input_dest_actuator 0
#define Observable_Event_unhandled_input_dest_controller 1
#define Observable_Event_unhandled_input_dest_env 2
#define Observable_Event_unhandled_input_event_NONE 0
#define Observable_Event_unhandled_input_event_actuator_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_array_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_PRESENT 3
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_PRESENT 4
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_PRESENT 5
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT 6
#define Observable_event_unhandled_input_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Observable_event_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_actuator_PRESENT 1
#define Observable_event_unhandled_input_event_selection_actuator_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_in_PRESENT 1
#define Observable_event_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_array_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_array_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_NONE 0
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Observable_event_unhandled_input_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_test_choice_PRESENT 2
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_msg_out_test_integer_PRESENT 3
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Observable_Event_unhandled_input_event_controller_msg_out_test_optional_PRESENT 4
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_PRESENT 5
#define Observable_event_unhandled_input_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Observable_Event_unhandled_input_event_controller_msg_out_PRESENT 2
#define Observable_event_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Observable_Event_unhandled_input_event_controller_PRESENT 2
#define Observable_event_unhandled_input_event_selection_controller_PRESENT 2
#define Observable_Event_unhandled_input_PRESENT 5
#define Observable_event_selection_unhandled_input_PRESENT 5
#define Events_Ty_elem_NONE 0
#define Events_Ty_elem_no_event_PRESENT 1
#define Events_ty_elem_selection_no_event_PRESENT 1
#define Events_Ty_elem_system_startup_PRESENT 2
#define Events_ty_elem_selection_system_startup_PRESENT 2
#define Events_Ty_elem_input_event_source_actuator 0
#define Events_Ty_elem_input_event_source_controller 1
#define Events_Ty_elem_input_event_source_env 2
#define Events_Ty_elem_input_event_dest_actuator 0
#define Events_Ty_elem_input_event_dest_controller 1
#define Events_Ty_elem_input_event_dest_env 2
#define Events_Ty_elem_input_event_event_NONE 0
#define Events_Ty_elem_input_event_event_actuator_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_array_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_PRESENT 3
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_PRESENT 4
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_PRESENT 5
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Events_ty_elem_input_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_actuator_PRESENT 1
#define Events_ty_elem_input_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_array_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_NONE 0
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_input_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_test_choice_PRESENT 2
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_msg_out_test_integer_PRESENT 3
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Events_Ty_elem_input_event_event_controller_msg_out_test_optional_PRESENT 4
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_PRESENT 5
#define Events_ty_elem_input_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Events_Ty_elem_input_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_input_event_event_controller_PRESENT 2
#define Events_ty_elem_input_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_input_event_PRESENT 3
#define Events_ty_elem_selection_input_event_PRESENT 3
#define Events_Ty_elem_output_event_source_actuator 0
#define Events_Ty_elem_output_event_source_controller 1
#define Events_Ty_elem_output_event_source_env 2
#define Events_Ty_elem_output_event_dest_actuator 0
#define Events_Ty_elem_output_event_dest_controller 1
#define Events_Ty_elem_output_event_dest_env 2
#define Events_Ty_elem_output_event_event_NONE 0
#define Events_Ty_elem_output_event_event_actuator_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_array_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_PRESENT 3
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_PRESENT 4
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_PRESENT 5
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define Events_ty_elem_output_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_actuator_PRESENT 1
#define Events_ty_elem_output_event_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_array_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_NONE 0
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_output_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_test_choice_PRESENT 2
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_msg_out_test_integer_PRESENT 3
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Events_Ty_elem_output_event_event_controller_msg_out_test_optional_PRESENT 4
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_PRESENT 5
#define Events_ty_elem_output_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Events_Ty_elem_output_event_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_output_event_event_controller_PRESENT 2
#define Events_ty_elem_output_event_event_selection_controller_PRESENT 2
#define Events_Ty_elem_output_event_PRESENT 4
#define Events_ty_elem_selection_output_event_PRESENT 4
#define Events_Ty_elem_unhandled_input_source_actuator 0
#define Events_Ty_elem_unhandled_input_source_controller 1
#define Events_Ty_elem_unhandled_input_source_env 2
#define Events_Ty_elem_unhandled_input_dest_actuator 0
#define Events_Ty_elem_unhandled_input_dest_controller 1
#define Events_Ty_elem_unhandled_input_dest_env 2
#define Events_Ty_elem_unhandled_input_event_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_array_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT 3
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT 4
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT 5
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT 6
#define Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_actuator_PRESENT 1
#define Events_ty_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_array_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_NONE 0
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_choice_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT 3
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_integer_PRESENT 3
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT 4
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_optional_PRESENT 4
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT 5
#define Events_ty_elem_unhandled_input_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define Events_ty_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define Events_Ty_elem_unhandled_input_event_controller_PRESENT 2
#define Events_ty_elem_unhandled_input_event_selection_controller_PRESENT 2
#define Events_Ty_elem_unhandled_input_PRESENT 5
#define Events_ty_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_queue_elem_NONE 0
#define System_State_actuator_queue_elem_no_event_PRESENT 1
#define System_state_actuator_queue_elem_selection_no_event_PRESENT 1
#define System_State_actuator_queue_elem_system_startup_PRESENT 2
#define System_state_actuator_queue_elem_selection_system_startup_PRESENT 2
#define System_State_actuator_queue_elem_input_event_source_actuator 0
#define System_State_actuator_queue_elem_input_event_source_controller 1
#define System_State_actuator_queue_elem_input_event_source_env 2
#define System_State_actuator_queue_elem_input_event_dest_actuator 0
#define System_State_actuator_queue_elem_input_event_dest_controller 1
#define System_State_actuator_queue_elem_input_event_dest_env 2
#define System_State_actuator_queue_elem_input_event_event_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_input_event_PRESENT 3
#define System_state_actuator_queue_elem_selection_input_event_PRESENT 3
#define System_State_actuator_queue_elem_output_event_source_actuator 0
#define System_State_actuator_queue_elem_output_event_source_controller 1
#define System_State_actuator_queue_elem_output_event_source_env 2
#define System_State_actuator_queue_elem_output_event_dest_actuator 0
#define System_State_actuator_queue_elem_output_event_dest_controller 1
#define System_State_actuator_queue_elem_output_event_dest_env 2
#define System_State_actuator_queue_elem_output_event_event_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_output_event_PRESENT 4
#define System_state_actuator_queue_elem_selection_output_event_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_source_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_source_controller 1
#define System_State_actuator_queue_elem_unhandled_input_source_env 2
#define System_State_actuator_queue_elem_unhandled_input_dest_actuator 0
#define System_State_actuator_queue_elem_unhandled_input_dest_controller 1
#define System_State_actuator_queue_elem_unhandled_input_dest_env 2
#define System_State_actuator_queue_elem_unhandled_input_event_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_actuator_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_actuator_queue_elem_unhandled_input_PRESENT 5
#define System_state_actuator_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_controller_queue_elem_NONE 0
#define System_State_controller_queue_elem_no_event_PRESENT 1
#define System_state_controller_queue_elem_selection_no_event_PRESENT 1
#define System_State_controller_queue_elem_system_startup_PRESENT 2
#define System_state_controller_queue_elem_selection_system_startup_PRESENT 2
#define System_State_controller_queue_elem_input_event_source_actuator 0
#define System_State_controller_queue_elem_input_event_source_controller 1
#define System_State_controller_queue_elem_input_event_source_env 2
#define System_State_controller_queue_elem_input_event_dest_actuator 0
#define System_State_controller_queue_elem_input_event_dest_controller 1
#define System_State_controller_queue_elem_input_event_dest_env 2
#define System_State_controller_queue_elem_input_event_event_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_input_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_input_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_input_event_PRESENT 3
#define System_state_controller_queue_elem_selection_input_event_PRESENT 3
#define System_State_controller_queue_elem_output_event_source_actuator 0
#define System_State_controller_queue_elem_output_event_source_controller 1
#define System_State_controller_queue_elem_output_event_source_env 2
#define System_State_controller_queue_elem_output_event_dest_actuator 0
#define System_State_controller_queue_elem_output_event_dest_controller 1
#define System_State_controller_queue_elem_output_event_dest_env 2
#define System_State_controller_queue_elem_output_event_event_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_output_event_event_controller_PRESENT 2
#define System_state_controller_queue_elem_output_event_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_output_event_PRESENT 4
#define System_state_controller_queue_elem_selection_output_event_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_source_actuator 0
#define System_State_controller_queue_elem_unhandled_input_source_controller 1
#define System_State_controller_queue_elem_unhandled_input_source_env 2
#define System_State_controller_queue_elem_unhandled_input_dest_actuator 0
#define System_State_controller_queue_elem_unhandled_input_dest_controller 1
#define System_State_controller_queue_elem_unhandled_input_dest_env 2
#define System_State_controller_queue_elem_unhandled_input_event_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_array_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_choice_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_integer_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT 5
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_optional_PRESENT 5
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT 6
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_test_sequence_PRESENT 6
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_result_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_actuator_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_selection_actuator_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_input_none_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_result_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_in_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_array_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_NONE 0
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT 1
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_first_PRESENT 1
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_second_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_choice_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT 3
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_integer_PRESENT 3
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT 4
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_optional_PRESENT 4
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT 5
#define System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_test_sequence_PRESENT 5
#define System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_controller_selection_msg_out_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT 2
#define System_state_controller_queue_elem_unhandled_input_event_selection_controller_PRESENT 2
#define System_State_controller_queue_elem_unhandled_input_PRESENT 5
#define System_state_controller_queue_elem_selection_unhandled_input_PRESENT 5
#define System_State_actuator_state_wait 0
#define System_State_actuator_sender_actuator 0
#define System_State_actuator_sender_controller 1
#define System_State_actuator_sender_env 2
#define System_State_controller_state_aftersequence 0
#define System_State_controller_state_afteroptional 1
#define System_State_controller_state_afterchoice 2
#define System_State_controller_state_afterinteger 3
#define System_State_controller_state_afterarray 4
#define System_State_controller_sender_actuator 0
#define System_State_controller_sender_controller 1
#define System_State_controller_sender_env 2
#define System_State_controller_param_choice_NONE 0
#define System_State_controller_param_choice_first_PRESENT 1
#define System_state_controller_param_choice_selection_first_PRESENT 1
#define System_State_controller_param_choice_second_PRESENT 2
#define System_state_controller_param_choice_selection_second_PRESENT 2
typedef Actuator_Context {
    Actuator_Context_state state;
    Actuator_Context_init_done init_done;
    Actuator_Context_sender sender;
}

typedef Actuator_Event_msg_in_input_none {
    bit dummy;
}

typedef Actuator_Event_msg_in_test_array_p1 {
    Actuator_Event_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Actuator_Event_msg_in_test_choice_p1_data {
    Actuator_Event_msg_in_test_choice_p1_first first;
    Actuator_Event_msg_in_test_choice_p1_second second;
}

typedef Actuator_Event_msg_in_test_integer {
    Actuator_Event_msg_in_test_integer_p1 p1;
}

typedef Actuator_Event_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Actuator_Event_msg_in_test_sequence_p1_y {
    Actuator_Event_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Actuator_Event_msg_out_result {
    bit dummy;
}

typedef AggregateTimerData_actuator {
    bit dummy;
}

typedef AggregateTimerData_controller {
    bit dummy;
}

typedef AggregateTimerData_dummy_entry {
    bit dummy;
}

typedef Controller_Context_param_array {
    Controller_Context_param_array_elem data[3];
    int length;
}

typedef Controller_Context_param_choice_data {
    Controller_Context_param_choice_first first;
    Controller_Context_param_choice_second second;
}

typedef Controller_Context_param_optional_exist {
    bool b;
    bool c;
}

typedef Controller_Context_param_sequence_y {
    Controller_Context_param_sequence_y_elem data[4];
    int length;
}

typedef Controller_Event_msg_in_input_none {
    bit dummy;
}

typedef Controller_Event_msg_in_result {
    bit dummy;
}

typedef Controller_Event_msg_out_test_array_p1 {
    Controller_Event_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Controller_Event_msg_out_test_choice_p1_data {
    Controller_Event_msg_out_test_choice_p1_first first;
    Controller_Event_msg_out_test_choice_p1_second second;
}

typedef Controller_Event_msg_out_test_integer {
    Controller_Event_msg_out_test_integer_p1 p1;
}

typedef Controller_Event_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Controller_Event_msg_out_test_sequence_p1_y {
    Controller_Event_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first first;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_integer {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_result {
    bit dummy;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_data {
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first first;
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_integer {
    Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y {
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_no_event {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first first;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_integer {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_result {
    bit dummy;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_data {
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first first;
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_integer {
    Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y {
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_system_startup {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first first;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_result {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_result {
    bit dummy;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first first;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second second;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Function_Event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_actuator_msg_in_test_array_p1 {
    Function_Event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Function_Event_actuator_msg_in_test_choice_p1_data {
    Function_Event_actuator_msg_in_test_choice_p1_first first;
    Function_Event_actuator_msg_in_test_choice_p1_second second;
}

typedef Function_Event_actuator_msg_in_test_integer {
    Function_Event_actuator_msg_in_test_integer_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Function_Event_actuator_msg_in_test_sequence_p1_y {
    Function_Event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Function_Event_actuator_msg_out_result {
    bit dummy;
}

typedef Function_Event_controller_msg_in_input_none {
    bit dummy;
}

typedef Function_Event_controller_msg_in_result {
    bit dummy;
}

typedef Function_Event_controller_msg_out_test_array_p1 {
    Function_Event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Function_Event_controller_msg_out_test_choice_p1_data {
    Function_Event_controller_msg_out_test_choice_p1_first first;
    Function_Event_controller_msg_out_test_choice_p1_second second;
}

typedef Function_Event_controller_msg_out_test_integer {
    Function_Event_controller_msg_out_test_integer_p1 p1;
}

typedef Function_Event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Function_Event_controller_msg_out_test_sequence_p1_y {
    Function_Event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Interface_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_actuator_msg_in_test_array_p1 {
    Interface_Event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Interface_Event_event_actuator_msg_in_test_choice_p1_data {
    Interface_Event_event_actuator_msg_in_test_choice_p1_first first;
    Interface_Event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Interface_Event_event_actuator_msg_in_test_integer {
    Interface_Event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Interface_Event_event_actuator_msg_in_test_sequence_p1_y {
    Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Interface_Event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_in_result {
    bit dummy;
}

typedef Interface_Event_event_controller_msg_out_test_array_p1 {
    Interface_Event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Interface_Event_event_controller_msg_out_test_choice_p1_data {
    Interface_Event_event_controller_msg_out_test_choice_p1_first first;
    Interface_Event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Interface_Event_event_controller_msg_out_test_integer {
    Interface_Event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Interface_Event_event_controller_msg_out_test_sequence_p1_y {
    Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef MyArrayDataType {
    MyArrayDataType_elem data[3];
    int length;
}

typedef MyChoiceDataType_data {
    MyChoiceDataType_first first;
    MyChoiceDataType_second second;
}

typedef MySequenceDataType_y {
    MySequenceDataType_y_elem data[4];
    int length;
}

typedef MySequenceWithOptionalsDataType_exist {
    bool b;
    bool c;
}

typedef Named_Function_Event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_actuator_msg_in_test_array_p1 {
    Named_Function_Event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Named_Function_Event_event_actuator_msg_in_test_choice_p1_data {
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_first first;
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Named_Function_Event_event_actuator_msg_in_test_integer {
    Named_Function_Event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y {
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Named_Function_Event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_in_result {
    bit dummy;
}

typedef Named_Function_Event_event_controller_msg_out_test_array_p1 {
    Named_Function_Event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Named_Function_Event_event_controller_msg_out_test_choice_p1_data {
    Named_Function_Event_event_controller_msg_out_test_choice_p1_first first;
    Named_Function_Event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Named_Function_Event_event_controller_msg_out_test_integer {
    Named_Function_Event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Named_Function_Event_event_controller_msg_out_test_sequence_p1_y {
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Named_Function_Event_id {
    byte data[80];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_array_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_data {
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first first;
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_integer {
    Observable_Event_input_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y {
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Observable_Event_input_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_in_result {
    bit dummy;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_array_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_choice_p1_data {
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first first;
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_integer {
    Observable_Event_input_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y {
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Observable_Event_no_event {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_array_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_data {
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first first;
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_integer {
    Observable_Event_output_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y {
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Observable_Event_output_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_in_result {
    bit dummy;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_array_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_choice_p1_data {
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first first;
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_integer {
    Observable_Event_output_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y {
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Observable_Event_system_startup {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first first;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second second;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_integer {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_result {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_result {
    bit dummy;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_data {
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first first;
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second second;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_integer {
    Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y {
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator {
    System_State_actuator_state state;
    System_State_actuator_init_done init_done;
    System_State_actuator_sender sender;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first first;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first first;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator_queue_elem_no_event {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first first;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first first;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first first;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first first;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_param_array {
    System_State_controller_param_array_elem data[3];
    int length;
}

typedef System_State_controller_param_choice_data {
    System_State_controller_param_choice_first first;
    System_State_controller_param_choice_second second;
}

typedef System_State_controller_param_optional_exist {
    bool b;
    bool c;
}

typedef System_State_controller_param_sequence_y {
    System_State_controller_param_sequence_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first first;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first first;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_no_event {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first first;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first first;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_system_startup {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first first;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result {
    bit dummy;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem data[3];
    int length;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first first;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second second;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist {
    bool b;
    bool c;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem data[4];
    int length;
}

typedef System_State_timers_actuator {
    bit dummy;
}

typedef System_State_timers_controller {
    bit dummy;
}

typedef System_State_timers_dummy_entry {
    bit dummy;
}

typedef T_Null_Record {
    bit dummy;
}

typedef TimerData {
    TimerData_timer_enabled timer_enabled;
    TimerData_interval interval;
}

typedef Actuator_Event_msg_in_test_array {
    Actuator_Event_msg_in_test_array_p1 p1;
}

typedef Actuator_Event_msg_in_test_choice_p1 {
    Actuator_Event_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Actuator_Event_msg_in_test_optional_p1 {
    Actuator_Event_msg_in_test_optional_p1_a a;
    Actuator_Event_msg_in_test_optional_p1_b b;
    Actuator_Event_msg_in_test_optional_p1_c c;
    Actuator_Event_msg_in_test_optional_p1_exist exist;
}

typedef Actuator_Event_msg_in_test_sequence_p1 {
    Actuator_Event_msg_in_test_sequence_p1_x x;
    Actuator_Event_msg_in_test_sequence_p1_y y;
}

typedef Actuator_Event_msg_out_data {
    Actuator_Event_msg_out_result result;
}

typedef AggregateTimerData {
    AggregateTimerData_actuator actuator;
    AggregateTimerData_controller controller;
    AggregateTimerData_dummy_entry dummy_entry;
}

typedef Controller_Context_param_choice {
    Controller_Context_param_choice_data data;
    int selection;
}

typedef Controller_Context_param_optional {
    Controller_Context_param_optional_a a;
    Controller_Context_param_optional_b b;
    Controller_Context_param_optional_c c;
    Controller_Context_param_optional_exist exist;
}

typedef Controller_Context_param_sequence {
    Controller_Context_param_sequence_x x;
    Controller_Context_param_sequence_y y;
}

typedef Controller_Event_msg_in_data {
    Controller_Event_msg_in_input_none input_none;
    Controller_Event_msg_in_result result;
}

typedef Controller_Event_msg_out_test_array {
    Controller_Event_msg_out_test_array_p1 p1;
}

typedef Controller_Event_msg_out_test_choice_p1 {
    Controller_Event_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Controller_Event_msg_out_test_optional_p1 {
    Controller_Event_msg_out_test_optional_p1_a a;
    Controller_Event_msg_out_test_optional_p1_b b;
    Controller_Event_msg_out_test_optional_p1_c c;
    Controller_Event_msg_out_test_optional_p1_exist exist;
}

typedef Controller_Event_msg_out_test_sequence_p1 {
    Controller_Event_msg_out_test_sequence_p1_x x;
    Controller_Event_msg_out_test_sequence_p1_y y;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_array {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a a;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b b;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c c;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1 {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x x;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out_data {
    Events_Ty_elem_input_event_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in_data {
    Events_Ty_elem_input_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_array {
    Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a a;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b b;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c c;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1 {
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x x;
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_array {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a a;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b b;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c c;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1 {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x x;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out_data {
    Events_Ty_elem_output_event_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in_data {
    Events_Ty_elem_output_event_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_array {
    Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a a;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b b;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c c;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1 {
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x x;
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a a;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b b;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c c;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x x;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a a;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b b;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c c;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x x;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Function_Event_actuator_msg_in_test_array {
    Function_Event_actuator_msg_in_test_array_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_choice_p1 {
    Function_Event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in_test_optional_p1 {
    Function_Event_actuator_msg_in_test_optional_p1_a a;
    Function_Event_actuator_msg_in_test_optional_p1_b b;
    Function_Event_actuator_msg_in_test_optional_p1_c c;
    Function_Event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Function_Event_actuator_msg_in_test_sequence_p1 {
    Function_Event_actuator_msg_in_test_sequence_p1_x x;
    Function_Event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Function_Event_actuator_msg_out_data {
    Function_Event_actuator_msg_out_result result;
}

typedef Function_Event_controller_msg_in_data {
    Function_Event_controller_msg_in_input_none input_none;
    Function_Event_controller_msg_in_result result;
}

typedef Function_Event_controller_msg_out_test_array {
    Function_Event_controller_msg_out_test_array_p1 p1;
}

typedef Function_Event_controller_msg_out_test_choice_p1 {
    Function_Event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Function_Event_controller_msg_out_test_optional_p1 {
    Function_Event_controller_msg_out_test_optional_p1_a a;
    Function_Event_controller_msg_out_test_optional_p1_b b;
    Function_Event_controller_msg_out_test_optional_p1_c c;
    Function_Event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Function_Event_controller_msg_out_test_sequence_p1 {
    Function_Event_controller_msg_out_test_sequence_p1_x x;
    Function_Event_controller_msg_out_test_sequence_p1_y y;
}

typedef Interface_Event_event_actuator_msg_in_test_array {
    Interface_Event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_choice_p1 {
    Interface_Event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in_test_optional_p1 {
    Interface_Event_event_actuator_msg_in_test_optional_p1_a a;
    Interface_Event_event_actuator_msg_in_test_optional_p1_b b;
    Interface_Event_event_actuator_msg_in_test_optional_p1_c c;
    Interface_Event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Interface_Event_event_actuator_msg_in_test_sequence_p1 {
    Interface_Event_event_actuator_msg_in_test_sequence_p1_x x;
    Interface_Event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Interface_Event_event_actuator_msg_out_data {
    Interface_Event_event_actuator_msg_out_result result;
}

typedef Interface_Event_event_controller_msg_in_data {
    Interface_Event_event_controller_msg_in_input_none input_none;
    Interface_Event_event_controller_msg_in_result result;
}

typedef Interface_Event_event_controller_msg_out_test_array {
    Interface_Event_event_controller_msg_out_test_array_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_choice_p1 {
    Interface_Event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out_test_optional_p1 {
    Interface_Event_event_controller_msg_out_test_optional_p1_a a;
    Interface_Event_event_controller_msg_out_test_optional_p1_b b;
    Interface_Event_event_controller_msg_out_test_optional_p1_c c;
    Interface_Event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Interface_Event_event_controller_msg_out_test_sequence_p1 {
    Interface_Event_event_controller_msg_out_test_sequence_p1_x x;
    Interface_Event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef MyChoiceDataType {
    MyChoiceDataType_data data;
    int selection;
}

typedef MySequenceDataType {
    MySequenceDataType_x x;
    MySequenceDataType_y y;
}

typedef MySequenceWithOptionalsDataType {
    MySequenceWithOptionalsDataType_a a;
    MySequenceWithOptionalsDataType_b b;
    MySequenceWithOptionalsDataType_c c;
    MySequenceWithOptionalsDataType_exist exist;
}

typedef Named_Function_Event_event_actuator_msg_in_test_array {
    Named_Function_Event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_choice_p1 {
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in_test_optional_p1 {
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_a a;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_b b;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_c c;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Named_Function_Event_event_actuator_msg_in_test_sequence_p1 {
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x x;
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Named_Function_Event_event_actuator_msg_out_data {
    Named_Function_Event_event_actuator_msg_out_result result;
}

typedef Named_Function_Event_event_controller_msg_in_data {
    Named_Function_Event_event_controller_msg_in_input_none input_none;
    Named_Function_Event_event_controller_msg_in_result result;
}

typedef Named_Function_Event_event_controller_msg_out_test_array {
    Named_Function_Event_event_controller_msg_out_test_array_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_choice_p1 {
    Named_Function_Event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out_test_optional_p1 {
    Named_Function_Event_event_controller_msg_out_test_optional_p1_a a;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_b b;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_c c;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Named_Function_Event_event_controller_msg_out_test_sequence_p1 {
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_x x;
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_array {
    Observable_Event_input_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_choice_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_optional_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a a;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b b;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c c;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1 {
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x x;
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Observable_Event_input_event_event_actuator_msg_out_data {
    Observable_Event_input_event_event_actuator_msg_out_result result;
}

typedef Observable_Event_input_event_event_controller_msg_in_data {
    Observable_Event_input_event_event_controller_msg_in_input_none input_none;
    Observable_Event_input_event_event_controller_msg_in_result result;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_array {
    Observable_Event_input_event_event_controller_msg_out_test_array_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_choice_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_optional_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a a;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b b;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c c;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_sequence_p1 {
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x x;
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_array {
    Observable_Event_output_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_choice_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_optional_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a a;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b b;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c c;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1 {
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x x;
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Observable_Event_output_event_event_actuator_msg_out_data {
    Observable_Event_output_event_event_actuator_msg_out_result result;
}

typedef Observable_Event_output_event_event_controller_msg_in_data {
    Observable_Event_output_event_event_controller_msg_in_input_none input_none;
    Observable_Event_output_event_event_controller_msg_in_result result;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_array {
    Observable_Event_output_event_event_controller_msg_out_test_array_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_choice_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_optional_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a a;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b b;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c c;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_sequence_p1 {
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x x;
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_array {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a a;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b b;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c c;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1 {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x x;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out_data {
    Observable_Event_unhandled_input_event_actuator_msg_out_result result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in_data {
    Observable_Event_unhandled_input_event_controller_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_controller_msg_in_result result;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_array {
    Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a a;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b b;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c c;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1 {
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x x;
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a a;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b b;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c c;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1 {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a a;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b b;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c c;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1 {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x x;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a a;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b b;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c c;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1 {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a a;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b b;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c c;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1 {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x x;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a a;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b b;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c c;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a a;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b b;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c c;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x x;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_controller_param_choice {
    System_State_controller_param_choice_data data;
    int selection;
}

typedef System_State_controller_param_optional {
    System_State_controller_param_optional_a a;
    System_State_controller_param_optional_b b;
    System_State_controller_param_optional_c c;
    System_State_controller_param_optional_exist exist;
}

typedef System_State_controller_param_sequence {
    System_State_controller_param_sequence_x x;
    System_State_controller_param_sequence_y y;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a a;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b b;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c c;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1 {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a a;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b b;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c c;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1 {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x x;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a a;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b b;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c c;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1 {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a a;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b b;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c c;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1 {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x x;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a a;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b b;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c c;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x x;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y y;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result result;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a a;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b b;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c c;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_exist exist;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x x;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y y;
}

typedef System_State_timers {
    System_State_timers_actuator actuator;
    System_State_timers_controller controller;
    System_State_timers_dummy_entry dummy_entry;
}

typedef Actuator_Event_msg_in_test_choice {
    Actuator_Event_msg_in_test_choice_p1 p1;
}

typedef Actuator_Event_msg_in_test_optional {
    Actuator_Event_msg_in_test_optional_p1 p1;
}

typedef Actuator_Event_msg_in_test_sequence {
    Actuator_Event_msg_in_test_sequence_p1 p1;
}

typedef Actuator_Event_msg_out {
    Actuator_Event_msg_out_data data;
    int selection;
}

typedef Controller_Context {
    Controller_Context_state state;
    Controller_Context_init_done init_done;
    Controller_Context_sender sender;
    Controller_Context_param_integer param_integer;
    Controller_Context_param_sequence param_sequence;
    Controller_Context_param_choice param_choice;
    Controller_Context_param_array param_array;
    Controller_Context_param_optional param_optional;
    Controller_Context_reached reached;
}

typedef Controller_Event_msg_in {
    Controller_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out_test_choice {
    Controller_Event_msg_out_test_choice_p1 p1;
}

typedef Controller_Event_msg_out_test_optional {
    Controller_Event_msg_out_test_optional_p1 p1;
}

typedef Controller_Event_msg_out_test_sequence {
    Controller_Event_msg_out_test_sequence_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_choice {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_optional {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence {
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_out {
    Events_Ty_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_in {
    Events_Ty_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_choice {
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_optional {
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_test_sequence {
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_choice {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_optional {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence {
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_out {
    Events_Ty_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_in {
    Events_Ty_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_choice {
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_optional {
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_test_sequence {
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_out {
    Events_Ty_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_in {
    Events_Ty_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1 p1;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_choice {
    Function_Event_actuator_msg_in_test_choice_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_optional {
    Function_Event_actuator_msg_in_test_optional_p1 p1;
}

typedef Function_Event_actuator_msg_in_test_sequence {
    Function_Event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Function_Event_actuator_msg_out {
    Function_Event_actuator_msg_out_data data;
    int selection;
}

typedef Function_Event_controller_msg_in {
    Function_Event_controller_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out_test_choice {
    Function_Event_controller_msg_out_test_choice_p1 p1;
}

typedef Function_Event_controller_msg_out_test_optional {
    Function_Event_controller_msg_out_test_optional_p1 p1;
}

typedef Function_Event_controller_msg_out_test_sequence {
    Function_Event_controller_msg_out_test_sequence_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_choice {
    Interface_Event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_optional {
    Interface_Event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Interface_Event_event_actuator_msg_in_test_sequence {
    Interface_Event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Interface_Event_event_actuator_msg_out {
    Interface_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_in {
    Interface_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out_test_choice {
    Interface_Event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_optional {
    Interface_Event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Interface_Event_event_controller_msg_out_test_sequence {
    Interface_Event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_choice {
    Named_Function_Event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_optional {
    Named_Function_Event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_in_test_sequence {
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Named_Function_Event_event_actuator_msg_out {
    Named_Function_Event_event_actuator_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_in {
    Named_Function_Event_event_controller_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out_test_choice {
    Named_Function_Event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_optional {
    Named_Function_Event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Named_Function_Event_event_controller_msg_out_test_sequence {
    Named_Function_Event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_choice {
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_optional {
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_in_test_sequence {
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Observable_Event_input_event_event_actuator_msg_out {
    Observable_Event_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_in {
    Observable_Event_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_choice {
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_optional {
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Observable_Event_input_event_event_controller_msg_out_test_sequence {
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_choice {
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_optional {
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_in_test_sequence {
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Observable_Event_output_event_event_actuator_msg_out {
    Observable_Event_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_in {
    Observable_Event_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_choice {
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_optional {
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef Observable_Event_output_event_event_controller_msg_out_test_sequence {
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_choice {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_optional {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence {
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_out {
    Observable_Event_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_in {
    Observable_Event_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_choice {
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_optional {
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1 p1;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_test_sequence {
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_in {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_out {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_in {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_controller {
    System_State_controller_state state;
    System_State_controller_init_done init_done;
    System_State_controller_sender sender;
    System_State_controller_param_integer param_integer;
    System_State_controller_param_sequence param_sequence;
    System_State_controller_param_choice param_choice;
    System_State_controller_param_array param_array;
    System_State_controller_param_optional param_optional;
    System_State_controller_reached reached;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_out {
    System_State_controller_queue_elem_input_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_in {
    System_State_controller_queue_elem_input_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_out {
    System_State_controller_queue_elem_output_event_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_in {
    System_State_controller_queue_elem_output_event_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1 p1;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1 p1;
}

typedef Actuator_Event_msg_in_data {
    Actuator_Event_msg_in_input_none input_none;
    Actuator_Event_msg_in_test_array test_array;
    Actuator_Event_msg_in_test_choice test_choice;
    Actuator_Event_msg_in_test_integer test_integer;
    Actuator_Event_msg_in_test_optional test_optional;
    Actuator_Event_msg_in_test_sequence test_sequence;
}

typedef Controller_Event_msg_out_data {
    Controller_Event_msg_out_test_array test_array;
    Controller_Event_msg_out_test_choice test_choice;
    Controller_Event_msg_out_test_integer test_integer;
    Controller_Event_msg_out_test_optional test_optional;
    Controller_Event_msg_out_test_sequence test_sequence;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in_data {
    Events_Ty_elem_input_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array test_array;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice test_choice;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_integer test_integer;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional test_optional;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out_data {
    Events_Ty_elem_input_event_event_controller_msg_out_test_array test_array;
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice test_choice;
    Events_Ty_elem_input_event_event_controller_msg_out_test_integer test_integer;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional test_optional;
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in_data {
    Events_Ty_elem_output_event_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array test_array;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice test_choice;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_integer test_integer;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional test_optional;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out_data {
    Events_Ty_elem_output_event_event_controller_msg_out_test_array test_array;
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice test_choice;
    Events_Ty_elem_output_event_event_controller_msg_out_test_integer test_integer;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional test_optional;
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array test_array;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice test_choice;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer test_integer;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional test_optional;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array test_array;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice test_choice;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer test_integer;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional test_optional;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence test_sequence;
}

typedef Function_Event_actuator_msg_in_data {
    Function_Event_actuator_msg_in_input_none input_none;
    Function_Event_actuator_msg_in_test_array test_array;
    Function_Event_actuator_msg_in_test_choice test_choice;
    Function_Event_actuator_msg_in_test_integer test_integer;
    Function_Event_actuator_msg_in_test_optional test_optional;
    Function_Event_actuator_msg_in_test_sequence test_sequence;
}

typedef Function_Event_controller_msg_out_data {
    Function_Event_controller_msg_out_test_array test_array;
    Function_Event_controller_msg_out_test_choice test_choice;
    Function_Event_controller_msg_out_test_integer test_integer;
    Function_Event_controller_msg_out_test_optional test_optional;
    Function_Event_controller_msg_out_test_sequence test_sequence;
}

typedef Interface_Event_event_actuator_msg_in_data {
    Interface_Event_event_actuator_msg_in_input_none input_none;
    Interface_Event_event_actuator_msg_in_test_array test_array;
    Interface_Event_event_actuator_msg_in_test_choice test_choice;
    Interface_Event_event_actuator_msg_in_test_integer test_integer;
    Interface_Event_event_actuator_msg_in_test_optional test_optional;
    Interface_Event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Interface_Event_event_controller_msg_out_data {
    Interface_Event_event_controller_msg_out_test_array test_array;
    Interface_Event_event_controller_msg_out_test_choice test_choice;
    Interface_Event_event_controller_msg_out_test_integer test_integer;
    Interface_Event_event_controller_msg_out_test_optional test_optional;
    Interface_Event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Named_Function_Event_event_actuator_msg_in_data {
    Named_Function_Event_event_actuator_msg_in_input_none input_none;
    Named_Function_Event_event_actuator_msg_in_test_array test_array;
    Named_Function_Event_event_actuator_msg_in_test_choice test_choice;
    Named_Function_Event_event_actuator_msg_in_test_integer test_integer;
    Named_Function_Event_event_actuator_msg_in_test_optional test_optional;
    Named_Function_Event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Named_Function_Event_event_controller_msg_out_data {
    Named_Function_Event_event_controller_msg_out_test_array test_array;
    Named_Function_Event_event_controller_msg_out_test_choice test_choice;
    Named_Function_Event_event_controller_msg_out_test_integer test_integer;
    Named_Function_Event_event_controller_msg_out_test_optional test_optional;
    Named_Function_Event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Observable_Event_input_event_event_actuator_msg_in_data {
    Observable_Event_input_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_input_event_event_actuator_msg_in_test_array test_array;
    Observable_Event_input_event_event_actuator_msg_in_test_choice test_choice;
    Observable_Event_input_event_event_actuator_msg_in_test_integer test_integer;
    Observable_Event_input_event_event_actuator_msg_in_test_optional test_optional;
    Observable_Event_input_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Observable_Event_input_event_event_controller_msg_out_data {
    Observable_Event_input_event_event_controller_msg_out_test_array test_array;
    Observable_Event_input_event_event_controller_msg_out_test_choice test_choice;
    Observable_Event_input_event_event_controller_msg_out_test_integer test_integer;
    Observable_Event_input_event_event_controller_msg_out_test_optional test_optional;
    Observable_Event_input_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Observable_Event_output_event_event_actuator_msg_in_data {
    Observable_Event_output_event_event_actuator_msg_in_input_none input_none;
    Observable_Event_output_event_event_actuator_msg_in_test_array test_array;
    Observable_Event_output_event_event_actuator_msg_in_test_choice test_choice;
    Observable_Event_output_event_event_actuator_msg_in_test_integer test_integer;
    Observable_Event_output_event_event_actuator_msg_in_test_optional test_optional;
    Observable_Event_output_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Observable_Event_output_event_event_controller_msg_out_data {
    Observable_Event_output_event_event_controller_msg_out_test_array test_array;
    Observable_Event_output_event_event_controller_msg_out_test_choice test_choice;
    Observable_Event_output_event_event_controller_msg_out_test_integer test_integer;
    Observable_Event_output_event_event_controller_msg_out_test_optional test_optional;
    Observable_Event_output_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in_data {
    Observable_Event_unhandled_input_event_actuator_msg_in_input_none input_none;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array test_array;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice test_choice;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_integer test_integer;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional test_optional;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence test_sequence;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out_data {
    Observable_Event_unhandled_input_event_controller_msg_out_test_array test_array;
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice test_choice;
    Observable_Event_unhandled_input_event_controller_msg_out_test_integer test_integer;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional test_optional;
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array test_array;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice test_choice;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer test_integer;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional test_optional;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array test_array;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice test_choice;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer test_integer;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional test_optional;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array test_array;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice test_choice;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer test_integer;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional test_optional;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array test_array;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice test_choice;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer test_integer;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional test_optional;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array test_array;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice test_choice;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer test_integer;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional test_optional;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array test_array;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice test_choice;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer test_integer;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional test_optional;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array test_array;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice test_choice;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer test_integer;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional test_optional;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array test_array;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice test_choice;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer test_integer;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional test_optional;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array test_array;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice test_choice;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer test_integer;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional test_optional;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array test_array;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice test_choice;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer test_integer;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional test_optional;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none input_none;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array test_array;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice test_choice;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer test_integer;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional test_optional;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence test_sequence;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array test_array;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice test_choice;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer test_integer;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional test_optional;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence test_sequence;
}

typedef Actuator_Event_msg_in {
    Actuator_Event_msg_in_data data;
    int selection;
}

typedef Controller_Event_msg_out {
    Controller_Event_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator_msg_in {
    Events_Ty_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller_msg_out {
    Events_Ty_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_actuator_msg_in {
    Events_Ty_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller_msg_out {
    Events_Ty_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_msg_in {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller_msg_out {
    Events_Ty_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Function_Event_actuator_msg_in {
    Function_Event_actuator_msg_in_data data;
    int selection;
}

typedef Function_Event_controller_msg_out {
    Function_Event_controller_msg_out_data data;
    int selection;
}

typedef Interface_Event_event_actuator_msg_in {
    Interface_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Interface_Event_event_controller_msg_out {
    Interface_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Named_Function_Event_event_actuator_msg_in {
    Named_Function_Event_event_actuator_msg_in_data data;
    int selection;
}

typedef Named_Function_Event_event_controller_msg_out {
    Named_Function_Event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_input_event_event_actuator_msg_in {
    Observable_Event_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller_msg_out {
    Observable_Event_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_output_event_event_actuator_msg_in {
    Observable_Event_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller_msg_out {
    Observable_Event_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_actuator_msg_in {
    Observable_Event_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller_msg_out {
    Observable_Event_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_msg_out {
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_msg_in {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_msg_out {
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_msg_in {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller_msg_out {
    System_State_controller_queue_elem_input_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_msg_in {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller_msg_out {
    System_State_controller_queue_elem_output_event_event_controller_msg_out_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_msg_out {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_data data;
    int selection;
}

typedef Actuator_Event_data {
    Actuator_Event_msg_in msg_in;
    Actuator_Event_msg_out msg_out;
}

typedef Controller_Event_data {
    Controller_Event_msg_in msg_in;
    Controller_Event_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_actuator_data {
    Events_Ty_elem_input_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_input_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_input_event_event_controller_data {
    Events_Ty_elem_input_event_event_controller_msg_in msg_in;
    Events_Ty_elem_input_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_actuator_data {
    Events_Ty_elem_output_event_event_actuator_msg_in msg_in;
    Events_Ty_elem_output_event_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_output_event_event_controller_data {
    Events_Ty_elem_output_event_event_controller_msg_in msg_in;
    Events_Ty_elem_output_event_event_controller_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_actuator_data {
    Events_Ty_elem_unhandled_input_event_actuator_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Events_Ty_elem_unhandled_input_event_controller_data {
    Events_Ty_elem_unhandled_input_event_controller_msg_in msg_in;
    Events_Ty_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Function_Event_actuator_data {
    Function_Event_actuator_msg_in msg_in;
    Function_Event_actuator_msg_out msg_out;
}

typedef Function_Event_controller_data {
    Function_Event_controller_msg_in msg_in;
    Function_Event_controller_msg_out msg_out;
}

typedef Interface_Event_event_actuator_data {
    Interface_Event_event_actuator_msg_in msg_in;
    Interface_Event_event_actuator_msg_out msg_out;
}

typedef Interface_Event_event_controller_data {
    Interface_Event_event_controller_msg_in msg_in;
    Interface_Event_event_controller_msg_out msg_out;
}

typedef Named_Function_Event_event_actuator_data {
    Named_Function_Event_event_actuator_msg_in msg_in;
    Named_Function_Event_event_actuator_msg_out msg_out;
}

typedef Named_Function_Event_event_controller_data {
    Named_Function_Event_event_controller_msg_in msg_in;
    Named_Function_Event_event_controller_msg_out msg_out;
}

typedef Observable_Event_input_event_event_actuator_data {
    Observable_Event_input_event_event_actuator_msg_in msg_in;
    Observable_Event_input_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_input_event_event_controller_data {
    Observable_Event_input_event_event_controller_msg_in msg_in;
    Observable_Event_input_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_output_event_event_actuator_data {
    Observable_Event_output_event_event_actuator_msg_in msg_in;
    Observable_Event_output_event_event_actuator_msg_out msg_out;
}

typedef Observable_Event_output_event_event_controller_data {
    Observable_Event_output_event_event_controller_msg_in msg_in;
    Observable_Event_output_event_event_controller_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_actuator_data {
    Observable_Event_unhandled_input_event_actuator_msg_in msg_in;
    Observable_Event_unhandled_input_event_actuator_msg_out msg_out;
}

typedef Observable_Event_unhandled_input_event_controller_data {
    Observable_Event_unhandled_input_event_controller_msg_in msg_in;
    Observable_Event_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator_data {
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_input_event_event_controller_data {
    System_State_actuator_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator_data {
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_output_event_event_controller_data {
    System_State_actuator_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller_data {
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_actuator_data {
    System_State_controller_queue_elem_input_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_input_event_event_controller_data {
    System_State_controller_queue_elem_input_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_input_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_actuator_data {
    System_State_controller_queue_elem_output_event_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_output_event_event_controller_data {
    System_State_controller_queue_elem_output_event_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_output_event_event_controller_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out msg_out;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller_data {
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_in msg_in;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out msg_out;
}

typedef Actuator_Event {
    Actuator_Event_data data;
    int selection;
}

typedef Controller_Event {
    Controller_Event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_actuator {
    Events_Ty_elem_input_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_controller {
    Events_Ty_elem_input_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_input_event_event_data {
    Events_Ty_elem_input_event_event_actuator actuator;
    Events_Ty_elem_input_event_event_controller controller;
}

typedef Events_Ty_elem_output_event_event_actuator {
    Events_Ty_elem_output_event_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_controller {
    Events_Ty_elem_output_event_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event_data {
    Events_Ty_elem_output_event_event_actuator actuator;
    Events_Ty_elem_output_event_event_controller controller;
}

typedef Events_Ty_elem_unhandled_input_event_actuator {
    Events_Ty_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_controller {
    Events_Ty_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event_data {
    Events_Ty_elem_unhandled_input_event_actuator actuator;
    Events_Ty_elem_unhandled_input_event_controller controller;
}

typedef Function_Event_actuator {
    Function_Event_actuator_data data;
    int selection;
}

typedef Function_Event_controller {
    Function_Event_controller_data data;
    int selection;
}

typedef Function_Event_data {
    Function_Event_actuator actuator;
    Function_Event_controller controller;
}

typedef Interface_Event_event_actuator {
    Interface_Event_event_actuator_data data;
    int selection;
}

typedef Interface_Event_event_controller {
    Interface_Event_event_controller_data data;
    int selection;
}

typedef Interface_Event_event_data {
    Interface_Event_event_actuator actuator;
    Interface_Event_event_controller controller;
}

typedef Named_Function_Event_event_actuator {
    Named_Function_Event_event_actuator_data data;
    int selection;
}

typedef Named_Function_Event_event_controller {
    Named_Function_Event_event_controller_data data;
    int selection;
}

typedef Named_Function_Event_event_data {
    Named_Function_Event_event_actuator actuator;
    Named_Function_Event_event_controller controller;
}

typedef Observable_Event_input_event_event_actuator {
    Observable_Event_input_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_input_event_event_controller {
    Observable_Event_input_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_input_event_event_data {
    Observable_Event_input_event_event_actuator actuator;
    Observable_Event_input_event_event_controller controller;
}

typedef Observable_Event_output_event_event_actuator {
    Observable_Event_output_event_event_actuator_data data;
    int selection;
}

typedef Observable_Event_output_event_event_controller {
    Observable_Event_output_event_event_controller_data data;
    int selection;
}

typedef Observable_Event_output_event_event_data {
    Observable_Event_output_event_event_actuator actuator;
    Observable_Event_output_event_event_controller controller;
}

typedef Observable_Event_unhandled_input_event_actuator {
    Observable_Event_unhandled_input_event_actuator_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_controller {
    Observable_Event_unhandled_input_event_controller_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event_data {
    Observable_Event_unhandled_input_event_actuator actuator;
    Observable_Event_unhandled_input_event_controller controller;
}

typedef System_State_actuator_queue_elem_input_event_event_actuator {
    System_State_actuator_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_controller {
    System_State_actuator_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event_data {
    System_State_actuator_queue_elem_input_event_event_actuator actuator;
    System_State_actuator_queue_elem_input_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_output_event_event_actuator {
    System_State_actuator_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_controller {
    System_State_actuator_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event_data {
    System_State_actuator_queue_elem_output_event_event_actuator actuator;
    System_State_actuator_queue_elem_output_event_event_controller controller;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_actuator {
    System_State_actuator_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_controller {
    System_State_actuator_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event_data {
    System_State_actuator_queue_elem_unhandled_input_event_actuator actuator;
    System_State_actuator_queue_elem_unhandled_input_event_controller controller;
}

typedef System_State_controller_queue_elem_input_event_event_actuator {
    System_State_controller_queue_elem_input_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_controller {
    System_State_controller_queue_elem_input_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event_data {
    System_State_controller_queue_elem_input_event_event_actuator actuator;
    System_State_controller_queue_elem_input_event_event_controller controller;
}

typedef System_State_controller_queue_elem_output_event_event_actuator {
    System_State_controller_queue_elem_output_event_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_controller {
    System_State_controller_queue_elem_output_event_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event_data {
    System_State_controller_queue_elem_output_event_event_actuator actuator;
    System_State_controller_queue_elem_output_event_event_controller controller;
}

typedef System_State_controller_queue_elem_unhandled_input_event_actuator {
    System_State_controller_queue_elem_unhandled_input_event_actuator_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_controller {
    System_State_controller_queue_elem_unhandled_input_event_controller_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event_data {
    System_State_controller_queue_elem_unhandled_input_event_actuator actuator;
    System_State_controller_queue_elem_unhandled_input_event_controller controller;
}

typedef Events_Ty_elem_input_event_event {
    Events_Ty_elem_input_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_output_event_event {
    Events_Ty_elem_output_event_event_data data;
    int selection;
}

typedef Events_Ty_elem_unhandled_input_event {
    Events_Ty_elem_unhandled_input_event_data data;
    int selection;
}

typedef Function_Event {
    Function_Event_data data;
    int selection;
}

typedef Interface_Event_event {
    Interface_Event_event_data data;
    int selection;
}

typedef Named_Function_Event_event {
    Named_Function_Event_event_data data;
    int selection;
}

typedef Observable_Event_input_event_event {
    Observable_Event_input_event_event_data data;
    int selection;
}

typedef Observable_Event_output_event_event {
    Observable_Event_output_event_event_data data;
    int selection;
}

typedef Observable_Event_unhandled_input_event {
    Observable_Event_unhandled_input_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_input_event_event {
    System_State_actuator_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_output_event_event {
    System_State_actuator_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem_unhandled_input_event {
    System_State_actuator_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_input_event_event {
    System_State_controller_queue_elem_input_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_output_event_event {
    System_State_controller_queue_elem_output_event_event_data data;
    int selection;
}

typedef System_State_controller_queue_elem_unhandled_input_event {
    System_State_controller_queue_elem_unhandled_input_event_data data;
    int selection;
}

typedef Events_Ty_elem_input_event {
    Events_Ty_elem_input_event_source source;
    Events_Ty_elem_input_event_dest dest;
    Events_Ty_elem_input_event_event event;
}

typedef Events_Ty_elem_output_event {
    Events_Ty_elem_output_event_source source;
    Events_Ty_elem_output_event_dest dest;
    Events_Ty_elem_output_event_event event;
}

typedef Events_Ty_elem_unhandled_input {
    Events_Ty_elem_unhandled_input_source source;
    Events_Ty_elem_unhandled_input_dest dest;
    Events_Ty_elem_unhandled_input_event event;
}

typedef Interface_Event {
    Interface_Event_source source;
    Interface_Event_dest dest;
    Interface_Event_event event;
}

typedef Named_Function_Event {
    Named_Function_Event_id id;
    Named_Function_Event_event event;
}

typedef Observable_Event_input_event {
    Observable_Event_input_event_source source;
    Observable_Event_input_event_dest dest;
    Observable_Event_input_event_event event;
}

typedef Observable_Event_output_event {
    Observable_Event_output_event_source source;
    Observable_Event_output_event_dest dest;
    Observable_Event_output_event_event event;
}

typedef Observable_Event_unhandled_input {
    Observable_Event_unhandled_input_source source;
    Observable_Event_unhandled_input_dest dest;
    Observable_Event_unhandled_input_event event;
}

typedef System_State_actuator_queue_elem_input_event {
    System_State_actuator_queue_elem_input_event_source source;
    System_State_actuator_queue_elem_input_event_dest dest;
    System_State_actuator_queue_elem_input_event_event event;
}

typedef System_State_actuator_queue_elem_output_event {
    System_State_actuator_queue_elem_output_event_source source;
    System_State_actuator_queue_elem_output_event_dest dest;
    System_State_actuator_queue_elem_output_event_event event;
}

typedef System_State_actuator_queue_elem_unhandled_input {
    System_State_actuator_queue_elem_unhandled_input_source source;
    System_State_actuator_queue_elem_unhandled_input_dest dest;
    System_State_actuator_queue_elem_unhandled_input_event event;
}

typedef System_State_controller_queue_elem_input_event {
    System_State_controller_queue_elem_input_event_source source;
    System_State_controller_queue_elem_input_event_dest dest;
    System_State_controller_queue_elem_input_event_event event;
}

typedef System_State_controller_queue_elem_output_event {
    System_State_controller_queue_elem_output_event_source source;
    System_State_controller_queue_elem_output_event_dest dest;
    System_State_controller_queue_elem_output_event_event event;
}

typedef System_State_controller_queue_elem_unhandled_input {
    System_State_controller_queue_elem_unhandled_input_source source;
    System_State_controller_queue_elem_unhandled_input_dest dest;
    System_State_controller_queue_elem_unhandled_input_event event;
}

typedef Events_Ty_elem_data {
    Events_Ty_elem_no_event no_event;
    Events_Ty_elem_system_startup system_startup;
    Events_Ty_elem_input_event input_event;
    Events_Ty_elem_output_event output_event;
    Events_Ty_elem_unhandled_input unhandled_input;
}

typedef Observable_Event_data {
    Observable_Event_no_event no_event;
    Observable_Event_system_startup system_startup;
    Observable_Event_input_event input_event;
    Observable_Event_output_event output_event;
    Observable_Event_unhandled_input unhandled_input;
}

typedef System_State_actuator_queue_elem_data {
    System_State_actuator_queue_elem_no_event no_event;
    System_State_actuator_queue_elem_system_startup system_startup;
    System_State_actuator_queue_elem_input_event input_event;
    System_State_actuator_queue_elem_output_event output_event;
    System_State_actuator_queue_elem_unhandled_input unhandled_input;
}

typedef System_State_controller_queue_elem_data {
    System_State_controller_queue_elem_no_event no_event;
    System_State_controller_queue_elem_system_startup system_startup;
    System_State_controller_queue_elem_input_event input_event;
    System_State_controller_queue_elem_output_event output_event;
    System_State_controller_queue_elem_unhandled_input unhandled_input;
}

typedef Events_Ty_elem {
    Events_Ty_elem_data data;
    int selection;
}

typedef Observable_Event {
    Observable_Event_data data;
    int selection;
}

typedef System_State_actuator_queue_elem {
    System_State_actuator_queue_elem_data data;
    int selection;
}

typedef System_State_controller_queue_elem {
    System_State_controller_queue_elem_data data;
    int selection;
}

typedef Events_Ty {
    Events_Ty_elem data[10];
    int length;
}

typedef System_State_actuator_queue {
    System_State_actuator_queue_elem data[2];
    int length;
}

typedef System_State_controller_queue {
    System_State_controller_queue_elem data[2];
    int length;
}

typedef System_State {
    System_State_timers timers;
    System_State_actuator_queue actuator_queue;
    System_State_controller_queue controller_queue;
    System_State_actuator actuator;
    System_State_controller controller;
}

Observable_Event nothing;
inline Actuator_States_assign_value(dst, src)
{
    dst = src;
    Actuator_States_range_check(dst);
}
inline Actuator_States_range_check(Actuator_States_vc)
{
    assert((Actuator_States_vc == Actuator_States_wait));
}
inline Actuator_Context_state_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_state_range_check(dst);
}
inline Actuator_Context_state_range_check(Actuator_Context_state_vc)
{
    assert((Actuator_Context_state_vc == Actuator_Context_state_wait));
}
inline Actuator_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_init_done_range_check(dst);
}
inline Actuator_Context_init_done_range_check(Actuator_Context_init_done_vc)
{
    assert(true);
}
inline Actuator_Context_sender_assign_value(dst, src)
{
    dst = src;
    Actuator_Context_sender_range_check(dst);
}
inline Actuator_Context_sender_range_check(Actuator_Context_sender_vc)
{
    assert((((Actuator_Context_sender_vc == Actuator_Context_sender_actuator) || (Actuator_Context_sender_vc == Actuator_Context_sender_controller)) || (Actuator_Context_sender_vc == Actuator_Context_sender_env)));
}
inline Actuator_Context_assign_value(dst, src)
{
    Actuator_Context_state_assign_value(dst.state, src.state);
    Actuator_Context_init_done_assign_value(dst.init_done, src.init_done);
    Actuator_Context_sender_assign_value(dst.sender, src.sender);
}
inline Actuator_Mychoicedatatype_Selection_assign_value(dst, src)
{
    dst = src;
    Actuator_Mychoicedatatype_Selection_range_check(dst);
}
inline Actuator_Mychoicedatatype_Selection_range_check(Actuator_Mychoicedatatype_Selection_vc)
{
    assert(((Actuator_Mychoicedatatype_Selection_vc == Actuator_Mychoicedatatype_Selection_first_present) || (Actuator_Mychoicedatatype_Selection_vc == Actuator_Mychoicedatatype_Selection_second_present)));
}
inline Controller_States_assign_value(dst, src)
{
    dst = src;
    Controller_States_range_check(dst);
}
inline Controller_States_range_check(Controller_States_vc)
{
    assert((((((Controller_States_vc == Controller_States_aftersequence) || (Controller_States_vc == Controller_States_afteroptional)) || (Controller_States_vc == Controller_States_afterchoice)) || (Controller_States_vc == Controller_States_afterinteger)) || (Controller_States_vc == Controller_States_afterarray)));
}
inline Controller_Context_state_assign_value(dst, src)
{
    dst = src;
    Controller_Context_state_range_check(dst);
}
inline Controller_Context_state_range_check(Controller_Context_state_vc)
{
    assert((((((Controller_Context_state_vc == Controller_Context_state_aftersequence) || (Controller_Context_state_vc == Controller_Context_state_afteroptional)) || (Controller_Context_state_vc == Controller_Context_state_afterchoice)) || (Controller_Context_state_vc == Controller_Context_state_afterinteger)) || (Controller_Context_state_vc == Controller_Context_state_afterarray)));
}
inline Controller_Context_init_done_assign_value(dst, src)
{
    dst = src;
    Controller_Context_init_done_range_check(dst);
}
inline Controller_Context_init_done_range_check(Controller_Context_init_done_vc)
{
    assert(true);
}
inline Controller_Context_sender_assign_value(dst, src)
{
    dst = src;
    Controller_Context_sender_range_check(dst);
}
inline Controller_Context_sender_range_check(Controller_Context_sender_vc)
{
    assert((((Controller_Context_sender_vc == Controller_Context_sender_actuator) || (Controller_Context_sender_vc == Controller_Context_sender_controller)) || (Controller_Context_sender_vc == Controller_Context_sender_env)));
}
inline Controller_Context_param_integer_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_integer_range_check(dst);
}
inline Controller_Context_param_integer_range_check(Controller_Context_param_integer_vc)
{
    assert(((Controller_Context_param_integer_vc >= 0) && (Controller_Context_param_integer_vc <= 10000)));
}
inline Controller_Context_param_sequence_x_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_sequence_x_range_check(dst);
}
inline Controller_Context_param_sequence_x_range_check(Controller_Context_param_sequence_x_vc)
{
    assert(((Controller_Context_param_sequence_x_vc >= 0) && (Controller_Context_param_sequence_x_vc <= 10000)));
}
inline Controller_Context_param_sequence_y_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_sequence_y_elem_range_check(dst);
}
inline Controller_Context_param_sequence_y_elem_range_check(Controller_Context_param_sequence_y_elem_vc)
{
    assert(((Controller_Context_param_sequence_y_elem_vc >= 0) && (Controller_Context_param_sequence_y_elem_vc <= 10000)));
}
inline Controller_Context_param_sequence_y_elem_init_value(dst)
{
    Controller_Context_param_sequence_y_elem_assign_value(dst, 0);
}
inline Controller_Context_param_sequence_y_assign_value(dst, src)
{
    int i_2;
    for(i_2 : 0 .. (src.length - 1))
    {
        Controller_Context_param_sequence_y_elem_assign_value(dst.data[i_2], src.data[i_2]);
    }
    for(i_2 : src.length .. 3)
    {
        Controller_Context_param_sequence_y_elem_init_value(dst.data[i_2]);
    }
    dst.length = src.length;
}
inline Controller_Context_param_sequence_y_size_check(Controller_Context_param_sequence_y_sc)
{
    assert(((Controller_Context_param_sequence_y_sc >= 0) && (Controller_Context_param_sequence_y_sc <= 4)));
}
inline Controller_Context_param_sequence_assign_value(dst, src)
{
    Controller_Context_param_sequence_x_assign_value(dst.x, src.x);
    Controller_Context_param_sequence_y_assign_value(dst.y, src.y);
}
inline Controller_Context_param_choice_first_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_choice_first_range_check(dst);
}
inline Controller_Context_param_choice_first_range_check(Controller_Context_param_choice_first_vc)
{
    assert(((Controller_Context_param_choice_first_vc >= 0) && (Controller_Context_param_choice_first_vc <= 10000)));
}
inline Controller_Context_param_choice_second_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_choice_second_range_check(dst);
}
inline Controller_Context_param_choice_second_range_check(Controller_Context_param_choice_second_vc)
{
    assert(((Controller_Context_param_choice_second_vc >= 0) && (Controller_Context_param_choice_second_vc <= 10000)));
}
inline Controller_Context_param_choice_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Context_param_choice_first_PRESENT);
        Controller_Context_param_choice_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Controller_Context_param_choice_second_PRESENT);
        Controller_Context_param_choice_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Controller_context_param_choice_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Context_param_array_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_array_elem_range_check(dst);
}
inline Controller_Context_param_array_elem_range_check(Controller_Context_param_array_elem_vc)
{
    assert(((Controller_Context_param_array_elem_vc >= 0) && (Controller_Context_param_array_elem_vc <= 10000)));
}
inline Controller_Context_param_array_elem_init_value(dst)
{
    Controller_Context_param_array_elem_assign_value(dst, 0);
}
inline Controller_Context_param_array_assign_value(dst, src)
{
    int i_1;
    for(i_1 : 0 .. (src.length - 1))
    {
        Controller_Context_param_array_elem_assign_value(dst.data[i_1], src.data[i_1]);
    }
    for(i_1 : src.length .. 2)
    {
        Controller_Context_param_array_elem_init_value(dst.data[i_1]);
    }
    dst.length = src.length;
}
inline Controller_Context_param_array_size_check(Controller_Context_param_array_sc)
{
    assert(((Controller_Context_param_array_sc >= 1) && (Controller_Context_param_array_sc <= 3)));
}
inline Controller_Context_param_optional_a_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_optional_a_range_check(dst);
}
inline Controller_Context_param_optional_a_range_check(Controller_Context_param_optional_a_vc)
{
    assert(((Controller_Context_param_optional_a_vc >= 0) && (Controller_Context_param_optional_a_vc <= 10000)));
}
inline Controller_Context_param_optional_b_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_optional_b_range_check(dst);
}
inline Controller_Context_param_optional_b_range_check(Controller_Context_param_optional_b_vc)
{
    assert(((Controller_Context_param_optional_b_vc >= 0) && (Controller_Context_param_optional_b_vc <= 10000)));
}
inline Controller_Context_param_optional_c_assign_value(dst, src)
{
    dst = src;
    Controller_Context_param_optional_c_range_check(dst);
}
inline Controller_Context_param_optional_c_range_check(Controller_Context_param_optional_c_vc)
{
    assert(((Controller_Context_param_optional_c_vc >= 0) && (Controller_Context_param_optional_c_vc <= 10000)));
}
inline Controller_Context_param_optional_assign_value(dst, src)
{
    Controller_Context_param_optional_a_assign_value(dst.a, src.a);
    Controller_Context_param_optional_b_assign_value(dst.b, src.b);
    Controller_Context_param_optional_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Controller_Context_reached_assign_value(dst, src)
{
    dst = src;
    Controller_Context_reached_range_check(dst);
}
inline Controller_Context_reached_range_check(Controller_Context_reached_vc)
{
    assert(((Controller_Context_reached_vc >= 0) && (Controller_Context_reached_vc <= 10000)));
}
inline Controller_Context_assign_value(dst, src)
{
    Controller_Context_state_assign_value(dst.state, src.state);
    Controller_Context_init_done_assign_value(dst.init_done, src.init_done);
    Controller_Context_sender_assign_value(dst.sender, src.sender);
    Controller_Context_param_integer_assign_value(dst.param_integer, src.param_integer);
    Controller_Context_param_sequence_assign_value(dst.param_sequence, src.param_sequence);
    Controller_Context_param_choice_assign_value(dst.param_choice, src.param_choice);
    Controller_Context_param_array_assign_value(dst.param_array, src.param_array);
    Controller_Context_param_optional_assign_value(dst.param_optional, src.param_optional);
    Controller_Context_reached_assign_value(dst.reached, src.reached);
}
inline Controller_Mychoicedatatype_Selection_assign_value(dst, src)
{
    dst = src;
    Controller_Mychoicedatatype_Selection_range_check(dst);
}
inline Controller_Mychoicedatatype_Selection_range_check(Controller_Mychoicedatatype_Selection_vc)
{
    assert(((Controller_Mychoicedatatype_Selection_vc == Controller_Mychoicedatatype_Selection_first_present) || (Controller_Mychoicedatatype_Selection_vc == Controller_Mychoicedatatype_Selection_second_present)));
}
inline MyInteger_assign_value(dst, src)
{
    dst = src;
    MyInteger_range_check(dst);
}
inline MyInteger_range_check(MyInteger_vc)
{
    assert(((MyInteger_vc >= 0) && (MyInteger_vc <= 10000)));
}
inline MySequenceDataType_x_assign_value(dst, src)
{
    dst = src;
    MySequenceDataType_x_range_check(dst);
}
inline MySequenceDataType_x_range_check(MySequenceDataType_x_vc)
{
    assert(((MySequenceDataType_x_vc >= 0) && (MySequenceDataType_x_vc <= 10000)));
}
inline MySequenceDataType_y_elem_assign_value(dst, src)
{
    dst = src;
    MySequenceDataType_y_elem_range_check(dst);
}
inline MySequenceDataType_y_elem_range_check(MySequenceDataType_y_elem_vc)
{
    assert(((MySequenceDataType_y_elem_vc >= 0) && (MySequenceDataType_y_elem_vc <= 10000)));
}
inline MySequenceDataType_y_elem_init_value(dst)
{
    MySequenceDataType_y_elem_assign_value(dst, 0);
}
inline MySequenceDataType_y_assign_value(dst, src)
{
    int i_1;
    for(i_1 : 0 .. (src.length - 1))
    {
        MySequenceDataType_y_elem_assign_value(dst.data[i_1], src.data[i_1]);
    }
    for(i_1 : src.length .. 3)
    {
        MySequenceDataType_y_elem_init_value(dst.data[i_1]);
    }
    dst.length = src.length;
}
inline MySequenceDataType_y_size_check(MySequenceDataType_y_sc)
{
    assert(((MySequenceDataType_y_sc >= 0) && (MySequenceDataType_y_sc <= 4)));
}
inline MySequenceDataType_assign_value(dst, src)
{
    MySequenceDataType_x_assign_value(dst.x, src.x);
    MySequenceDataType_y_assign_value(dst.y, src.y);
}
inline MyChoiceDataType_first_assign_value(dst, src)
{
    dst = src;
    MyChoiceDataType_first_range_check(dst);
}
inline MyChoiceDataType_first_range_check(MyChoiceDataType_first_vc)
{
    assert(((MyChoiceDataType_first_vc >= 0) && (MyChoiceDataType_first_vc <= 10000)));
}
inline MyChoiceDataType_second_assign_value(dst, src)
{
    dst = src;
    MyChoiceDataType_second_range_check(dst);
}
inline MyChoiceDataType_second_range_check(MyChoiceDataType_second_vc)
{
    assert(((MyChoiceDataType_second_vc >= 0) && (MyChoiceDataType_second_vc <= 10000)));
}
inline MyChoiceDataType_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == MyChoiceDataType_first_PRESENT);
        MyChoiceDataType_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == MyChoiceDataType_second_PRESENT);
        MyChoiceDataType_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Mychoicedatatype_selection_assign_value(dst, src)
{
    dst = src;
}
inline MyArrayDataType_elem_assign_value(dst, src)
{
    dst = src;
    MyArrayDataType_elem_range_check(dst);
}
inline MyArrayDataType_elem_range_check(MyArrayDataType_elem_vc)
{
    assert(((MyArrayDataType_elem_vc >= 0) && (MyArrayDataType_elem_vc <= 10000)));
}
inline MyArrayDataType_elem_init_value(dst)
{
    MyArrayDataType_elem_assign_value(dst, 0);
}
inline MyArrayDataType_assign_value(dst, src)
{
    int i_0;
    for(i_0 : 0 .. (src.length - 1))
    {
        MyArrayDataType_elem_assign_value(dst.data[i_0], src.data[i_0]);
    }
    for(i_0 : src.length .. 2)
    {
        MyArrayDataType_elem_init_value(dst.data[i_0]);
    }
    dst.length = src.length;
}
inline MyArrayDataType_size_check(MyArrayDataType_sc)
{
    assert(((MyArrayDataType_sc >= 1) && (MyArrayDataType_sc <= 3)));
}
inline MySequenceWithOptionalsDataType_a_assign_value(dst, src)
{
    dst = src;
    MySequenceWithOptionalsDataType_a_range_check(dst);
}
inline MySequenceWithOptionalsDataType_a_range_check(MySequenceWithOptionalsDataType_a_vc)
{
    assert(((MySequenceWithOptionalsDataType_a_vc >= 0) && (MySequenceWithOptionalsDataType_a_vc <= 10000)));
}
inline MySequenceWithOptionalsDataType_b_assign_value(dst, src)
{
    dst = src;
    MySequenceWithOptionalsDataType_b_range_check(dst);
}
inline MySequenceWithOptionalsDataType_b_range_check(MySequenceWithOptionalsDataType_b_vc)
{
    assert(((MySequenceWithOptionalsDataType_b_vc >= 0) && (MySequenceWithOptionalsDataType_b_vc <= 10000)));
}
inline MySequenceWithOptionalsDataType_c_assign_value(dst, src)
{
    dst = src;
    MySequenceWithOptionalsDataType_c_range_check(dst);
}
inline MySequenceWithOptionalsDataType_c_range_check(MySequenceWithOptionalsDataType_c_vc)
{
    assert(((MySequenceWithOptionalsDataType_c_vc >= 0) && (MySequenceWithOptionalsDataType_c_vc <= 10000)));
}
inline MySequenceWithOptionalsDataType_assign_value(dst, src)
{
    MySequenceWithOptionalsDataType_a_assign_value(dst.a, src.a);
    MySequenceWithOptionalsDataType_b_assign_value(dst.b, src.b);
    MySequenceWithOptionalsDataType_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline T_Int32_assign_value(dst, src)
{
    dst = src;
    T_Int32_range_check(dst);
}
inline T_Int32_range_check(T_Int32_vc)
{
    assert(((T_Int32_vc >= -2147483648) && (T_Int32_vc <= 2147483647)));
}
inline T_UInt32_assign_value(dst, src)
{
    dst = src;
    T_UInt32_range_check(dst);
}
inline T_UInt32_range_check(T_UInt32_vc)
{
    assert(((T_UInt32_vc >= 0) && (T_UInt32_vc <= -1)));
}
inline T_Int8_assign_value(dst, src)
{
    dst = src;
    T_Int8_range_check(dst);
}
inline T_Int8_range_check(T_Int8_vc)
{
    assert(((T_Int8_vc >= -128) && (T_Int8_vc <= 127)));
}
inline T_UInt8_assign_value(dst, src)
{
    dst = src;
    T_UInt8_range_check(dst);
}
inline T_UInt8_range_check(T_UInt8_vc)
{
    assert(((T_UInt8_vc >= 0) && (T_UInt8_vc <= 255)));
}
inline T_Boolean_assign_value(dst, src)
{
    dst = src;
    T_Boolean_range_check(dst);
}
inline T_Boolean_range_check(T_Boolean_vc)
{
    assert(true);
}
inline T_Null_Record_assign_value(dst, src)
{
    skip;
}
inline PID_Range_assign_value(dst, src)
{
    dst = src;
    PID_Range_range_check(dst);
}
inline PID_Range_range_check(PID_Range_vc)
{
    assert(((PID_Range_vc >= 0) && (PID_Range_vc <= 2)));
}
inline PID_assign_value(dst, src)
{
    dst = src;
    PID_range_check(dst);
}
inline PID_range_check(PID_vc)
{
    assert((((PID_vc == PID_actuator) || (PID_vc == PID_controller)) || (PID_vc == PID_env)));
}
inline Actuator_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_array_p1_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_array_p1_elem_range_check(Actuator_Event_msg_in_test_array_p1_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_array_p1_elem_vc >= 0) && (Actuator_Event_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_array_p1_elem_init_value(dst)
{
    Actuator_Event_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Actuator_Event_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_3;
    for(i_3 : 0 .. (src.length - 1))
    {
        Actuator_Event_msg_in_test_array_p1_elem_assign_value(dst.data[i_3], src.data[i_3]);
    }
    for(i_3 : src.length .. 2)
    {
        Actuator_Event_msg_in_test_array_p1_elem_init_value(dst.data[i_3]);
    }
    dst.length = src.length;
}
inline Actuator_Event_msg_in_test_array_p1_size_check(Actuator_Event_msg_in_test_array_p1_sc)
{
    assert(((Actuator_Event_msg_in_test_array_p1_sc >= 1) && (Actuator_Event_msg_in_test_array_p1_sc <= 3)));
}
inline Actuator_Event_msg_in_test_array_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_choice_p1_first_range_check(dst);
}
inline Actuator_Event_msg_in_test_choice_p1_first_range_check(Actuator_Event_msg_in_test_choice_p1_first_vc)
{
    assert(((Actuator_Event_msg_in_test_choice_p1_first_vc >= 0) && (Actuator_Event_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_choice_p1_second_range_check(dst);
}
inline Actuator_Event_msg_in_test_choice_p1_second_range_check(Actuator_Event_msg_in_test_choice_p1_second_vc)
{
    assert(((Actuator_Event_msg_in_test_choice_p1_second_vc >= 0) && (Actuator_Event_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_test_choice_p1_first_PRESENT);
        Actuator_Event_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Actuator_Event_msg_in_test_choice_p1_second_PRESENT);
        Actuator_Event_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_in_test_choice_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_integer_p1_range_check(dst);
}
inline Actuator_Event_msg_in_test_integer_p1_range_check(Actuator_Event_msg_in_test_integer_p1_vc)
{
    assert(((Actuator_Event_msg_in_test_integer_p1_vc >= 0) && (Actuator_Event_msg_in_test_integer_p1_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_integer_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_optional_p1_a_range_check(dst);
}
inline Actuator_Event_msg_in_test_optional_p1_a_range_check(Actuator_Event_msg_in_test_optional_p1_a_vc)
{
    assert(((Actuator_Event_msg_in_test_optional_p1_a_vc >= 0) && (Actuator_Event_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_optional_p1_b_range_check(dst);
}
inline Actuator_Event_msg_in_test_optional_p1_b_range_check(Actuator_Event_msg_in_test_optional_p1_b_vc)
{
    assert(((Actuator_Event_msg_in_test_optional_p1_b_vc >= 0) && (Actuator_Event_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_optional_p1_c_range_check(dst);
}
inline Actuator_Event_msg_in_test_optional_p1_c_range_check(Actuator_Event_msg_in_test_optional_p1_c_vc)
{
    assert(((Actuator_Event_msg_in_test_optional_p1_c_vc >= 0) && (Actuator_Event_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_optional_p1_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Actuator_Event_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Actuator_Event_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Actuator_Event_msg_in_test_optional_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Actuator_Event_msg_in_test_sequence_p1_x_range_check(Actuator_Event_msg_in_test_sequence_p1_x_vc)
{
    assert(((Actuator_Event_msg_in_test_sequence_p1_x_vc >= 0) && (Actuator_Event_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Actuator_Event_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Actuator_Event_msg_in_test_sequence_p1_y_elem_range_check(Actuator_Event_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Actuator_Event_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Actuator_Event_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Actuator_Event_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Actuator_Event_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Actuator_Event_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_4;
    for(i_4 : 0 .. (src.length - 1))
    {
        Actuator_Event_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_4], src.data[i_4]);
    }
    for(i_4 : src.length .. 3)
    {
        Actuator_Event_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_4]);
    }
    dst.length = src.length;
}
inline Actuator_Event_msg_in_test_sequence_p1_y_size_check(Actuator_Event_msg_in_test_sequence_p1_y_sc)
{
    assert(((Actuator_Event_msg_in_test_sequence_p1_y_sc >= 0) && (Actuator_Event_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Actuator_Event_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Actuator_Event_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Actuator_Event_msg_in_test_sequence_assign_value(dst, src)
{
    Actuator_Event_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Actuator_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_input_none_PRESENT);
        Actuator_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Actuator_Event_msg_in_test_array_PRESENT);
        Actuator_Event_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Actuator_Event_msg_in_test_choice_PRESENT);
        Actuator_Event_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Actuator_Event_msg_in_test_integer_PRESENT);
        Actuator_Event_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Actuator_Event_msg_in_test_optional_PRESENT);
        Actuator_Event_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Actuator_Event_msg_in_test_sequence_PRESENT);
        Actuator_Event_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Actuator_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_out_result_PRESENT);
        Actuator_Event_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Actuator_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Actuator_Event_msg_in_PRESENT);
        Actuator_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Actuator_Event_msg_out_PRESENT);
        Actuator_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Actuator_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Controller_Event_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_input_none_PRESENT);
        Controller_Event_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Controller_Event_msg_in_result_PRESENT);
        Controller_Event_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_array_p1_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_array_p1_elem_range_check(Controller_Event_msg_out_test_array_p1_elem_vc)
{
    assert(((Controller_Event_msg_out_test_array_p1_elem_vc >= 0) && (Controller_Event_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_array_p1_elem_init_value(dst)
{
    Controller_Event_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Controller_Event_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_3;
    for(i_3 : 0 .. (src.length - 1))
    {
        Controller_Event_msg_out_test_array_p1_elem_assign_value(dst.data[i_3], src.data[i_3]);
    }
    for(i_3 : src.length .. 2)
    {
        Controller_Event_msg_out_test_array_p1_elem_init_value(dst.data[i_3]);
    }
    dst.length = src.length;
}
inline Controller_Event_msg_out_test_array_p1_size_check(Controller_Event_msg_out_test_array_p1_sc)
{
    assert(((Controller_Event_msg_out_test_array_p1_sc >= 1) && (Controller_Event_msg_out_test_array_p1_sc <= 3)));
}
inline Controller_Event_msg_out_test_array_assign_value(dst, src)
{
    Controller_Event_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_choice_p1_first_range_check(dst);
}
inline Controller_Event_msg_out_test_choice_p1_first_range_check(Controller_Event_msg_out_test_choice_p1_first_vc)
{
    assert(((Controller_Event_msg_out_test_choice_p1_first_vc >= 0) && (Controller_Event_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Controller_Event_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_choice_p1_second_range_check(dst);
}
inline Controller_Event_msg_out_test_choice_p1_second_range_check(Controller_Event_msg_out_test_choice_p1_second_vc)
{
    assert(((Controller_Event_msg_out_test_choice_p1_second_vc >= 0) && (Controller_Event_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Controller_Event_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_test_choice_p1_first_PRESENT);
        Controller_Event_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Controller_Event_msg_out_test_choice_p1_second_PRESENT);
        Controller_Event_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_msg_out_test_choice_assign_value(dst, src)
{
    Controller_Event_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_integer_p1_range_check(dst);
}
inline Controller_Event_msg_out_test_integer_p1_range_check(Controller_Event_msg_out_test_integer_p1_vc)
{
    assert(((Controller_Event_msg_out_test_integer_p1_vc >= 0) && (Controller_Event_msg_out_test_integer_p1_vc <= 10000)));
}
inline Controller_Event_msg_out_test_integer_assign_value(dst, src)
{
    Controller_Event_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_optional_p1_a_range_check(dst);
}
inline Controller_Event_msg_out_test_optional_p1_a_range_check(Controller_Event_msg_out_test_optional_p1_a_vc)
{
    assert(((Controller_Event_msg_out_test_optional_p1_a_vc >= 0) && (Controller_Event_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Controller_Event_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_optional_p1_b_range_check(dst);
}
inline Controller_Event_msg_out_test_optional_p1_b_range_check(Controller_Event_msg_out_test_optional_p1_b_vc)
{
    assert(((Controller_Event_msg_out_test_optional_p1_b_vc >= 0) && (Controller_Event_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Controller_Event_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_optional_p1_c_range_check(dst);
}
inline Controller_Event_msg_out_test_optional_p1_c_range_check(Controller_Event_msg_out_test_optional_p1_c_vc)
{
    assert(((Controller_Event_msg_out_test_optional_p1_c_vc >= 0) && (Controller_Event_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Controller_Event_msg_out_test_optional_p1_assign_value(dst, src)
{
    Controller_Event_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Controller_Event_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Controller_Event_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Controller_Event_msg_out_test_optional_assign_value(dst, src)
{
    Controller_Event_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Controller_Event_msg_out_test_sequence_p1_x_range_check(Controller_Event_msg_out_test_sequence_p1_x_vc)
{
    assert(((Controller_Event_msg_out_test_sequence_p1_x_vc >= 0) && (Controller_Event_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Controller_Event_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Controller_Event_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Controller_Event_msg_out_test_sequence_p1_y_elem_range_check(Controller_Event_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Controller_Event_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Controller_Event_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Controller_Event_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Controller_Event_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Controller_Event_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_4;
    for(i_4 : 0 .. (src.length - 1))
    {
        Controller_Event_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_4], src.data[i_4]);
    }
    for(i_4 : src.length .. 3)
    {
        Controller_Event_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_4]);
    }
    dst.length = src.length;
}
inline Controller_Event_msg_out_test_sequence_p1_y_size_check(Controller_Event_msg_out_test_sequence_p1_y_sc)
{
    assert(((Controller_Event_msg_out_test_sequence_p1_y_sc >= 0) && (Controller_Event_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Controller_Event_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Controller_Event_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Controller_Event_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Controller_Event_msg_out_test_sequence_assign_value(dst, src)
{
    Controller_Event_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Controller_Event_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_out_test_array_PRESENT);
        Controller_Event_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Controller_Event_msg_out_test_choice_PRESENT);
        Controller_Event_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Controller_Event_msg_out_test_integer_PRESENT);
        Controller_Event_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Controller_Event_msg_out_test_optional_PRESENT);
        Controller_Event_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Controller_Event_msg_out_test_sequence_PRESENT);
        Controller_Event_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Controller_event_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Controller_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Controller_Event_msg_in_PRESENT);
        Controller_Event_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Controller_Event_msg_out_PRESENT);
        Controller_Event_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Controller_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observer_State_Kind_assign_value(dst, src)
{
    dst = src;
    Observer_State_Kind_range_check(dst);
}
inline Observer_State_Kind_range_check(Observer_State_Kind_vc)
{
    assert(((((Observer_State_Kind_vc == Observer_State_Kind_regular_state) || (Observer_State_Kind_vc == Observer_State_Kind_error_state)) || (Observer_State_Kind_vc == Observer_State_Kind_ignore_state)) || (Observer_State_Kind_vc == Observer_State_Kind_success_state)));
}
inline Function_Event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_array_p1_elem_range_check(Function_Event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Function_Event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Function_Event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_4;
    for(i_4 : 0 .. (src.length - 1))
    {
        Function_Event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_4], src.data[i_4]);
    }
    for(i_4 : src.length .. 2)
    {
        Function_Event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_4]);
    }
    dst.length = src.length;
}
inline Function_Event_actuator_msg_in_test_array_p1_size_check(Function_Event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Function_Event_actuator_msg_in_test_array_p1_sc >= 1) && (Function_Event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Function_Event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_choice_p1_first_range_check(Function_Event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Function_Event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Function_Event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_choice_p1_second_range_check(Function_Event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Function_Event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Function_Event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Function_Event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Function_Event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_integer_p1_range_check(Function_Event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Function_Event_actuator_msg_in_test_integer_p1_vc >= 0) && (Function_Event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_optional_p1_a_range_check(Function_Event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Function_Event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Function_Event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_optional_p1_b_range_check(Function_Event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Function_Event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Function_Event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_optional_p1_c_range_check(Function_Event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Function_Event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Function_Event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Function_Event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Function_Event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Function_Event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_sequence_p1_x_range_check(Function_Event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Function_Event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Function_Event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Function_Event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Function_Event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Function_Event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Function_Event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Function_Event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Function_Event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Function_Event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Function_Event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 3)
    {
        Function_Event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Function_Event_actuator_msg_in_test_sequence_p1_y_size_check(Function_Event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Function_Event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Function_Event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Function_Event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Function_Event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Function_Event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Function_Event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_input_none_PRESENT);
        Function_Event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_array_PRESENT);
        Function_Event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_choice_PRESENT);
        Function_Event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_integer_PRESENT);
        Function_Event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_optional_PRESENT);
        Function_Event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Function_Event_actuator_msg_in_test_sequence_PRESENT);
        Function_Event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Function_Event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_out_result_PRESENT);
        Function_Event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_msg_in_PRESENT);
        Function_Event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_actuator_msg_out_PRESENT);
        Function_Event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Function_Event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_input_none_PRESENT);
        Function_Event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Function_Event_controller_msg_in_result_PRESENT);
        Function_Event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_array_p1_elem_range_check(Function_Event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Function_Event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Function_Event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Function_Event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_4;
    for(i_4 : 0 .. (src.length - 1))
    {
        Function_Event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_4], src.data[i_4]);
    }
    for(i_4 : src.length .. 2)
    {
        Function_Event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_4]);
    }
    dst.length = src.length;
}
inline Function_Event_controller_msg_out_test_array_p1_size_check(Function_Event_controller_msg_out_test_array_p1_sc)
{
    assert(((Function_Event_controller_msg_out_test_array_p1_sc >= 1) && (Function_Event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Function_Event_controller_msg_out_test_array_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Function_Event_controller_msg_out_test_choice_p1_first_range_check(Function_Event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Function_Event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Function_Event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Function_Event_controller_msg_out_test_choice_p1_second_range_check(Function_Event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Function_Event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Function_Event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_test_choice_p1_first_PRESENT);
        Function_Event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Function_Event_controller_msg_out_test_choice_p1_second_PRESENT);
        Function_Event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Function_Event_controller_msg_out_test_integer_p1_range_check(Function_Event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Function_Event_controller_msg_out_test_integer_p1_vc >= 0) && (Function_Event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Function_Event_controller_msg_out_test_optional_p1_a_range_check(Function_Event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Function_Event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Function_Event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Function_Event_controller_msg_out_test_optional_p1_b_range_check(Function_Event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Function_Event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Function_Event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Function_Event_controller_msg_out_test_optional_p1_c_range_check(Function_Event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Function_Event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Function_Event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Function_Event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Function_Event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Function_Event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Function_Event_controller_msg_out_test_sequence_p1_x_range_check(Function_Event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Function_Event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Function_Event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Function_Event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Function_Event_controller_msg_out_test_sequence_p1_y_elem_range_check(Function_Event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Function_Event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Function_Event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Function_Event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Function_Event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Function_Event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Function_Event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 3)
    {
        Function_Event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Function_Event_controller_msg_out_test_sequence_p1_y_size_check(Function_Event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Function_Event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Function_Event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Function_Event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Function_Event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Function_Event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Function_Event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Function_Event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_out_test_array_PRESENT);
        Function_Event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Function_Event_controller_msg_out_test_choice_PRESENT);
        Function_Event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Function_Event_controller_msg_out_test_integer_PRESENT);
        Function_Event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Function_Event_controller_msg_out_test_optional_PRESENT);
        Function_Event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Function_Event_controller_msg_out_test_sequence_PRESENT);
        Function_Event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_controller_msg_in_PRESENT);
        Function_Event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Function_Event_controller_msg_out_PRESENT);
        Function_Event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Function_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Function_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Function_Event_actuator_PRESENT);
        Function_Event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Function_Event_controller_PRESENT);
        Function_Event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Function_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_id_assign_value(dst, src)
{
    Named_Function_Event_id_size_check(src.length);
    int i_1;
    for(i_1 : 0 .. (src.length - 1))
    {
        dst.data[i_1] = src.data[i_1];
    }
    for(i_1 : src.length .. 79)
    {
        dst.data[i_1] = 0;
    }
    dst.length = src.length;
}
inline Named_Function_Event_id_size_check(Named_Function_Event_id_sc)
{
    assert(((Named_Function_Event_id_sc >= 1) && (Named_Function_Event_id_sc <= 80)));
}
inline Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Named_Function_Event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 2)
    {
        Named_Function_Event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_actuator_msg_in_test_array_p1_size_check(Named_Function_Event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Named_Function_Event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Named_Function_Event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_range_check(Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_range_check(Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_integer_p1_range_check(Named_Function_Event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_range_check(Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_range_check(Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_range_check(Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Named_Function_Event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_range_check(Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 3)
    {
        Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_size_check(Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Named_Function_Event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Named_Function_Event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_input_none_PRESENT);
        Named_Function_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_array_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_choice_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_integer_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_optional_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_test_sequence_PRESENT);
        Named_Function_Event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_result_PRESENT);
        Named_Function_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_in_PRESENT);
        Named_Function_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_actuator_msg_out_PRESENT);
        Named_Function_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Named_Function_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_input_none_PRESENT);
        Named_Function_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_result_PRESENT);
        Named_Function_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_array_p1_elem_range_check(Named_Function_Event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Named_Function_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Named_Function_Event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Named_Function_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 2)
    {
        Named_Function_Event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_controller_msg_out_test_array_p1_size_check(Named_Function_Event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_array_p1_sc >= 1) && (Named_Function_Event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Named_Function_Event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_choice_p1_first_range_check(Named_Function_Event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_choice_p1_second_range_check(Named_Function_Event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_integer_p1_range_check(Named_Function_Event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_a_range_check(Named_Function_Event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_b_range_check(Named_Function_Event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_c_range_check(Named_Function_Event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Named_Function_Event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Named_Function_Event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Named_Function_Event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_range_check(Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 3)
    {
        Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_size_check(Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Named_Function_Event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Named_Function_Event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Named_Function_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_array_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_choice_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_integer_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_optional_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_test_sequence_PRESENT);
        Named_Function_Event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_controller_msg_in_PRESENT);
        Named_Function_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Named_Function_Event_event_controller_msg_out_PRESENT);
        Named_Function_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Named_Function_Event_event_actuator_PRESENT);
        Named_Function_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Named_Function_Event_event_controller_PRESENT);
        Named_Function_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Named_function_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Named_Function_Event_assign_value(dst, src)
{
    Named_Function_Event_id_assign_value(dst.id, src.id);
    Named_Function_Event_event_assign_value(dst.event, src.event);
}
inline Interface_Event_source_assign_value(dst, src)
{
    dst = src;
    Interface_Event_source_range_check(dst);
}
inline Interface_Event_source_range_check(Interface_Event_source_vc)
{
    assert((((Interface_Event_source_vc == Interface_Event_source_actuator) || (Interface_Event_source_vc == Interface_Event_source_controller)) || (Interface_Event_source_vc == Interface_Event_source_env)));
}
inline Interface_Event_dest_assign_value(dst, src)
{
    dst = src;
    Interface_Event_dest_range_check(dst);
}
inline Interface_Event_dest_range_check(Interface_Event_dest_vc)
{
    assert((((Interface_Event_dest_vc == Interface_Event_dest_actuator) || (Interface_Event_dest_vc == Interface_Event_dest_controller)) || (Interface_Event_dest_vc == Interface_Event_dest_env)));
}
inline Interface_Event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_array_p1_elem_range_check(Interface_Event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Interface_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Interface_Event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Interface_Event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 2)
    {
        Interface_Event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_actuator_msg_in_test_array_p1_size_check(Interface_Event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Interface_Event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Interface_Event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_choice_p1_first_range_check(Interface_Event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_choice_p1_second_range_check(Interface_Event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Interface_Event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Interface_Event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_integer_p1_range_check(Interface_Event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_a_range_check(Interface_Event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_b_range_check(Interface_Event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_c_range_check(Interface_Event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Interface_Event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Interface_Event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Interface_Event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_x_range_check(Interface_Event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 3)
    {
        Interface_Event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_y_size_check(Interface_Event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Interface_Event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Interface_Event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Interface_Event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Interface_Event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Interface_Event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Interface_Event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_input_none_PRESENT);
        Interface_Event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_array_PRESENT);
        Interface_Event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_choice_PRESENT);
        Interface_Event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_integer_PRESENT);
        Interface_Event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_optional_PRESENT);
        Interface_Event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_test_sequence_PRESENT);
        Interface_Event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_result_PRESENT);
        Interface_Event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_msg_in_PRESENT);
        Interface_Event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_actuator_msg_out_PRESENT);
        Interface_Event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Interface_Event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_input_none_PRESENT);
        Interface_Event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Interface_Event_event_controller_msg_in_result_PRESENT);
        Interface_Event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_array_p1_elem_range_check(Interface_Event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Interface_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Interface_Event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_5;
    for(i_5 : 0 .. (src.length - 1))
    {
        Interface_Event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_5], src.data[i_5]);
    }
    for(i_5 : src.length .. 2)
    {
        Interface_Event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_5]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_controller_msg_out_test_array_p1_size_check(Interface_Event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Interface_Event_event_controller_msg_out_test_array_p1_sc >= 1) && (Interface_Event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Interface_Event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_choice_p1_first_range_check(Interface_Event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Interface_Event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_choice_p1_second_range_check(Interface_Event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Interface_Event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Interface_Event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Interface_Event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_integer_p1_range_check(Interface_Event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Interface_Event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_a_range_check(Interface_Event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Interface_Event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_b_range_check(Interface_Event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Interface_Event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_c_range_check(Interface_Event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Interface_Event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Interface_Event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Interface_Event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Interface_Event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_x_range_check(Interface_Event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Interface_Event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 3)
    {
        Interface_Event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_y_size_check(Interface_Event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Interface_Event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Interface_Event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Interface_Event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Interface_Event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Interface_Event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Interface_Event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Interface_Event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_array_PRESENT);
        Interface_Event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_choice_PRESENT);
        Interface_Event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_integer_PRESENT);
        Interface_Event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_optional_PRESENT);
        Interface_Event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_test_sequence_PRESENT);
        Interface_Event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_controller_msg_in_PRESENT);
        Interface_Event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Interface_Event_event_controller_msg_out_PRESENT);
        Interface_Event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Interface_Event_event_actuator_PRESENT);
        Interface_Event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Interface_Event_event_controller_PRESENT);
        Interface_Event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Interface_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Interface_Event_assign_value(dst, src)
{
    Interface_Event_source_assign_value(dst.source, src.source);
    Interface_Event_dest_assign_value(dst.dest, src.dest);
    Interface_Event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_no_event_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_system_startup_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_source_range_check(dst);
}
inline Observable_Event_input_event_source_range_check(Observable_Event_input_event_source_vc)
{
    assert((((Observable_Event_input_event_source_vc == Observable_Event_input_event_source_actuator) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_controller)) || (Observable_Event_input_event_source_vc == Observable_Event_input_event_source_env)));
}
inline Observable_Event_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_dest_range_check(dst);
}
inline Observable_Event_input_event_dest_range_check(Observable_Event_input_event_dest_vc)
{
    assert((((Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_actuator) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_controller)) || (Observable_Event_input_event_dest_vc == Observable_Event_input_event_dest_env)));
}
inline Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_p1_size_check(Observable_Event_input_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Observable_Event_input_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_range_check(Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_size_check(Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_input_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Observable_Event_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_array_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_choice_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_integer_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_optional_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_test_sequence_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_in_PRESENT);
        Observable_Event_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_actuator_msg_out_PRESENT);
        Observable_Event_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_p1_size_check(Observable_Event_input_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_array_p1_sc >= 1) && (Observable_Event_input_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_range_check(Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_range_check(Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_integer_p1_range_check(Observable_Event_input_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_range_check(Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_range_check(Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_range_check(Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_input_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_size_check(Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_input_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Observable_Event_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_array_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_choice_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_integer_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_optional_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_test_sequence_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_in_PRESENT);
        Observable_Event_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_input_event_event_controller_msg_out_PRESENT);
        Observable_Event_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_input_event_event_actuator_PRESENT);
        Observable_Event_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_input_event_event_controller_PRESENT);
        Observable_Event_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_input_event_assign_value(dst, src)
{
    Observable_Event_input_event_source_assign_value(dst.source, src.source);
    Observable_Event_input_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_input_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_output_event_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_source_range_check(dst);
}
inline Observable_Event_output_event_source_range_check(Observable_Event_output_event_source_vc)
{
    assert((((Observable_Event_output_event_source_vc == Observable_Event_output_event_source_actuator) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_controller)) || (Observable_Event_output_event_source_vc == Observable_Event_output_event_source_env)));
}
inline Observable_Event_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_dest_range_check(dst);
}
inline Observable_Event_output_event_dest_range_check(Observable_Event_output_event_dest_vc)
{
    assert((((Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_actuator) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_controller)) || (Observable_Event_output_event_dest_vc == Observable_Event_output_event_dest_env)));
}
inline Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_p1_size_check(Observable_Event_output_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Observable_Event_output_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_range_check(Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_size_check(Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_output_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Observable_Event_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_array_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_choice_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_integer_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_optional_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_test_sequence_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_result_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_in_PRESENT);
        Observable_Event_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_actuator_msg_out_PRESENT);
        Observable_Event_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_result_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_p1_size_check(Observable_Event_output_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_array_p1_sc >= 1) && (Observable_Event_output_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_range_check(Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_range_check(Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_integer_p1_range_check(Observable_Event_output_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_range_check(Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_range_check(Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_range_check(Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_output_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_size_check(Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_output_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Observable_Event_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_array_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_choice_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_integer_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_optional_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_test_sequence_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_in_PRESENT);
        Observable_Event_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_output_event_event_controller_msg_out_PRESENT);
        Observable_Event_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_output_event_event_actuator_PRESENT);
        Observable_Event_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_output_event_event_controller_PRESENT);
        Observable_Event_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_output_event_assign_value(dst, src)
{
    Observable_Event_output_event_source_assign_value(dst.source, src.source);
    Observable_Event_output_event_dest_assign_value(dst.dest, src.dest);
    Observable_Event_output_event_event_assign_value(dst.event, src.event);
}
inline Observable_Event_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_source_range_check(dst);
}
inline Observable_Event_unhandled_input_source_range_check(Observable_Event_unhandled_input_source_vc)
{
    assert((((Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_actuator) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_controller)) || (Observable_Event_unhandled_input_source_vc == Observable_Event_unhandled_input_source_env)));
}
inline Observable_Event_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_dest_range_check(dst);
}
inline Observable_Event_unhandled_input_dest_range_check(Observable_Event_unhandled_input_dest_vc)
{
    assert((((Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_actuator) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_controller)) || (Observable_Event_unhandled_input_dest_vc == Observable_Event_unhandled_input_dest_env)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_size_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_sc >= 1) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_size_check(Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_array_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_result_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_6;
    for(i_6 : 0 .. (src.length - 1))
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_6], src.data[i_6]);
    }
    for(i_6 : src.length .. 2)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_6]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_size_check(Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_sc >= 1) && (Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 3)
    {
        Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_size_check(Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_array_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_choice_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_integer_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_optional_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_in_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_msg_out_PRESENT);
        Observable_Event_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_unhandled_input_event_actuator_PRESENT);
        Observable_Event_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Observable_Event_unhandled_input_event_controller_PRESENT);
        Observable_Event_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Observable_event_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Observable_Event_unhandled_input_assign_value(dst, src)
{
    Observable_Event_unhandled_input_source_assign_value(dst.source, src.source);
    Observable_Event_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Observable_Event_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Observable_Event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Observable_Event_no_event_PRESENT);
        Observable_Event_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Observable_Event_system_startup_PRESENT);
        Observable_Event_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Observable_Event_input_event_PRESENT);
        Observable_Event_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Observable_Event_output_event_PRESENT);
        Observable_Event_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Observable_Event_unhandled_input_PRESENT);
        Observable_Event_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Observable_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_source_range_check(dst);
}
inline Events_Ty_elem_input_event_source_range_check(Events_Ty_elem_input_event_source_vc)
{
    assert((((Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_actuator) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_controller)) || (Events_Ty_elem_input_event_source_vc == Events_Ty_elem_input_event_source_env)));
}
inline Events_Ty_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_dest_range_check(dst);
}
inline Events_Ty_elem_input_event_dest_range_check(Events_Ty_elem_input_event_dest_vc)
{
    assert((((Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_actuator) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_controller)) || (Events_Ty_elem_input_event_dest_vc == Events_Ty_elem_input_event_dest_env)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_size_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_size_check(Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_array_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_size_check(Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_sc >= 1) && (Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_size_check(Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_array_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_choice_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_integer_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_optional_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_input_event_event_actuator_PRESENT);
        Events_Ty_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_input_event_event_controller_PRESENT);
        Events_Ty_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_input_event_assign_value(dst, src)
{
    Events_Ty_elem_input_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_input_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_input_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_source_range_check(dst);
}
inline Events_Ty_elem_output_event_source_range_check(Events_Ty_elem_output_event_source_vc)
{
    assert((((Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_actuator) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_controller)) || (Events_Ty_elem_output_event_source_vc == Events_Ty_elem_output_event_source_env)));
}
inline Events_Ty_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_dest_range_check(dst);
}
inline Events_Ty_elem_output_event_dest_range_check(Events_Ty_elem_output_event_dest_vc)
{
    assert((((Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_actuator) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_controller)) || (Events_Ty_elem_output_event_dest_vc == Events_Ty_elem_output_event_dest_env)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_size_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_size_check(Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_array_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_size_check(Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_sc >= 1) && (Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_size_check(Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_array_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_choice_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_integer_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_optional_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_in_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_msg_out_PRESENT);
        Events_Ty_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_output_event_event_actuator_PRESENT);
        Events_Ty_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_output_event_event_controller_PRESENT);
        Events_Ty_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_output_event_assign_value(dst, src)
{
    Events_Ty_elem_output_event_source_assign_value(dst.source, src.source);
    Events_Ty_elem_output_event_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_output_event_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_source_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_source_range_check(Events_Ty_elem_unhandled_input_source_vc)
{
    assert((((Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_actuator) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_controller)) || (Events_Ty_elem_unhandled_input_source_vc == Events_Ty_elem_unhandled_input_source_env)));
}
inline Events_Ty_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_dest_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_dest_range_check(Events_Ty_elem_unhandled_input_dest_vc)
{
    assert((((Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_actuator) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_controller)) || (Events_Ty_elem_unhandled_input_dest_vc == Events_Ty_elem_unhandled_input_dest_env)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_size_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_size_check(Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_7;
    for(i_7 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_7], src.data[i_7]);
    }
    for(i_7 : src.length .. 2)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_7]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_size_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc >= 1) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 3)
    {
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_size_check(Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_in_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_msg_out_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_actuator_PRESENT);
        Events_Ty_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_event_controller_PRESENT);
        Events_Ty_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline Events_ty_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_elem_unhandled_input_assign_value(dst, src)
{
    Events_Ty_elem_unhandled_input_source_assign_value(dst.source, src.source);
    Events_Ty_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    Events_Ty_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline Events_Ty_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == Events_Ty_elem_no_event_PRESENT);
        Events_Ty_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == Events_Ty_elem_system_startup_PRESENT);
        Events_Ty_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == Events_Ty_elem_input_event_PRESENT);
        Events_Ty_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == Events_Ty_elem_output_event_PRESENT);
        Events_Ty_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == Events_Ty_elem_unhandled_input_PRESENT);
        Events_Ty_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline Events_Ty_elem_init_value(dst)
{
    skip;
}
inline Events_ty_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline Events_Ty_assign_value(dst, src)
{
    int i_0;
    for(i_0 : 0 .. (src.length - 1))
    {
        Events_Ty_elem_assign_value(dst.data[i_0], src.data[i_0]);
    }
    for(i_0 : src.length .. 9)
    {
        Events_Ty_elem_init_value(dst.data[i_0]);
    }
    dst.length = src.length;
}
inline Events_Ty_size_check(Events_Ty_sc)
{
    assert(((Events_Ty_sc >= 0) && (Events_Ty_sc <= 10)));
}
inline System_State_timers_actuator_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_controller_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline System_State_timers_assign_value(dst, src)
{
    System_State_timers_actuator_assign_value(dst.actuator, src.actuator);
    System_State_timers_controller_assign_value(dst.controller, src.controller);
    System_State_timers_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline System_State_actuator_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_source_range_check(System_State_actuator_queue_elem_input_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_actuator) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_controller)) || (System_State_actuator_queue_elem_input_event_source_vc == System_State_actuator_queue_elem_input_event_source_env)));
}
inline System_State_actuator_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_dest_range_check(System_State_actuator_queue_elem_input_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_actuator) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_controller)) || (System_State_actuator_queue_elem_input_event_dest_vc == System_State_actuator_queue_elem_input_event_dest_env)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_size_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_size_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_input_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_source_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_source_range_check(System_State_actuator_queue_elem_output_event_source_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_actuator) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_controller)) || (System_State_actuator_queue_elem_output_event_source_vc == System_State_actuator_queue_elem_output_event_source_env)));
}
inline System_State_actuator_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_dest_range_check(System_State_actuator_queue_elem_output_event_dest_vc)
{
    assert((((System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_actuator) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_controller)) || (System_State_actuator_queue_elem_output_event_dest_vc == System_State_actuator_queue_elem_output_event_dest_env)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_size_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_size_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_actuator_PRESENT);
        System_State_actuator_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_event_controller_PRESENT);
        System_State_actuator_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_output_event_assign_value(dst, src)
{
    System_State_actuator_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_source_range_check(System_State_actuator_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_actuator) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_controller)) || (System_State_actuator_queue_elem_unhandled_input_source_vc == System_State_actuator_queue_elem_unhandled_input_source_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_dest_range_check(System_State_actuator_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_actuator) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_controller)) || (System_State_actuator_queue_elem_unhandled_input_dest_vc == System_State_actuator_queue_elem_unhandled_input_dest_env)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_size_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_actuator_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_actuator_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_actuator_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_actuator_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_actuator_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_actuator_queue_elem_no_event_PRESENT);
        System_State_actuator_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_actuator_queue_elem_system_startup_PRESENT);
        System_State_actuator_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_actuator_queue_elem_input_event_PRESENT);
        System_State_actuator_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_actuator_queue_elem_output_event_PRESENT);
        System_State_actuator_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_actuator_queue_elem_unhandled_input_PRESENT);
        System_State_actuator_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_actuator_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_actuator_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_actuator_queue_assign_value(dst, src)
{
    int i_1;
    for(i_1 : 0 .. (src.length - 1))
    {
        System_State_actuator_queue_elem_assign_value(dst.data[i_1], src.data[i_1]);
    }
    for(i_1 : src.length .. 1)
    {
        System_State_actuator_queue_elem_init_value(dst.data[i_1]);
    }
    dst.length = src.length;
}
inline System_State_actuator_queue_size_check(System_State_actuator_queue_sc)
{
    assert(((System_State_actuator_queue_sc >= 0) && (System_State_actuator_queue_sc <= 2)));
}
inline System_State_controller_queue_elem_no_event_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_system_startup_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_source_range_check(System_State_controller_queue_elem_input_event_source_vc)
{
    assert((((System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_actuator) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_controller)) || (System_State_controller_queue_elem_input_event_source_vc == System_State_controller_queue_elem_input_event_source_env)));
}
inline System_State_controller_queue_elem_input_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_dest_range_check(System_State_controller_queue_elem_input_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_actuator) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_controller)) || (System_State_controller_queue_elem_input_event_dest_vc == System_State_controller_queue_elem_input_event_dest_env)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_size_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_size_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_input_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_event_controller_PRESENT);
        System_State_controller_queue_elem_input_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_input_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_input_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_input_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_input_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_input_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_output_event_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_source_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_source_range_check(System_State_controller_queue_elem_output_event_source_vc)
{
    assert((((System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_actuator) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_controller)) || (System_State_controller_queue_elem_output_event_source_vc == System_State_controller_queue_elem_output_event_source_env)));
}
inline System_State_controller_queue_elem_output_event_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_dest_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_dest_range_check(System_State_controller_queue_elem_output_event_dest_vc)
{
    assert((((System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_actuator) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_controller)) || (System_State_controller_queue_elem_output_event_dest_vc == System_State_controller_queue_elem_output_event_dest_env)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_size_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_size_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_actuator_PRESENT);
        System_State_controller_queue_elem_output_event_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_event_controller_PRESENT);
        System_State_controller_queue_elem_output_event_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_output_event_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_output_event_assign_value(dst, src)
{
    System_State_controller_queue_elem_output_event_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_output_event_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_output_event_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_unhandled_input_source_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_source_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_source_range_check(System_State_controller_queue_elem_unhandled_input_source_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_actuator) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_controller)) || (System_State_controller_queue_elem_unhandled_input_source_vc == System_State_controller_queue_elem_unhandled_input_source_env)));
}
inline System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_dest_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_dest_range_check(System_State_controller_queue_elem_unhandled_input_dest_vc)
{
    assert((((System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_actuator) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_controller)) || (System_State_controller_queue_elem_unhandled_input_dest_vc == System_State_controller_queue_elem_unhandled_input_dest_env)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_size_check(System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_actuator_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst, src)
{
    skip;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_input_none_assign_value(dst.data.input_none, src.data.input_none);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_result_assign_value(dst.data.result, src.data.result);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_in_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst, src)
{
    int i_8;
    for(i_8 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_assign_value(dst.data[i_8], src.data[i_8]);
    }
    for(i_8 : src.length .. 2)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_elem_init_value(dst.data[i_8]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_size_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc >= 1) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_sc <= 3)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_a_assign_value(dst.a, src.a);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_b_assign_value(dst.b, src.b);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(dst);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_range_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_vc <= 10000)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst, 0);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst, src)
{
    int i_9;
    for(i_9 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_assign_value(dst.data[i_9], src.data[i_9]);
    }
    for(i_9 : src.length .. 3)
    {
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_elem_init_value(dst.data[i_9]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_size_check(System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc)
{
    assert(((System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc >= 0) && (System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_sc <= 4)));
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_x_assign_value(dst.x, src.x);
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_y_assign_value(dst.y, src.y);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_p1_assign_value(dst.p1, src.p1);
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_array_assign_value(dst.data.test_array, src.data.test_array);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_choice_assign_value(dst.data.test_choice, src.data.test_choice);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_integer_assign_value(dst.data.test_integer, src.data.test_integer);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_optional_assign_value(dst.data.test_optional, src.data.test_optional);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_test_sequence_assign_value(dst.data.test_sequence, src.data.test_sequence);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_msg_out_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_in_assign_value(dst.data.msg_in, src.data.msg_in);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_msg_out_assign_value(dst.data.msg_out, src.data.msg_out);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_controller_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_event_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_actuator_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_actuator_assign_value(dst.data.actuator, src.data.actuator);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_event_controller_PRESENT);
        System_State_controller_queue_elem_unhandled_input_event_controller_assign_value(dst.data.controller, src.data.controller);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_queue_elem_unhandled_input_event_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_elem_unhandled_input_assign_value(dst, src)
{
    System_State_controller_queue_elem_unhandled_input_source_assign_value(dst.source, src.source);
    System_State_controller_queue_elem_unhandled_input_dest_assign_value(dst.dest, src.dest);
    System_State_controller_queue_elem_unhandled_input_event_assign_value(dst.event, src.event);
}
inline System_State_controller_queue_elem_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_queue_elem_no_event_PRESENT);
        System_State_controller_queue_elem_no_event_assign_value(dst.data.no_event, src.data.no_event);
    ::  (dst.selection == System_State_controller_queue_elem_system_startup_PRESENT);
        System_State_controller_queue_elem_system_startup_assign_value(dst.data.system_startup, src.data.system_startup);
    ::  (dst.selection == System_State_controller_queue_elem_input_event_PRESENT);
        System_State_controller_queue_elem_input_event_assign_value(dst.data.input_event, src.data.input_event);
    ::  (dst.selection == System_State_controller_queue_elem_output_event_PRESENT);
        System_State_controller_queue_elem_output_event_assign_value(dst.data.output_event, src.data.output_event);
    ::  (dst.selection == System_State_controller_queue_elem_unhandled_input_PRESENT);
        System_State_controller_queue_elem_unhandled_input_assign_value(dst.data.unhandled_input, src.data.unhandled_input);
    ::  else;
        skip;
    fi;
}
inline System_State_controller_queue_elem_init_value(dst)
{
    skip;
}
inline System_state_controller_queue_elem_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_queue_assign_value(dst, src)
{
    int i_1;
    for(i_1 : 0 .. (src.length - 1))
    {
        System_State_controller_queue_elem_assign_value(dst.data[i_1], src.data[i_1]);
    }
    for(i_1 : src.length .. 1)
    {
        System_State_controller_queue_elem_init_value(dst.data[i_1]);
    }
    dst.length = src.length;
}
inline System_State_controller_queue_size_check(System_State_controller_queue_sc)
{
    assert(((System_State_controller_queue_sc >= 0) && (System_State_controller_queue_sc <= 2)));
}
inline System_State_actuator_state_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_state_range_check(dst);
}
inline System_State_actuator_state_range_check(System_State_actuator_state_vc)
{
    assert((System_State_actuator_state_vc == System_State_actuator_state_wait));
}
inline System_State_actuator_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_init_done_range_check(dst);
}
inline System_State_actuator_init_done_range_check(System_State_actuator_init_done_vc)
{
    assert(true);
}
inline System_State_actuator_sender_assign_value(dst, src)
{
    dst = src;
    System_State_actuator_sender_range_check(dst);
}
inline System_State_actuator_sender_range_check(System_State_actuator_sender_vc)
{
    assert((((System_State_actuator_sender_vc == System_State_actuator_sender_actuator) || (System_State_actuator_sender_vc == System_State_actuator_sender_controller)) || (System_State_actuator_sender_vc == System_State_actuator_sender_env)));
}
inline System_State_actuator_assign_value(dst, src)
{
    System_State_actuator_state_assign_value(dst.state, src.state);
    System_State_actuator_init_done_assign_value(dst.init_done, src.init_done);
    System_State_actuator_sender_assign_value(dst.sender, src.sender);
}
inline System_State_controller_state_assign_value(dst, src)
{
    dst = src;
    System_State_controller_state_range_check(dst);
}
inline System_State_controller_state_range_check(System_State_controller_state_vc)
{
    assert((((((System_State_controller_state_vc == System_State_controller_state_aftersequence) || (System_State_controller_state_vc == System_State_controller_state_afteroptional)) || (System_State_controller_state_vc == System_State_controller_state_afterchoice)) || (System_State_controller_state_vc == System_State_controller_state_afterinteger)) || (System_State_controller_state_vc == System_State_controller_state_afterarray)));
}
inline System_State_controller_init_done_assign_value(dst, src)
{
    dst = src;
    System_State_controller_init_done_range_check(dst);
}
inline System_State_controller_init_done_range_check(System_State_controller_init_done_vc)
{
    assert(true);
}
inline System_State_controller_sender_assign_value(dst, src)
{
    dst = src;
    System_State_controller_sender_range_check(dst);
}
inline System_State_controller_sender_range_check(System_State_controller_sender_vc)
{
    assert((((System_State_controller_sender_vc == System_State_controller_sender_actuator) || (System_State_controller_sender_vc == System_State_controller_sender_controller)) || (System_State_controller_sender_vc == System_State_controller_sender_env)));
}
inline System_State_controller_param_integer_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_integer_range_check(dst);
}
inline System_State_controller_param_integer_range_check(System_State_controller_param_integer_vc)
{
    assert(((System_State_controller_param_integer_vc >= 0) && (System_State_controller_param_integer_vc <= 10000)));
}
inline System_State_controller_param_sequence_x_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_sequence_x_range_check(dst);
}
inline System_State_controller_param_sequence_x_range_check(System_State_controller_param_sequence_x_vc)
{
    assert(((System_State_controller_param_sequence_x_vc >= 0) && (System_State_controller_param_sequence_x_vc <= 10000)));
}
inline System_State_controller_param_sequence_y_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_sequence_y_elem_range_check(dst);
}
inline System_State_controller_param_sequence_y_elem_range_check(System_State_controller_param_sequence_y_elem_vc)
{
    assert(((System_State_controller_param_sequence_y_elem_vc >= 0) && (System_State_controller_param_sequence_y_elem_vc <= 10000)));
}
inline System_State_controller_param_sequence_y_elem_init_value(dst)
{
    System_State_controller_param_sequence_y_elem_assign_value(dst, 0);
}
inline System_State_controller_param_sequence_y_assign_value(dst, src)
{
    int i_3;
    for(i_3 : 0 .. (src.length - 1))
    {
        System_State_controller_param_sequence_y_elem_assign_value(dst.data[i_3], src.data[i_3]);
    }
    for(i_3 : src.length .. 3)
    {
        System_State_controller_param_sequence_y_elem_init_value(dst.data[i_3]);
    }
    dst.length = src.length;
}
inline System_State_controller_param_sequence_y_size_check(System_State_controller_param_sequence_y_sc)
{
    assert(((System_State_controller_param_sequence_y_sc >= 0) && (System_State_controller_param_sequence_y_sc <= 4)));
}
inline System_State_controller_param_sequence_assign_value(dst, src)
{
    System_State_controller_param_sequence_x_assign_value(dst.x, src.x);
    System_State_controller_param_sequence_y_assign_value(dst.y, src.y);
}
inline System_State_controller_param_choice_first_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_choice_first_range_check(dst);
}
inline System_State_controller_param_choice_first_range_check(System_State_controller_param_choice_first_vc)
{
    assert(((System_State_controller_param_choice_first_vc >= 0) && (System_State_controller_param_choice_first_vc <= 10000)));
}
inline System_State_controller_param_choice_second_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_choice_second_range_check(dst);
}
inline System_State_controller_param_choice_second_range_check(System_State_controller_param_choice_second_vc)
{
    assert(((System_State_controller_param_choice_second_vc >= 0) && (System_State_controller_param_choice_second_vc <= 10000)));
}
inline System_State_controller_param_choice_assign_value(dst, src)
{
    dst.selection = src.selection;
    if
    ::  (dst.selection == System_State_controller_param_choice_first_PRESENT);
        System_State_controller_param_choice_first_assign_value(dst.data.first, src.data.first);
    ::  (dst.selection == System_State_controller_param_choice_second_PRESENT);
        System_State_controller_param_choice_second_assign_value(dst.data.second, src.data.second);
    ::  else;
        skip;
    fi;
}
inline System_state_controller_param_choice_selection_assign_value(dst, src)
{
    dst = src;
}
inline System_State_controller_param_array_elem_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_array_elem_range_check(dst);
}
inline System_State_controller_param_array_elem_range_check(System_State_controller_param_array_elem_vc)
{
    assert(((System_State_controller_param_array_elem_vc >= 0) && (System_State_controller_param_array_elem_vc <= 10000)));
}
inline System_State_controller_param_array_elem_init_value(dst)
{
    System_State_controller_param_array_elem_assign_value(dst, 0);
}
inline System_State_controller_param_array_assign_value(dst, src)
{
    int i_2;
    for(i_2 : 0 .. (src.length - 1))
    {
        System_State_controller_param_array_elem_assign_value(dst.data[i_2], src.data[i_2]);
    }
    for(i_2 : src.length .. 2)
    {
        System_State_controller_param_array_elem_init_value(dst.data[i_2]);
    }
    dst.length = src.length;
}
inline System_State_controller_param_array_size_check(System_State_controller_param_array_sc)
{
    assert(((System_State_controller_param_array_sc >= 1) && (System_State_controller_param_array_sc <= 3)));
}
inline System_State_controller_param_optional_a_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_optional_a_range_check(dst);
}
inline System_State_controller_param_optional_a_range_check(System_State_controller_param_optional_a_vc)
{
    assert(((System_State_controller_param_optional_a_vc >= 0) && (System_State_controller_param_optional_a_vc <= 10000)));
}
inline System_State_controller_param_optional_b_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_optional_b_range_check(dst);
}
inline System_State_controller_param_optional_b_range_check(System_State_controller_param_optional_b_vc)
{
    assert(((System_State_controller_param_optional_b_vc >= 0) && (System_State_controller_param_optional_b_vc <= 10000)));
}
inline System_State_controller_param_optional_c_assign_value(dst, src)
{
    dst = src;
    System_State_controller_param_optional_c_range_check(dst);
}
inline System_State_controller_param_optional_c_range_check(System_State_controller_param_optional_c_vc)
{
    assert(((System_State_controller_param_optional_c_vc >= 0) && (System_State_controller_param_optional_c_vc <= 10000)));
}
inline System_State_controller_param_optional_assign_value(dst, src)
{
    System_State_controller_param_optional_a_assign_value(dst.a, src.a);
    System_State_controller_param_optional_b_assign_value(dst.b, src.b);
    System_State_controller_param_optional_c_assign_value(dst.c, src.c);
    dst.exist.b = src.exist.b;
    dst.exist.c = src.exist.c;
}
inline System_State_controller_reached_assign_value(dst, src)
{
    dst = src;
    System_State_controller_reached_range_check(dst);
}
inline System_State_controller_reached_range_check(System_State_controller_reached_vc)
{
    assert(((System_State_controller_reached_vc >= 0) && (System_State_controller_reached_vc <= 10000)));
}
inline System_State_controller_assign_value(dst, src)
{
    System_State_controller_state_assign_value(dst.state, src.state);
    System_State_controller_init_done_assign_value(dst.init_done, src.init_done);
    System_State_controller_sender_assign_value(dst.sender, src.sender);
    System_State_controller_param_integer_assign_value(dst.param_integer, src.param_integer);
    System_State_controller_param_sequence_assign_value(dst.param_sequence, src.param_sequence);
    System_State_controller_param_choice_assign_value(dst.param_choice, src.param_choice);
    System_State_controller_param_array_assign_value(dst.param_array, src.param_array);
    System_State_controller_param_optional_assign_value(dst.param_optional, src.param_optional);
    System_State_controller_reached_assign_value(dst.reached, src.reached);
}
inline System_State_assign_value(dst, src)
{
    System_State_timers_assign_value(dst.timers, src.timers);
    System_State_actuator_queue_assign_value(dst.actuator_queue, src.actuator_queue);
    System_State_controller_queue_assign_value(dst.controller_queue, src.controller_queue);
    System_State_actuator_assign_value(dst.actuator, src.actuator);
    System_State_controller_assign_value(dst.controller, src.controller);
}
inline nothing_init()
{
    d_step {
        nothing.selection = Observable_Event_no_event_PRESENT;
    }
}
inline TimerData_timer_enabled_assign_value(dst, src)
{
    dst = src;
    TimerData_timer_enabled_range_check(dst);
}
inline TimerData_timer_enabled_range_check(TimerData_timer_enabled_vc)
{
    assert(true);
}
inline TimerData_interval_assign_value(dst, src)
{
    dst = src;
    TimerData_interval_range_check(dst);
}
inline TimerData_interval_range_check(TimerData_interval_vc)
{
    assert(((TimerData_interval_vc >= 0) && (TimerData_interval_vc <= 50000)));
}
inline TimerData_assign_value(dst, src)
{
    TimerData_timer_enabled_assign_value(dst.timer_enabled, src.timer_enabled);
    TimerData_interval_assign_value(dst.interval, src.interval);
}
inline AggregateTimerData_actuator_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_controller_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_dummy_entry_assign_value(dst, src)
{
    skip;
}
inline AggregateTimerData_assign_value(dst, src)
{
    AggregateTimerData_actuator_assign_value(dst.actuator, src.actuator);
    AggregateTimerData_controller_assign_value(dst.controller, src.controller);
    AggregateTimerData_dummy_entry_assign_value(dst.dummy_entry, src.dummy_entry);
}
inline global_dataview_init()
{
    d_step {
        nothing_init();
    }
}
