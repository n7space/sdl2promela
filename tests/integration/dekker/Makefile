SPIN?=spin
CC=gcc
CFLAGS=-O2

# We are testing the sources, not the installed application
SDL2PROMELA=PYTHONPATH=../../../ python3 -m sdl2promela.sdl2promela

RES_DIR=resources

TEST_DIR=out

CREATE_EMPTY_TEST_DIR=rm -r -f ${TEST_DIR} && mkdir -p ${TEST_DIR}
DELETE_TEST_DIR=rm -r ${TEST_DIR}

TESTS = \
	dekker

.SILENT : \
	${TESTS}

.PHONY : \
	${TESTS} \
	check

check: ${TESTS}

##############################INTEGRATION TESTS################################

# These tests are created based on the tests supplied with custom Spin version
# used by N7 Space (see github.com/n7space/Spin). Their purpose is to validate
# whether the generated Promela code actually works inside Spin.
# As sdl2promela generates only inlines (representing the SDL logic) which need
# external data and process definitions (similarly to opengeode generating
# only C functions, which need type declarations generated by asn1scc and
# glue code generated by Kazoo), they are wrapped inside "host" Promela
# files

dekker:
	echo "Test dekker"
	${CREATE_EMPTY_TEST_DIR}
	cp -r ${RES_DIR}/lock ${TEST_DIR}
	
	pushd  ${TEST_DIR}/lock/SDL/src && opengeode --toAda system_structure.pr  lock.pr && popd
	${SDL2PROMELA} -v -o ${TEST_DIR}/lock.pml \
		--sdl ${TEST_DIR}/lock/SDL/src/system_structure.pr ${TEST_DIR}/lock/SDL/src/lock.pr

#	diff  ${TEST_DIR}/InputObserver.info ${RES_DIR}/attachments.output
#	cp ${RES_DIR}/harness.pml ${TEST_DIR}/harness.pml
#	cd ${TEST_DIR} && \
#	${SPIN} -a -m harness.pml
#	$(CC) -o ${TEST_DIR}/pan ${TEST_DIR}/pan.c $(CFLAGS) -DNFAIR=3
#	cd ${TEST_DIR} && \
#	./pan -n -m1000000 > system.output
#	grep -q "errors: 0" ${TEST_DIR}/system.output
#	${DELETE_TEST_DIR}
