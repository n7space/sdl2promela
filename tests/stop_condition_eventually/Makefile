SPIN?=spin
CC=gcc
CFLAGS=-O2

# We are testing the sources, not the installed application
SDL2PROMELA=PYTHONPATH=../../ python3 -m sdl2promela.sdl2promela

RES_DIR=resources

TEST_DIR=out

CREATE_EMPTY_TEST_DIR=rm -r -f ${TEST_DIR} && mkdir -p ${TEST_DIR}
DELETE_TEST_DIR=rm -r ${TEST_DIR}

TESTS = \
	test_stop_condition_eventually_error test_stop_condition_eventually_ok

#.SILENT : \
#	${TESTS}

.PHONY : \
	${TESTS} \
	check

check: ${TESTS}

##############################INTEGRATION TESTS################################

# These tests are created based on the tests supplied with custom Spin version
# used by N7 Space (see github.com/n7space/Spin). Their purpose is to validate
# whether the generated Promela code actually works inside Spin.
# As sdl2promela generates only inlines (representing the SDL logic) which need
# external data and process definitions (similarly to opengeode generating
# only C functions, which need type declarations generated by asn1scc and
# glue code generated by Kazoo), they are wrapped inside "host" Promela
# files

# In this test the model checker shall find an error.
# The stop condition is: eventually actuator.response = True;
# Which means that spin shall find an acceptance cycle where the boolean expression is
# always evaluated to false.
test_stop_condition_eventually_error:
	echo "Test stop_condition_eventually_error"
	${CREATE_EMPTY_TEST_DIR}
	${SDL2PROMELA} -v -o ${TEST_DIR}/controller.pml --sdl ${RES_DIR}/controller/system_structure.pr ${RES_DIR}/controller/controller.pr
	${SDL2PROMELA} -v -o ${TEST_DIR}/actuator.pml --sdl ${RES_DIR}/actuator/system_structure.pr ${RES_DIR}/actuator/actuator.pr
	${SDL2PROMELA} -v -o ${TEST_DIR}/scl.pml --scl ${RES_DIR}/scl.txt
	cp ${RES_DIR}/dataview.pml ${TEST_DIR}/dataview.pml
	cp ${RES_DIR}/system.pml ${TEST_DIR}/system.pml
	cp ${RES_DIR}/env_inlines.pml ${TEST_DIR}/env_inlines.pml
	cd ${TEST_DIR} && \
	${SPIN} -a -m system.pml
	$(CC) -o ${TEST_DIR}/pan ${TEST_DIR}/pan.c $(CFLAGS) -DNFAIR=3
	cd ${TEST_DIR} && \
	./pan -a -f -n -m1000000 > system.output
	grep -q "pan:1: acceptance cycle" ${TEST_DIR}/system.output
	grep -q "errors: 1" ${TEST_DIR}/system.output
	${DELETE_TEST_DIR}

# This test contains a model which is a copy of model from previous test
# with a fix.
# In this test, the expected behaviour of spin is to accept model without errors.
test_stop_condition_eventually_ok:
	echo "Test stop_condition_eventually_ok"
	${CREATE_EMPTY_TEST_DIR}
	${SDL2PROMELA} -v -o ${TEST_DIR}/controller.pml --sdl ${RES_DIR}/controller/system_structure.pr ${RES_DIR}/controller/controller.pr
	${SDL2PROMELA} -v -o ${TEST_DIR}/actuator.pml --sdl ${RES_DIR}/actuator_fixed/system_structure.pr ${RES_DIR}/actuator_fixed/actuator.pr
	${SDL2PROMELA} -v -o ${TEST_DIR}/scl.pml --scl ${RES_DIR}/scl.txt
	cp ${RES_DIR}/dataview.pml ${TEST_DIR}/dataview.pml
	cp ${RES_DIR}/system.pml ${TEST_DIR}/system.pml
	cp ${RES_DIR}/env_inlines.pml ${TEST_DIR}/env_inlines.pml
	cd ${TEST_DIR} && \
	${SPIN} -a -m system.pml
	$(CC) -o ${TEST_DIR}/pan ${TEST_DIR}/pan.c $(CFLAGS) -DNFAIR=3
	cd ${TEST_DIR} && \
	./pan -a -f -n -m1000000 > system.output
	grep -q "errors: 0" ${TEST_DIR}/system.output
	${DELETE_TEST_DIR}
